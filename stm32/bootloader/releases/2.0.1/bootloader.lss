
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000716c  08000000  08000000  00010000  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000258  10006000  0800716c  00026000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  10006258  080073c4  00026258  2**2
                  ALLOC
  3 .stack        00000804  10006334  080074a0  00026258  2**0
                  ALLOC
  4 .debug_info   0001310c  00000000  00000000  00026258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000031d9  00000000  00000000  00039364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    000079d6  00000000  00000000  0003c53d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000008b0  00000000  00000000  00043f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000d80  00000000  00000000  000447c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00029b31  00000000  00000000  00045543  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a818  00000000  00000000  0006f074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000edb9f  00000000  00000000  0007988c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000006e  00000000  00000000  0016742b  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000037  00000000  00000000  00167499  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00001a08  00000000  00000000  001674d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <_sfixed>:
 8000000:	10007c00 	.word	0x10007c00
 8000004:	080000b5 	.word	0x080000b5
 8000008:	0800001d 	.word	0x0800001d
 800000c:	0800001f 	.word	0x0800001f
 8000010:	08000021 	.word	0x08000021
 8000014:	08000023 	.word	0x08000023
 8000018:	08000025 	.word	0x08000025

0800001c <NMI_Handler>:
 800001c:	be01      	bkpt	0x0001

0800001e <HardFault_Handler>:
 800001e:	be02      	bkpt	0x0002

08000020 <MemManage_Handler>:
 8000020:	be03      	bkpt	0x0003

08000022 <BusFault_Handler>:
 8000022:	be04      	bkpt	0x0004

08000024 <UsageFault_Handler>:
 8000024:	be05      	bkpt	0x0005
 8000026:	e7fe      	b.n	8000026 <UsageFault_Handler+0x2>

08000028 <bootloader_info>:
	...
 8000040:	08000305 	.word	0x08000305

08000044 <my_version_code>:
 8000044:	00000100 	.word	0x00000100
	...
 8000060:	20296328 	.word	0x20296328
 8000064:	79706f43 	.word	0x79706f43
 8000068:	68676972 	.word	0x68676972
 800006c:	30322074 	.word	0x30322074
 8000070:	322d3831 	.word	0x322d3831
 8000074:	20393130 	.word	0x20393130
 8000078:	43207962 	.word	0x43207962
 800007c:	6b6e696f 	.word	0x6b6e696f
 8000080:	20657469 	.word	0x20657469
 8000084:	2e636e49 	.word	0x2e636e49
 8000088:	0a200a20 	.word	0x0a200a20
 800008c:	73696854 	.word	0x73696854
 8000090:	61707320 	.word	0x61707320
 8000094:	66206563 	.word	0x66206563
 8000098:	7220726f 	.word	0x7220726f
 800009c:	21746e65 	.word	0x21746e65
 80000a0:	73754a20 	.word	0x73754a20
 80000a4:	42322074 	.word	0x42322074
 80000a8:	792f4354 	.word	0x792f4354
 80000ac:	2e726165 	.word	0x2e726165
 80000b0:	0a200a20 	.word	0x0a200a20

080000b4 <reset_entry>:
 80000b4:	f000 f816 	bl	80000e4 <firewall_setup>
 80000b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80000bc:	f04f 0100 	mov.w	r1, #0
 80000c0:	f04f 0200 	mov.w	r2, #0
 80000c4:	f04f 0300 	mov.w	r3, #0
 80000c8:	f000 f91c 	bl	8000304 <callgate_entry0>
 80000cc:	f248 0108 	movw	r1, #32776	; 0x8008
 80000d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80000d4:	6808      	ldr	r0, [r1, #0]
 80000d6:	4685      	mov	sp, r0
 80000d8:	f04f 0001 	mov.w	r0, #1
 80000dc:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80000e0:	4770      	bx	lr
	...

080000e4 <firewall_setup>:
    void
firewall_setup(void)
{
    // This is critical: without the clock enabled to "SYSCFG" we
    // can't tell the FW is enabled or not! Enabling it would also not work
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80000e4:	4b1d      	ldr	r3, [pc, #116]	; (800015c <firewall_setup+0x78>)
// It's best if this is outside the firewall. After we return, we'll
// jump into setup code contained inside the firewall.
//
    void
firewall_setup(void)
{
 80000e6:	b500      	push	{lr}
    // This is critical: without the clock enabled to "SYSCFG" we
    // can't tell the FW is enabled or not! Enabling it would also not work
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80000e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80000ea:	f042 0201 	orr.w	r2, r2, #1
 80000ee:	661a      	str	r2, [r3, #96]	; 0x60
 80000f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
// It's best if this is outside the firewall. After we return, we'll
// jump into setup code contained inside the firewall.
//
    void
firewall_setup(void)
{
 80000f2:	b08b      	sub	sp, #44	; 0x2c
    // This is critical: without the clock enabled to "SYSCFG" we
    // can't tell the FW is enabled or not! Enabling it would also not work
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80000f4:	f003 0301 	and.w	r3, r3, #1
 80000f8:	9300      	str	r3, [sp, #0]
 80000fa:	9b00      	ldr	r3, [sp, #0]

    if(__HAL_FIREWALL_IS_ENABLED()) {
 80000fc:	4b18      	ldr	r3, [pc, #96]	; (8000160 <firewall_setup+0x7c>)
 80000fe:	685b      	ldr	r3, [r3, #4]
 8000100:	07db      	lsls	r3, r3, #31
 8000102:	d527      	bpl.n	8000154 <firewall_setup+0x70>
    // REMINDERS: 
    // - cannot debug anything in boot loader w/ firewall enabled (no readback, no bkpt)
    // - when RDP=2, this protection still important or else python can read pairing secret
    // - in factory mode (RDP!=2), it's nice to have this disabled so we can debug still
    // - could look at RDP level here, but it would be harder to completely reset the bag number!
    if(check_all_ones(rom_secrets->bag_number, sizeof(rom_secrets->bag_number))) {
 8000104:	2120      	movs	r1, #32
 8000106:	4817      	ldr	r0, [pc, #92]	; (8000164 <firewall_setup+0x80>)
 8000108:	f001 fef4 	bl	8001ef4 <check_all_ones>
 800010c:	bb10      	cbnz	r0, 8000154 <firewall_setup+0x70>
    // for debug builds, never enable firewall
    return;
#endif

    extern int firewall_starts;       // see startup.S ... aligned@256 (0x08000300)
    uint32_t    start = (uint32_t)&firewall_starts;
 800010e:	4b16      	ldr	r3, [pc, #88]	; (8000168 <firewall_setup+0x84>)
    //   but sensitive stuff is still there (which would allow bypass)
    // - so it's important to enable option bytes to set write-protect on entire bootloader
    // - to disable debug and complete protection, must enable write-protect "level 2"
    //

    FIREWALL_InitTypeDef init = {
 8000110:	9302      	str	r3, [sp, #8]
 8000112:	f1c3 6300 	rsb	r3, r3, #134217728	; 0x8000000
 8000116:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 800011a:	9303      	str	r3, [sp, #12]
 800011c:	4b13      	ldr	r3, [pc, #76]	; (800016c <firewall_setup+0x88>)
 800011e:	9304      	str	r3, [sp, #16]
 8000120:	9006      	str	r0, [sp, #24]
 8000122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000126:	9007      	str	r0, [sp, #28]
 8000128:	9008      	str	r0, [sp, #32]
 800012a:	9009      	str	r0, [sp, #36]	; 0x24
        .VDataSegmentLength = 0,
        .VolatileDataExecution = 0,
        .VolatileDataShared = 0,
    };

    int rv = HAL_FIREWALL_Config((FIREWALL_InitTypeDef *)&init);
 800012c:	a802      	add	r0, sp, #8
    //   but sensitive stuff is still there (which would allow bypass)
    // - so it's important to enable option bytes to set write-protect on entire bootloader
    // - to disable debug and complete protection, must enable write-protect "level 2"
    //

    FIREWALL_InitTypeDef init = {
 800012e:	9305      	str	r3, [sp, #20]
        .VDataSegmentLength = 0,
        .VolatileDataExecution = 0,
        .VolatileDataShared = 0,
    };

    int rv = HAL_FIREWALL_Config((FIREWALL_InitTypeDef *)&init);
 8000130:	f000 f822 	bl	8000178 <HAL_FIREWALL_Config>
    if(rv) {
 8000134:	b110      	cbz	r0, 800013c <firewall_setup+0x58>
        INCONSISTENT("fw");
 8000136:	480e      	ldr	r0, [pc, #56]	; (8000170 <firewall_setup+0x8c>)
 8000138:	f000 f94a 	bl	80003d0 <fatal_error>
    }

    __HAL_FIREWALL_PREARM_DISABLE();
 800013c:	4b0d      	ldr	r3, [pc, #52]	; (8000174 <firewall_setup+0x90>)
 800013e:	6a1a      	ldr	r2, [r3, #32]
 8000140:	f022 0201 	bic.w	r2, r2, #1
 8000144:	621a      	str	r2, [r3, #32]
 8000146:	6a1b      	ldr	r3, [r3, #32]
 8000148:	f003 0301 	and.w	r3, r3, #1
 800014c:	9301      	str	r3, [sp, #4]
 800014e:	9b01      	ldr	r3, [sp, #4]
    HAL_FIREWALL_EnableFirewall();
 8000150:	f000 f88e 	bl	8000270 <HAL_FIREWALL_EnableFirewall>
}
 8000154:	b00b      	add	sp, #44	; 0x2c
 8000156:	f85d fb04 	ldr.w	pc, [sp], #4
 800015a:	bf00      	nop
 800015c:	40021000 	.word	0x40021000
 8000160:	40010000 	.word	0x40010000
 8000164:	08007850 	.word	0x08007850
 8000168:	08000300 	.word	0x08000300
 800016c:	08007800 	.word	0x08007800
 8000170:	08006680 	.word	0x08006680
 8000174:	40011c00 	.word	0x40011c00

08000178 <HAL_FIREWALL_Config>:
  * @param fw_init: Firewall initialization structure
  * @note  The API returns HAL_ERROR if the Firewall is already enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FIREWALL_Config(FIREWALL_InitTypeDef * fw_init)
{
 8000178:	b513      	push	{r0, r1, r4, lr}
  /* Check the Firewall initialization structure allocation */
  if(fw_init == NULL)
 800017a:	b908      	cbnz	r0, 8000180 <HAL_FIREWALL_Config+0x8>
  {
    return HAL_ERROR;
 800017c:	2001      	movs	r0, #1
 800017e:	e033      	b.n	80001e8 <HAL_FIREWALL_Config+0x70>
  }

  /* Enable Firewall clock */
  __HAL_RCC_FIREWALL_CLK_ENABLE();
 8000180:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <HAL_FIREWALL_Config+0x74>)
 8000182:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000184:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000188:	661a      	str	r2, [r3, #96]	; 0x60
 800018a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800018c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000190:	9301      	str	r3, [sp, #4]
 8000192:	9b01      	ldr	r3, [sp, #4]

  /* Make sure that Firewall is not enabled already */
  if (__HAL_FIREWALL_IS_ENABLED() != RESET)
 8000194:	4b16      	ldr	r3, [pc, #88]	; (80001f0 <HAL_FIREWALL_Config+0x78>)
 8000196:	685b      	ldr	r3, [r3, #4]
 8000198:	07db      	lsls	r3, r3, #31
 800019a:	d5ef      	bpl.n	800017c <HAL_FIREWALL_Config+0x4>
  assert_param(IS_FIREWALL_VOLATILEDATA_SHARE(fw_init->VolatileDataShared));

   /* Configuration */

  /* Protected code segment start address configuration */
  WRITE_REG(FIREWALL->CSSA, (FW_CSSA_ADD & fw_init->CodeSegmentStartAddress));
 800019c:	6802      	ldr	r2, [r0, #0]
 800019e:	4b15      	ldr	r3, [pc, #84]	; (80001f4 <HAL_FIREWALL_Config+0x7c>)
 80001a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80001a4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80001a8:	601a      	str	r2, [r3, #0]
    /* Protected code segment length configuration */
  WRITE_REG(FIREWALL->CSL, (FW_CSL_LENG & fw_init->CodeSegmentLength));
 80001aa:	6841      	ldr	r1, [r0, #4]
 80001ac:	4a12      	ldr	r2, [pc, #72]	; (80001f8 <HAL_FIREWALL_Config+0x80>)
 80001ae:	400a      	ands	r2, r1
 80001b0:	605a      	str	r2, [r3, #4]

  /* Protected non volatile data segment start address configuration */
  WRITE_REG(FIREWALL->NVDSSA, (FW_NVDSSA_ADD & fw_init->NonVDataSegmentStartAddress));
 80001b2:	6882      	ldr	r2, [r0, #8]
 80001b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80001b8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80001bc:	609a      	str	r2, [r3, #8]
    /* Protected non volatile data segment length configuration */
  WRITE_REG(FIREWALL->NVDSL, (FW_NVDSL_LENG & fw_init->NonVDataSegmentLength));
 80001be:	68c1      	ldr	r1, [r0, #12]
 80001c0:	4a0d      	ldr	r2, [pc, #52]	; (80001f8 <HAL_FIREWALL_Config+0x80>)
 80001c2:	400a      	ands	r2, r1
 80001c4:	60da      	str	r2, [r3, #12]

  /* Protected volatile data segment start address configuration */
  WRITE_REG(FIREWALL->VDSSA, (FW_VDSSA_ADD & fw_init->VDataSegmentStartAddress));
 80001c6:	6901      	ldr	r1, [r0, #16]
 80001c8:	4a0c      	ldr	r2, [pc, #48]	; (80001fc <HAL_FIREWALL_Config+0x84>)
 80001ca:	400a      	ands	r2, r1
 80001cc:	611a      	str	r2, [r3, #16]
    /* Protected volatile data segment length configuration */
  WRITE_REG(FIREWALL->VDSL, (FW_VDSL_LENG & fw_init->VDataSegmentLength));
 80001ce:	6941      	ldr	r1, [r0, #20]
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <HAL_FIREWALL_Config+0x84>)
 80001d2:	400a      	ands	r2, r1
 80001d4:	615a      	str	r2, [r3, #20]

  /* Set Firewall Configuration Register VDE and VDS bits
     (volatile data execution and shared configuration) */
  MODIFY_REG(FIREWALL->CR, FW_CR_VDS|FW_CR_VDE, fw_init->VolatileDataExecution|fw_init->VolatileDataShared);
 80001d6:	6984      	ldr	r4, [r0, #24]
 80001d8:	69c1      	ldr	r1, [r0, #28]
 80001da:	6a1a      	ldr	r2, [r3, #32]
 80001dc:	4321      	orrs	r1, r4
 80001de:	f022 0206 	bic.w	r2, r2, #6
 80001e2:	430a      	orrs	r2, r1
 80001e4:	621a      	str	r2, [r3, #32]

  return HAL_OK;
 80001e6:	2000      	movs	r0, #0
}
 80001e8:	b002      	add	sp, #8
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	40021000 	.word	0x40021000
 80001f0:	40010000 	.word	0x40010000
 80001f4:	40011c00 	.word	0x40011c00
 80001f8:	003fff00 	.word	0x003fff00
 80001fc:	0001ffc0 	.word	0x0001ffc0

08000200 <HAL_FIREWALL_GetConfig>:
void HAL_FIREWALL_GetConfig(FIREWALL_InitTypeDef * fw_config)
{

  /* Enable Firewall clock, in case no Firewall configuration has been carried
     out up to this point */
  __HAL_RCC_FIREWALL_CLK_ENABLE();
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_FIREWALL_GetConfig+0x60>)

  /* Retrieve code segment protection setting */
  fw_config->CodeSegmentStartAddress = (READ_REG(FIREWALL->CSSA) & FW_CSSA_ADD);
  fw_config->CodeSegmentLength = (READ_REG(FIREWALL->CSL) & FW_CSL_LENG);
 8000202:	4918      	ldr	r1, [pc, #96]	; (8000264 <HAL_FIREWALL_GetConfig+0x64>)
void HAL_FIREWALL_GetConfig(FIREWALL_InitTypeDef * fw_config)
{

  /* Enable Firewall clock, in case no Firewall configuration has been carried
     out up to this point */
  __HAL_RCC_FIREWALL_CLK_ENABLE();
 8000204:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000206:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800020a:	661a      	str	r2, [r3, #96]	; 0x60
 800020c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  *       is defined, this API can't be executed when the Firewall is enabled.
  * @note User should resort to __HAL_FIREWALL_GET_PREARM() macro to retrieve FPA bit status
  * @retval None
  */
void HAL_FIREWALL_GetConfig(FIREWALL_InitTypeDef * fw_config)
{
 800020e:	b082      	sub	sp, #8

  /* Enable Firewall clock, in case no Firewall configuration has been carried
     out up to this point */
  __HAL_RCC_FIREWALL_CLK_ENABLE();
 8000210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	9b01      	ldr	r3, [sp, #4]

  /* Retrieve code segment protection setting */
  fw_config->CodeSegmentStartAddress = (READ_REG(FIREWALL->CSSA) & FW_CSSA_ADD);
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <HAL_FIREWALL_GetConfig+0x68>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000220:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000224:	6002      	str	r2, [r0, #0]
  fw_config->CodeSegmentLength = (READ_REG(FIREWALL->CSL) & FW_CSL_LENG);
 8000226:	685a      	ldr	r2, [r3, #4]
 8000228:	400a      	ands	r2, r1
 800022a:	6042      	str	r2, [r0, #4]

  /* Retrieve non volatile data segment protection setting */
  fw_config->NonVDataSegmentStartAddress = (READ_REG(FIREWALL->NVDSSA) & FW_NVDSSA_ADD);
 800022c:	689a      	ldr	r2, [r3, #8]
 800022e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000232:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000236:	6082      	str	r2, [r0, #8]
  fw_config->NonVDataSegmentLength = (READ_REG(FIREWALL->NVDSL) & FW_NVDSL_LENG);
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	4011      	ands	r1, r2
 800023c:	60c1      	str	r1, [r0, #12]

  /* Retrieve volatile data segment protection setting */
  fw_config->VDataSegmentStartAddress = (READ_REG(FIREWALL->VDSSA) & FW_VDSSA_ADD);
 800023e:	6919      	ldr	r1, [r3, #16]
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_FIREWALL_GetConfig+0x6c>)
 8000242:	4011      	ands	r1, r2
 8000244:	6101      	str	r1, [r0, #16]
  fw_config->VDataSegmentLength = (READ_REG(FIREWALL->VDSL) & FW_VDSL_LENG);
 8000246:	6959      	ldr	r1, [r3, #20]
 8000248:	400a      	ands	r2, r1
 800024a:	6142      	str	r2, [r0, #20]

  /* Retrieve volatile data execution setting */
  fw_config->VolatileDataExecution = (READ_REG(FIREWALL->CR) & FW_CR_VDE);
 800024c:	6a1a      	ldr	r2, [r3, #32]
 800024e:	f002 0204 	and.w	r2, r2, #4
 8000252:	6182      	str	r2, [r0, #24]

  /* Retrieve volatile data shared setting */
  fw_config->VolatileDataShared = (READ_REG(FIREWALL->CR) & FW_CR_VDS);
 8000254:	6a1b      	ldr	r3, [r3, #32]
 8000256:	f003 0302 	and.w	r3, r3, #2
 800025a:	61c3      	str	r3, [r0, #28]

  return;
}
 800025c:	b002      	add	sp, #8
 800025e:	4770      	bx	lr
 8000260:	40021000 	.word	0x40021000
 8000264:	003fff00 	.word	0x003fff00
 8000268:	40011c00 	.word	0x40011c00
 800026c:	0001ffc0 	.word	0x0001ffc0

08000270 <HAL_FIREWALL_EnableFirewall>:
  * @retval None
  */
void HAL_FIREWALL_EnableFirewall(void)
{
  /* Clears FWDIS bit of SYSCFG CFGR1 register */
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_FWDIS);
 8000270:	4a02      	ldr	r2, [pc, #8]	; (800027c <HAL_FIREWALL_EnableFirewall+0xc>)
 8000272:	6853      	ldr	r3, [r2, #4]
 8000274:	f023 0301 	bic.w	r3, r3, #1
 8000278:	6053      	str	r3, [r2, #4]
 800027a:	4770      	bx	lr
 800027c:	40010000 	.word	0x40010000

08000280 <HAL_FIREWALL_EnablePreArmFlag>:
  * @retval None
  */
void HAL_FIREWALL_EnablePreArmFlag(void)
{
  /* Set FPA bit */
  SET_BIT(FIREWALL->CR, FW_CR_FPA);
 8000280:	4a02      	ldr	r2, [pc, #8]	; (800028c <HAL_FIREWALL_EnablePreArmFlag+0xc>)
 8000282:	6a13      	ldr	r3, [r2, #32]
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6213      	str	r3, [r2, #32]
 800028a:	4770      	bx	lr
 800028c:	40011c00 	.word	0x40011c00

08000290 <HAL_FIREWALL_DisablePreArmFlag>:
  * @retval None
  */
void HAL_FIREWALL_DisablePreArmFlag(void)
{
  /* Clear FPA bit */
  CLEAR_BIT(FIREWALL->CR, FW_CR_FPA);
 8000290:	4a02      	ldr	r2, [pc, #8]	; (800029c <HAL_FIREWALL_DisablePreArmFlag+0xc>)
 8000292:	6a13      	ldr	r3, [r2, #32]
 8000294:	f023 0301 	bic.w	r3, r3, #1
 8000298:	6213      	str	r3, [r2, #32]
 800029a:	4770      	bx	lr
 800029c:	40011c00 	.word	0x40011c00
	...

08000300 <_firewall_start>:
 8000300:	0f193a11 	.word	0x0f193a11

08000304 <callgate_entry0>:
 8000304:	f246 0900 	movw	r9, #24576	; 0x6000
 8000308:	f2c1 0900 	movt	r9, #4096	; 0x1000
 800030c:	f44f 5ae0 	mov.w	sl, #7168	; 0x1c00
 8000310:	44ca      	add	sl, r9

08000312 <wipe_loop1>:
 8000312:	f849 ab04 	str.w	sl, [r9], #4
 8000316:	45d1      	cmp	r9, sl
 8000318:	d1fb      	bne.n	8000312 <wipe_loop1>
 800031a:	46ea      	mov	sl, sp
 800031c:	46cd      	mov	sp, r9
 800031e:	e92d 4400 	stmdb	sp!, {sl, lr}

08000322 <dispatcher>:
 8000322:	f000 f963 	bl	80005ec <firewall_dispatch>
 8000326:	e8bd 4400 	ldmia.w	sp!, {sl, lr}
 800032a:	46d5      	mov	sp, sl
 800032c:	f246 0900 	movw	r9, #24576	; 0x6000
 8000330:	f2c1 0900 	movt	r9, #4096	; 0x1000
 8000334:	f44f 5ae0 	mov.w	sl, #7168	; 0x1c00
 8000338:	44ca      	add	sl, r9

0800033a <wipe_loop2>:
 800033a:	f849 0b04 	str.w	r0, [r9], #4
 800033e:	45d1      	cmp	r9, sl
 8000340:	d1fb      	bne.n	800033a <wipe_loop2>
 8000342:	4770      	bx	lr

08000344 <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000344:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000348:	4905      	ldr	r1, [pc, #20]	; (8000360 <NVIC_SystemReset+0x1c>)
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800034c:	68ca      	ldr	r2, [r1, #12]
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800034e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000352:	4313      	orrs	r3, r2
 8000354:	60cb      	str	r3, [r1, #12]
 8000356:	f3bf 8f4f 	dsb	sy
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800035a:	bf00      	nop
 800035c:	e7fd      	b.n	800035a <NVIC_SystemReset+0x16>
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	05fa0004 	.word	0x05fa0004

08000368 <good_addr>:
    static int
good_addr(const uint8_t *b, int minlen, int len, bool readonly)
{
    uint32_t x = (uint32_t)b;

    if(minlen) {
 8000368:	b111      	cbz	r1, 8000370 <good_addr+0x8>
        if(!b) return EFAULT;               // gave no buffer
 800036a:	b188      	cbz	r0, 8000390 <good_addr+0x28>
        if(len < minlen) return ERANGE;     // too small
 800036c:	4291      	cmp	r1, r2
 800036e:	dc11      	bgt.n	8000394 <good_addr+0x2c>
    }
        

    if((x >= SRAM1_BASE) && ((x-SRAM1_BASE) < SRAM1_SIZE_MAX)) {
 8000370:	f100 4260 	add.w	r2, r0, #3758096384	; 0xe0000000
 8000374:	f5b2 3fc0 	cmp.w	r2, #98304	; 0x18000
 8000378:	d30e      	bcc.n	8000398 <good_addr+0x30>
        // inside SRAM1, okay
        return 0;
    }

    if(!readonly) {
 800037a:	b17b      	cbz	r3, 800039c <good_addr+0x34>
        return EPERM;
    }

    if((x >= FIRMWARE_START) && (x - FIRMWARE_START) < FW_MAX_LENGTH) {
 800037c:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8000380:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
        // inside flash of main firmware (happens for QSTR's)
        return 0;
    }

    return EACCES;
 8000384:	f5b0 2f78 	cmp.w	r0, #1015808	; 0xf8000
 8000388:	bf34      	ite	cc
 800038a:	2000      	movcc	r0, #0
 800038c:	200d      	movcs	r0, #13
 800038e:	4770      	bx	lr
good_addr(const uint8_t *b, int minlen, int len, bool readonly)
{
    uint32_t x = (uint32_t)b;

    if(minlen) {
        if(!b) return EFAULT;               // gave no buffer
 8000390:	200e      	movs	r0, #14
 8000392:	4770      	bx	lr
        if(len < minlen) return ERANGE;     // too small
 8000394:	2022      	movs	r0, #34	; 0x22
 8000396:	4770      	bx	lr
    }
        

    if((x >= SRAM1_BASE) && ((x-SRAM1_BASE) < SRAM1_SIZE_MAX)) {
        // inside SRAM1, okay
        return 0;
 8000398:	2000      	movs	r0, #0
 800039a:	4770      	bx	lr
    }

    if(!readonly) {
        return EPERM;
 800039c:	2001      	movs	r0, #1
        // inside flash of main firmware (happens for QSTR's)
        return 0;
    }

    return EACCES;
}
 800039e:	4770      	bx	lr

080003a0 <wipe_all_sram>:
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
        *dest = value;
 80003a0:	4808      	ldr	r0, [pc, #32]	; (80003c4 <wipe_all_sram+0x24>)
// memset4()
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
 80003a2:	4a09      	ldr	r2, [pc, #36]	; (80003c8 <wipe_all_sram+0x28>)

// wipe_all_sram()
//
    static void
wipe_all_sram(void)
{
 80003a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
        *dest = value;
 80003a8:	f843 0b04 	str.w	r0, [r3], #4
// memset4()
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
 80003ac:	4293      	cmp	r3, r2
 80003ae:	4905      	ldr	r1, [pc, #20]	; (80003c4 <wipe_all_sram+0x24>)
 80003b0:	d1fa      	bne.n	80003a8 <wipe_all_sram+0x8>
 80003b2:	4a06      	ldr	r2, [pc, #24]	; (80003cc <wipe_all_sram+0x2c>)
 80003b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
        *dest = value;
 80003b8:	f843 1b04 	str.w	r1, [r3], #4
// memset4()
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
 80003bc:	4293      	cmp	r3, r2
 80003be:	d1fb      	bne.n	80003b8 <wipe_all_sram+0x18>
    const uint32_t noise = 0xdeadbeef;

    // wipe all of SRAM (except our own memory, which was already wiped)
    memset4((void *)SRAM1_BASE, noise, SRAM1_SIZE_MAX);
    memset4((void *)SRAM2_BASE, noise, SRAM2_SIZE - BL_SRAM_SIZE);
}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	deadbeef 	.word	0xdeadbeef
 80003c8:	20018000 	.word	0x20018000
 80003cc:	10006400 	.word	0x10006400

080003d0 <fatal_error>:

// fatal_error(const char *msg)
//
    void
fatal_error(const char *msgvoid)
{
 80003d0:	b508      	push	{r3, lr}
    oled_setup();
 80003d2:	f000 fbdf 	bl	8000b94 <oled_setup>
    oled_show(screen_fatal);
 80003d6:	4802      	ldr	r0, [pc, #8]	; (80003e0 <fatal_error+0x10>)
 80003d8:	f000 fc68 	bl	8000cac <oled_show>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80003dc:	bf30      	wfi
 80003de:	e7fd      	b.n	80003dc <fatal_error+0xc>
 80003e0:	0800693b 	.word	0x0800693b

080003e4 <reboot_seed_setup>:
    uint8_t                     *reboot_seed = &reboot_seed_base[0];  // 32 bytes
    coldcardFirmwareHeader_t    *hdr_copy = (void *)&reboot_seed_base[32];
    uint32_t                    *boot_flags = (uint32_t *)RAM_BOOT_FLAGS;

    // can only do this once, and might be done already
    if(SYSCFG->SWPR != (1<<31)) {
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <reboot_seed_setup+0x64>)
 80003e6:	6a1b      	ldr	r3, [r3, #32]
 80003e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
// We need to know when we are rebooted, so write some noise
// into SRAM and lock its value. Not secrets. One page = 1k bytes here.
//
    void
reboot_seed_setup(void)
{
 80003ec:	b510      	push	{r4, lr}
    uint8_t                     *reboot_seed = &reboot_seed_base[0];  // 32 bytes
    coldcardFirmwareHeader_t    *hdr_copy = (void *)&reboot_seed_base[32];
    uint32_t                    *boot_flags = (uint32_t *)RAM_BOOT_FLAGS;

    // can only do this once, and might be done already
    if(SYSCFG->SWPR != (1<<31)) {
 80003ee:	d02a      	beq.n	8000446 <reboot_seed_setup+0x62>
        ASSERT(((uint32_t)reboot_seed) == 0x10007c00);
 80003f0:	4c16      	ldr	r4, [pc, #88]	; (800044c <reboot_seed_setup+0x68>)
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <reboot_seed_setup+0x6c>)
 80003f4:	429c      	cmp	r4, r3
 80003f6:	d002      	beq.n	80003fe <reboot_seed_setup+0x1a>
 80003f8:	4816      	ldr	r0, [pc, #88]	; (8000454 <reboot_seed_setup+0x70>)
 80003fa:	f7ff ffe9 	bl	80003d0 <fatal_error>
        ASSERT(((uint32_t)hdr_copy) == RAM_HEADER_BASE);

        // populate seed w/ noise
        memset(reboot_seed, 0x55, 1024);
 80003fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000402:	2155      	movs	r1, #85	; 0x55
 8000404:	4620      	mov	r0, r4
 8000406:	f006 f906 	bl	8006616 <memset>
        rng_buffer(reboot_seed, 32);
 800040a:	2120      	movs	r1, #32
 800040c:	4620      	mov	r0, r4
 800040e:	f001 fdd9 	bl	8001fc4 <rng_buffer>

        // preserve a copy of the verified FW header
        memcpy(hdr_copy, FW_HDR, sizeof(coldcardFirmwareHeader_t));
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	4910      	ldr	r1, [pc, #64]	; (8000458 <reboot_seed_setup+0x74>)
 8000416:	f104 0020 	add.w	r0, r4, #32
 800041a:	f006 f8d6 	bl	80065ca <memcpy>
// Write bag number (probably a string)
void flash_save_bag_number(const uint8_t new_number[32]);

// Are we operating in level2?
static inline bool flash_is_security_level2(void) {
    return ((FLASH->OPTR & FLASH_OPTR_RDP_Msk) == 0xCC);
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <reboot_seed_setup+0x78>)
        // document how we booted.
        uint32_t fl = 0;
        if(!flash_is_security_level2()) {
            fl |= RBF_FACTORY_MODE;
        }
        if(sf_completed_upgrade == SF_COMPLETED_UPGRADE) {
 8000420:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <reboot_seed_setup+0x7c>)
 8000422:	6a1b      	ldr	r3, [r3, #32]
 8000424:	6811      	ldr	r1, [r2, #0]
 8000426:	4a0f      	ldr	r2, [pc, #60]	; (8000464 <reboot_seed_setup+0x80>)
        // preserve a copy of the verified FW header
        memcpy(hdr_copy, FW_HDR, sizeof(coldcardFirmwareHeader_t));

        // document how we booted.
        uint32_t fl = 0;
        if(!flash_is_security_level2()) {
 8000428:	b2db      	uxtb	r3, r3
            fl |= RBF_FACTORY_MODE;
 800042a:	2bcc      	cmp	r3, #204	; 0xcc
 800042c:	bf0c      	ite	eq
 800042e:	2300      	moveq	r3, #0
 8000430:	2302      	movne	r3, #2
        }
        if(sf_completed_upgrade == SF_COMPLETED_UPGRADE) {
 8000432:	4291      	cmp	r1, r2
            fl |= RBF_FRESH_VERSION;
        }
        *boot_flags = fl;
 8000434:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <reboot_seed_setup+0x84>)
        uint32_t fl = 0;
        if(!flash_is_security_level2()) {
            fl |= RBF_FACTORY_MODE;
        }
        if(sf_completed_upgrade == SF_COMPLETED_UPGRADE) {
            fl |= RBF_FRESH_VERSION;
 8000436:	bf08      	it	eq
 8000438:	f043 0301 	orreq.w	r3, r3, #1
        }
        *boot_flags = fl;
 800043c:	6013      	str	r3, [r2, #0]

        // lock it (top most page = 1k bytes)
        SYSCFG->SWPR = (1<<31);
 800043e:	4b02      	ldr	r3, [pc, #8]	; (8000448 <reboot_seed_setup+0x64>)
 8000440:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000444:	621a      	str	r2, [r3, #32]
 8000446:	bd10      	pop	{r4, pc}
 8000448:	40010000 	.word	0x40010000
 800044c:	10007c00 	.word	0x10007c00
 8000450:	10007c00 	.word	0x10007c00
 8000454:	08006686 	.word	0x08006686
 8000458:	0800bf80 	.word	0x0800bf80
 800045c:	40022000 	.word	0x40022000
 8000460:	10006330 	.word	0x10006330
 8000464:	b50d5c24 	.word	0xb50d5c24
 8000468:	10007ca0 	.word	0x10007ca0

0800046c <fatal_mitm>:

// fatal_mitm()
//
    void
fatal_mitm(void)
{
 800046c:	b508      	push	{r3, lr}
    oled_setup();
 800046e:	f000 fb91 	bl	8000b94 <oled_setup>
    oled_show(screen_mitm);
 8000472:	4803      	ldr	r0, [pc, #12]	; (8000480 <fatal_mitm+0x14>)
 8000474:	f000 fc1a 	bl	8000cac <oled_show>

#ifdef RELEASE
    wipe_all_sram();
 8000478:	f7ff ff92 	bl	80003a0 <wipe_all_sram>
 800047c:	bf30      	wfi
 800047e:	e7fd      	b.n	800047c <fatal_mitm+0x10>
 8000480:	08006c02 	.word	0x08006c02

08000484 <enter_dfu>:

// enter_dfu()
//
    void __attribute__((noreturn))
enter_dfu(void)
{
 8000484:	b507      	push	{r0, r1, r2, lr}
    const uint32_t noise = 0xDeadBeef;

    // clear the green light, if set
    ae_setup();
 8000486:	f001 fee3 	bl	8002250 <ae_setup>
    ae_set_gpio(0);
 800048a:	2000      	movs	r0, #0
 800048c:	f002 fbfe 	bl	8002c8c <ae_set_gpio>

    // Reset huge parts of the chip
    __HAL_RCC_APB1_FORCE_RESET();
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <enter_dfu+0x88>)
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
        *dest = value;
 8000492:	481f      	ldr	r0, [pc, #124]	; (8000510 <enter_dfu+0x8c>)
    ae_setup();
    ae_set_gpio(0);

    // Reset huge parts of the chip
    __HAL_RCC_APB1_FORCE_RESET();
    __HAL_RCC_APB1_RELEASE_RESET();
 8000494:	2200      	movs	r2, #0
    // clear the green light, if set
    ae_setup();
    ae_set_gpio(0);

    // Reset huge parts of the chip
    __HAL_RCC_APB1_FORCE_RESET();
 8000496:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800049a:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_RCC_APB1_RELEASE_RESET();
 800049c:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_APB2_FORCE_RESET();
 800049e:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_APB2_RELEASE_RESET();
 80004a0:	641a      	str	r2, [r3, #64]	; 0x40

    __HAL_RCC_AHB1_FORCE_RESET();
 80004a2:	6299      	str	r1, [r3, #40]	; 0x28
    __HAL_RCC_AHB1_RELEASE_RESET();
 80004a4:	629a      	str	r2, [r3, #40]	; 0x28
    // But not this; it borks things.
    __HAL_RCC_AHB2_FORCE_RESET();
    __HAL_RCC_AHB2_RELEASE_RESET();
#endif

    __HAL_RCC_AHB3_FORCE_RESET();
 80004a6:	6319      	str	r1, [r3, #48]	; 0x30
    __HAL_RCC_AHB3_RELEASE_RESET();
 80004a8:	631a      	str	r2, [r3, #48]	; 0x30

    __HAL_FIREWALL_PREARM_ENABLE();
 80004aa:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80004ae:	6a1a      	ldr	r2, [r3, #32]
 80004b0:	f042 0201 	orr.w	r2, r2, #1
 80004b4:	621a      	str	r2, [r3, #32]
 80004b6:	6a1b      	ldr	r3, [r3, #32]
// memset4()
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
 80004b8:	4a16      	ldr	r2, [pc, #88]	; (8000514 <enter_dfu+0x90>)
#endif

    __HAL_RCC_AHB3_FORCE_RESET();
    __HAL_RCC_AHB3_RELEASE_RESET();

    __HAL_FIREWALL_PREARM_ENABLE();
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
        *dest = value;
 80004c6:	f843 0b04 	str.w	r0, [r3], #4
// memset4()
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
 80004ca:	4293      	cmp	r3, r2
 80004cc:	4910      	ldr	r1, [pc, #64]	; (8000510 <enter_dfu+0x8c>)
 80004ce:	d1fa      	bne.n	80004c6 <enter_dfu+0x42>
 80004d0:	4a11      	ldr	r2, [pc, #68]	; (8000518 <enter_dfu+0x94>)
 80004d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
        *dest = value;
 80004d6:	f843 1b04 	str.w	r1, [r3], #4
// memset4()
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
 80004da:	4293      	cmp	r3, r2
 80004dc:	d1fb      	bne.n	80004d6 <enter_dfu+0x52>
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <enter_dfu+0x98>)
 80004e0:	6a1b      	ldr	r3, [r3, #32]
    // there is some way to trick us into DFU
    // after sensitive content in place.
    memset4((void *)SRAM1_BASE, noise, SRAM1_SIZE_MAX);
    memset4((void *)SRAM2_BASE, noise, SRAM2_SIZE - 1024);      // avoid seed area

    if(flash_is_security_level2()) {
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2bcc      	cmp	r3, #204	; 0xcc
 80004e6:	d101      	bne.n	80004ec <enter_dfu+0x68>
 80004e8:	bf30      	wfi
 80004ea:	e7fd      	b.n	80004e8 <enter_dfu+0x64>
        // cannot do DFU in RDP=2, so just die. Helps to preserve screen
        LOCKUP_FOREVER();
    }

    // Reset clocks.
    HAL_RCC_DeInit();
 80004ec:	f003 fe7e 	bl	80041ec <HAL_RCC_DeInit>

    // move system ROM into 0x0
    __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <enter_dfu+0x9c>)
 80004f2:	6813      	ldr	r3, [r2, #0]
 80004f4:	f023 0307 	bic.w	r3, r3, #7
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6013      	str	r3, [r2, #0]

    // simulate a reset vector
    __ASM volatile ("movs r0, #0\n"
 80004fe:	2000      	movs	r0, #0
 8000500:	6803      	ldr	r3, [r0, #0]
 8000502:	f383 8808 	msr	MSP, r3
 8000506:	6843      	ldr	r3, [r0, #4]
 8000508:	4798      	blx	r3
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	deadbeef 	.word	0xdeadbeef
 8000514:	20018000 	.word	0x20018000
 8000518:	10007c00 	.word	0x10007c00
 800051c:	40022000 	.word	0x40022000
 8000520:	40010000 	.word	0x40010000

08000524 <dfu_by_request>:

// dfu_by_request()
//
    void
dfu_by_request(void)
{
 8000524:	b508      	push	{r3, lr}
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <dfu_by_request+0x18>)
 8000528:	6a1b      	ldr	r3, [r3, #32]
    if(flash_is_security_level2()) {
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2bcc      	cmp	r3, #204	; 0xcc
 800052e:	d004      	beq.n	800053a <dfu_by_request+0x16>
        // cannot get into DFU when secure
        // so do nothing
        return;
    }

    oled_show(screen_dfu);
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <dfu_by_request+0x1c>)
 8000532:	f000 fbbb 	bl	8000cac <oled_show>
    enter_dfu();
 8000536:	f7ff ffa5 	bl	8000484 <enter_dfu>
 800053a:	bd08      	pop	{r3, pc}
 800053c:	40022000 	.word	0x40022000
 8000540:	080069ac 	.word	0x080069ac

08000544 <system_startup>:
//
// Called only on system boot.
//
    void
system_startup(void)
{
 8000544:	b510      	push	{r4, lr}
    // configure clocks first
    clocks_setup();
 8000546:	f001 fa3f 	bl	80019c8 <clocks_setup>

#if RELEASE
    // security check: should we be in protected mode? Was there some UV-C bitrot perhaps?
    if(!check_all_ones(rom_secrets->bag_number, sizeof(rom_secrets->bag_number))
 800054a:	2120      	movs	r1, #32
 800054c:	4821      	ldr	r0, [pc, #132]	; (80005d4 <system_startup+0x90>)
 800054e:	f001 fcd1 	bl	8001ef4 <check_all_ones>
 8000552:	b938      	cbnz	r0, 8000564 <system_startup+0x20>
 8000554:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <system_startup+0x94>)
 8000556:	6a1b      	ldr	r3, [r3, #32]
            && !flash_is_security_level2()
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2bcc      	cmp	r3, #204	; 0xcc
 800055c:	d002      	beq.n	8000564 <system_startup+0x20>
    ) {
        // yikes. recovery: do lockdown... we should be/(thought we were) locked already
        flash_lockdown_hard(OB_RDP_LEVEL_2);
 800055e:	20cc      	movs	r0, #204	; 0xcc
 8000560:	f001 fc80 	bl	8001e64 <flash_lockdown_hard>
    }
#endif

    // workaround to get into DFU from micropython
    // LATER: none of this is useful with RDP=2
    if(memcmp(dfu_flag->magic, REBOOT_TO_DFU, sizeof(dfu_flag->magic)) == 0) {
 8000564:	4c1d      	ldr	r4, [pc, #116]	; (80005dc <system_startup+0x98>)
 8000566:	491e      	ldr	r1, [pc, #120]	; (80005e0 <system_startup+0x9c>)
 8000568:	2208      	movs	r2, #8
 800056a:	4620      	mov	r0, r4
 800056c:	f006 f81e 	bl	80065ac <memcmp>
 8000570:	b938      	cbnz	r0, 8000582 <system_startup+0x3e>
        dfu_flag->magic[0] = 0;
 8000572:	7020      	strb	r0, [r4, #0]

        // still see a flash here, but that's proof it works.
        oled_setup();
 8000574:	f000 fb0e 	bl	8000b94 <oled_setup>
        oled_show(dfu_flag->screen);
 8000578:	68a0      	ldr	r0, [r4, #8]
 800057a:	f000 fb97 	bl	8000cac <oled_show>

        enter_dfu();
 800057e:	f7ff ff81 	bl	8000484 <enter_dfu>
        // NOT-REACHED
    }

    // clear and setup OLED display
    oled_setup();
 8000582:	f000 fb07 	bl	8000b94 <oled_setup>
    oled_show_progress(screen_verify, 0);
 8000586:	2100      	movs	r1, #0
 8000588:	4816      	ldr	r0, [pc, #88]	; (80005e4 <system_startup+0xa0>)
 800058a:	f000 fbcf 	bl	8000d2c <oled_show_progress>

    // won't always need it, but enable RNG anyway
    rng_setup();
 800058e:	f001 fced 	bl	8001f6c <rng_setup>

    // wipe all of SRAM (except our own memory, which was already wiped)
    wipe_all_sram();
 8000592:	f7ff ff05 	bl	80003a0 <wipe_all_sram>

    // config pins
    gpio_setup();
 8000596:	f002 fdab 	bl	80030f0 <gpio_setup>
    ae_setup();
 800059a:	f001 fe59 	bl	8002250 <ae_setup>
    ae_set_gpio(0);         // not checking return on purpose
 800059e:	2000      	movs	r0, #0
 80005a0:	f002 fb74 	bl	8002c8c <ae_set_gpio>

    // protect our flash, and/or check it's protected 
    // - and pick pairing secret if we don't already have one
    // - may also do one-time setup of 508a
    // - note: ae_setup must already be called, since it can talk to that
    flash_setup();
 80005a4:	f001 fbea 	bl	8001d7c <flash_setup>

    // escape into DFU
    if(dfu_button_pressed()) dfu_by_request();
 80005a8:	f002 fdd6 	bl	8003158 <dfu_button_pressed>
 80005ac:	b108      	cbz	r0, 80005b2 <system_startup+0x6e>
 80005ae:	f7ff ffb9 	bl	8000524 <dfu_by_request>

    // maybe upgrade to a firmware image found in sflash
    sf_firmware_upgrade();
 80005b2:	f003 fd55 	bl	8004060 <sf_firmware_upgrade>

    // SLOW part: check firmware is legit; else enter DFU
    // - may die due to downgrade attack or unsigned/badly signed image
    verify_firmware();
 80005b6:	f001 f9cb 	bl	8001950 <verify_firmware>

    // .. for slow people, check again; last chance
    if(dfu_button_pressed()) dfu_by_request();
 80005ba:	f002 fdcd 	bl	8003158 <dfu_button_pressed>
 80005be:	b108      	cbz	r0, 80005c4 <system_startup+0x80>
 80005c0:	f7ff ffb0 	bl	8000524 <dfu_by_request>

    // track reboots, capture firmware hdr used
    // - must be near end of boot process, ie: here.
    reboot_seed_setup();
 80005c4:	f7ff ff0e 	bl	80003e4 <reboot_seed_setup>

    // load a blank screen, so that if the firmware crashes, we are showing
    // something reasonable and not misleading.
    oled_show(screen_blankish);
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <system_startup+0xa4>)
}
 80005ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // - must be near end of boot process, ie: here.
    reboot_seed_setup();

    // load a blank screen, so that if the firmware crashes, we are showing
    // something reasonable and not misleading.
    oled_show(screen_blankish);
 80005ce:	f000 bb6d 	b.w	8000cac <oled_show>
 80005d2:	bf00      	nop
 80005d4:	08007850 	.word	0x08007850
 80005d8:	40022000 	.word	0x40022000
 80005dc:	20008000 	.word	0x20008000
 80005e0:	0800668d 	.word	0x0800668d
 80005e4:	080067e4 	.word	0x080067e4
 80005e8:	0800697f 	.word	0x0800697f

080005ec <firewall_dispatch>:
//
    __attribute__ ((used))
    int
firewall_dispatch(int method_num, uint8_t *buf_io, int len_in,
                        uint32_t arg2, uint32_t incoming_sp, uint32_t incoming_lr)
{
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	b0a8      	sub	sp, #160	; 0xa0
 80005f0:	4616      	mov	r6, r2
 80005f2:	9301      	str	r3, [sp, #4]
    __disable_irq();
#endif

    // "1=any code executed outside the protected segment will close the Firewall"
    // "0=.. will reset the processor"
    __HAL_FIREWALL_PREARM_DISABLE();
 80005f4:	4baf      	ldr	r3, [pc, #700]	; (80008b4 <firewall_dispatch+0x2c8>)
 80005f6:	6a1a      	ldr	r2, [r3, #32]
 80005f8:	f022 0201 	bic.w	r2, r2, #1
//
    __attribute__ ((used))
    int
firewall_dispatch(int method_num, uint8_t *buf_io, int len_in,
                        uint32_t arg2, uint32_t incoming_sp, uint32_t incoming_lr)
{
 80005fc:	460d      	mov	r5, r1
 80005fe:	992d      	ldr	r1, [sp, #180]	; 0xb4
    __disable_irq();
#endif

    // "1=any code executed outside the protected segment will close the Firewall"
    // "0=.. will reset the processor"
    __HAL_FIREWALL_PREARM_DISABLE();
 8000600:	621a      	str	r2, [r3, #32]
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	9303      	str	r3, [sp, #12]
    //   using read/write in place.
    // - use arg2 use when a simple number is needed; never a pointer!
    // - mpy may provide a pointer to flash if we give it a qstr or small value, and if
    //   we're reading only, that's fine.

    if(len_in > 1024) {     // arbitrary max, increase as needed
 800060a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    __disable_irq();
#endif

    // "1=any code executed outside the protected segment will close the Firewall"
    // "0=.. will reset the processor"
    __HAL_FIREWALL_PREARM_DISABLE();
 800060e:	9b03      	ldr	r3, [sp, #12]
    //   using read/write in place.
    // - use arg2 use when a simple number is needed; never a pointer!
    // - mpy may provide a pointer to flash if we give it a qstr or small value, and if
    //   we're reading only, that's fine.

    if(len_in > 1024) {     // arbitrary max, increase as needed
 8000610:	f300 8201 	bgt.w	8000a16 <firewall_dispatch+0x42a>

    // Use these macros
#define REQUIRE_IN_ONLY(x)   if((rv = good_addr(buf_io, (x), len_in, true))) { goto fail; }
#define REQUIRE_OUT(x)       if((rv = good_addr(buf_io, (x), len_in, false))) { goto fail; }

    switch(method_num) {
 8000614:	3001      	adds	r0, #1
 8000616:	2816      	cmp	r0, #22
 8000618:	f200 81ff 	bhi.w	8000a1a <firewall_dispatch+0x42e>
 800061c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000620:	001701ec 	.word	0x001701ec
 8000624:	004e002f 	.word	0x004e002f
 8000628:	008e007b 	.word	0x008e007b
 800062c:	01f700af 	.word	0x01f700af
 8000630:	01fd01fd 	.word	0x01fd01fd
 8000634:	01fd01fd 	.word	0x01fd01fd
 8000638:	00b701fd 	.word	0x00b701fd
 800063c:	01fd01fd 	.word	0x01fd01fd
 8000640:	00e200c7 	.word	0x00e200c7
 8000644:	010a00f6 	.word	0x010a00f6
 8000648:	0186013b 	.word	0x0186013b
 800064c:	0198      	.short	0x0198
        case 0: {
            REQUIRE_OUT(64);
 800064e:	2300      	movs	r3, #0
 8000650:	4632      	mov	r2, r6
 8000652:	2140      	movs	r1, #64	; 0x40
 8000654:	4628      	mov	r0, r5
 8000656:	f7ff fe87 	bl	8000368 <good_addr>
 800065a:	4604      	mov	r4, r0
 800065c:	2800      	cmp	r0, #0
 800065e:	f040 81df 	bne.w	8000a20 <firewall_dispatch+0x434>

            // Return my version string
            memset(buf_io, 0, len_in);
 8000662:	4632      	mov	r2, r6
 8000664:	4601      	mov	r1, r0
 8000666:	4628      	mov	r0, r5
 8000668:	f005 ffd5 	bl	8006616 <memset>
            strlcpy((char *)buf_io, version_string, len_in);
 800066c:	4632      	mov	r2, r6
 800066e:	4992      	ldr	r1, [pc, #584]	; (80008b8 <firewall_dispatch+0x2cc>)
 8000670:	4628      	mov	r0, r5
 8000672:	f005 ffd8 	bl	8006626 <strlcpy>

            rv = strlen(version_string);
 8000676:	4890      	ldr	r0, [pc, #576]	; (80008b8 <firewall_dispatch+0x2cc>)
 8000678:	f005 ffea 	bl	8006650 <strlen>
 800067c:	e06b      	b.n	8000756 <firewall_dispatch+0x16a>
        }

        case 1: {
            // Perform SHA256 over ourselves, with 32-bits of salt, to imply we 
            // haven't stored valid responses.
            REQUIRE_OUT(32);
 800067e:	2300      	movs	r3, #0
 8000680:	4632      	mov	r2, r6
 8000682:	2120      	movs	r1, #32
 8000684:	4628      	mov	r0, r5
 8000686:	f7ff fe6f 	bl	8000368 <good_addr>
 800068a:	4604      	mov	r4, r0
 800068c:	2800      	cmp	r0, #0
 800068e:	f040 81c7 	bne.w	8000a20 <firewall_dispatch+0x434>

            SHA256_CTX  ctx;
            sha256_init(&ctx);
 8000692:	a80c      	add	r0, sp, #48	; 0x30
 8000694:	f005 f870 	bl	8005778 <sha256_init>
            sha256_update(&ctx, (void *)&arg2, 4);
 8000698:	2204      	movs	r2, #4
 800069a:	eb0d 0102 	add.w	r1, sp, r2
 800069e:	a80c      	add	r0, sp, #48	; 0x30
 80006a0:	f005 f894 	bl	80057cc <sha256_update>
            sha256_update(&ctx, (void *)BL_FLASH_BASE, BL_FLASH_SIZE);
 80006a4:	a80c      	add	r0, sp, #48	; 0x30
 80006a6:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 80006aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80006ae:	f005 f88d 	bl	80057cc <sha256_update>
            sha256_final(&ctx, buf_io);
 80006b2:	4629      	mov	r1, r5
 80006b4:	a80c      	add	r0, sp, #48	; 0x30
 80006b6:	f005 f8a7 	bl	8005808 <sha256_final>
 80006ba:	e1b1      	b.n	8000a20 <firewall_dispatch+0x434>
 80006bc:	4b7f      	ldr	r3, [pc, #508]	; (80008bc <firewall_dispatch+0x2d0>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f1a3 02cc 	sub.w	r2, r3, #204	; 0xcc
 80006c6:	4255      	negs	r5, r2
 80006c8:	4155      	adcs	r5, r2
            bool secure = flash_is_security_level2();

            // Go into DFU mode. It's a one-way trip.
            // Also used to show some "fatal" screens w/ memory wipe.

            switch(arg2) {
 80006ca:	9a01      	ldr	r2, [sp, #4]
 80006cc:	2a02      	cmp	r2, #2
 80006ce:	d004      	beq.n	80006da <firewall_dispatch+0xee>
 80006d0:	2a03      	cmp	r2, #3
 80006d2:	d00a      	beq.n	80006ea <firewall_dispatch+0xfe>
 80006d4:	2a01      	cmp	r2, #1
 80006d6:	d102      	bne.n	80006de <firewall_dispatch+0xf2>
 80006d8:	e00a      	b.n	80006f0 <firewall_dispatch+0x104>
                case 1:
                    // in case some way for Micropython to detect it.
                    scr = screen_downgrade;
                    break;
                case 2:
                    scr = screen_blankish;
 80006da:	4c79      	ldr	r4, [pc, #484]	; (80008c0 <firewall_dispatch+0x2d4>)
 80006dc:	e009      	b.n	80006f2 <firewall_dispatch+0x106>

            switch(arg2) {
                default:
                case 0:
                    // enter DFU for firmware upgrades
                    if(secure) {
 80006de:	2bcc      	cmp	r3, #204	; 0xcc
 80006e0:	f000 8197 	beq.w	8000a12 <firewall_dispatch+0x426>
            break;
        }

        case 2: {
            const uint8_t   *scr;
            bool secure = flash_is_security_level2();
 80006e4:	2500      	movs	r5, #0
                    if(secure) {
                        // we cannot support DFU in secure mode anymore
                        rv = EPERM;
                        goto fail;
                    }
                    scr = screen_dfu;
 80006e6:	4c77      	ldr	r4, [pc, #476]	; (80008c4 <firewall_dispatch+0x2d8>)
 80006e8:	e003      	b.n	80006f2 <firewall_dispatch+0x106>
                case 2:
                    scr = screen_blankish;
                    break;
                case 3:
                    scr = screen_brick;
                    secure = true;      // no point going into DFU, if even possible
 80006ea:	2501      	movs	r5, #1
                    break;
                case 2:
                    scr = screen_blankish;
                    break;
                case 3:
                    scr = screen_brick;
 80006ec:	4c76      	ldr	r4, [pc, #472]	; (80008c8 <firewall_dispatch+0x2dc>)
                    secure = true;      // no point going into DFU, if even possible
                    break;
 80006ee:	e000      	b.n	80006f2 <firewall_dispatch+0x106>
                    }
                    scr = screen_dfu;
                    break;
                case 1:
                    // in case some way for Micropython to detect it.
                    scr = screen_downgrade;
 80006f0:	4c76      	ldr	r4, [pc, #472]	; (80008cc <firewall_dispatch+0x2e0>)
                    scr = screen_brick;
                    secure = true;      // no point going into DFU, if even possible
                    break;
            }

            oled_setup();
 80006f2:	f000 fa4f 	bl	8000b94 <oled_setup>
            oled_show(scr);
 80006f6:	4620      	mov	r0, r4
 80006f8:	f000 fad8 	bl	8000cac <oled_show>

            wipe_all_sram();
 80006fc:	f7ff fe50 	bl	80003a0 <wipe_all_sram>

            if(secure) {
 8000700:	b10d      	cbz	r5, 8000706 <firewall_dispatch+0x11a>
 8000702:	bf30      	wfi
 8000704:	e7fd      	b.n	8000702 <firewall_dispatch+0x116>
            } else {
                // Cannot just call enter_dfu() because it doesn't work well
                // once Micropython has configured so much stuff in the chip.

                // Leave a reminder to ourselves
                memcpy(dfu_flag->magic, REBOOT_TO_DFU, sizeof(dfu_flag->magic));
 8000706:	4972      	ldr	r1, [pc, #456]	; (80008d0 <firewall_dispatch+0x2e4>)
 8000708:	4a72      	ldr	r2, [pc, #456]	; (80008d4 <firewall_dispatch+0x2e8>)
 800070a:	6808      	ldr	r0, [r1, #0]
 800070c:	6849      	ldr	r1, [r1, #4]
 800070e:	4613      	mov	r3, r2
 8000710:	c303      	stmia	r3!, {r0, r1}
                dfu_flag->screen = scr;
 8000712:	6094      	str	r4, [r2, #8]
 8000714:	e00e      	b.n	8000734 <firewall_dispatch+0x148>
            break;
        }

        case 3:
            // logout: wipe all of memory and lock up. Must powercycle to recover.
            switch(arg2) { 
 8000716:	9b01      	ldr	r3, [sp, #4]
 8000718:	b10b      	cbz	r3, 800071e <firewall_dispatch+0x132>
 800071a:	2b02      	cmp	r3, #2
 800071c:	d102      	bne.n	8000724 <firewall_dispatch+0x138>
                case 0:
                case 2:
                    oled_show(screen_logout);
 800071e:	486e      	ldr	r0, [pc, #440]	; (80008d8 <firewall_dispatch+0x2ec>)
 8000720:	f000 fac4 	bl	8000cac <oled_show>
                case 1:
                    // leave screen untouched
                    break;
            }

            wipe_all_sram();
 8000724:	f7ff fe3c 	bl	80003a0 <wipe_all_sram>

            if(arg2 == 2) {
 8000728:	9b01      	ldr	r3, [sp, #4]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d104      	bne.n	8000738 <firewall_dispatch+0x14c>
                // need some time to show OLED contents
                delay_ms(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f002 fcb2 	bl	8003098 <delay_ms>

                // reboot so we can "login" again
                NVIC_SystemReset();
 8000734:	f7ff fe06 	bl	8000344 <NVIC_SystemReset>
 8000738:	bf30      	wfi
 800073a:	e7fd      	b.n	8000738 <firewall_dispatch+0x14c>
            LOCKUP_FOREVER()
            break;

        case 4:
            // attempt to control the GPIO (won't work for 1)
            ae_setup();
 800073c:	f001 fd88 	bl	8002250 <ae_setup>
            ae_keep_alive();
 8000740:	f001 fdba 	bl	80022b8 <ae_keep_alive>
            switch(arg2) {
 8000744:	9b01      	ldr	r3, [sp, #4]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d009      	beq.n	800075e <firewall_dispatch+0x172>
 800074a:	2b03      	cmp	r3, #3
 800074c:	d00b      	beq.n	8000766 <firewall_dispatch+0x17a>
 800074e:	2b01      	cmp	r3, #1
 8000750:	d003      	beq.n	800075a <firewall_dispatch+0x16e>
                default:
                case 0:     // read state
                    rv = ae_get_gpio();
 8000752:	f002 faca 	bl	8002cea <ae_get_gpio>
 8000756:	4604      	mov	r4, r0
                    break;
 8000758:	e162      	b.n	8000a20 <firewall_dispatch+0x434>
                case 1:     // clear it (can work anytime)
                    rv = ae_set_gpio(0);
 800075a:	2000      	movs	r0, #0
 800075c:	e000      	b.n	8000760 <firewall_dispatch+0x174>
                    break;
                case 2:     // set it (will always fail)
                    rv = ae_set_gpio(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f002 fa94 	bl	8002c8c <ae_set_gpio>
 8000764:	e7f7      	b.n	8000756 <firewall_dispatch+0x16a>

                case 3: {     // do a verify and see if it maybe goes green
                    uint8_t fw_digest[32], world_digest[32];

                    // takes time, shows progress bar
                    checksum_flash(fw_digest, world_digest);
 8000766:	a90c      	add	r1, sp, #48	; 0x30
 8000768:	a804      	add	r0, sp, #16
 800076a:	f000 ffe5 	bl	8001738 <checksum_flash>

                    rv = ae_set_gpio_secure(world_digest);
 800076e:	a80c      	add	r0, sp, #48	; 0x30
 8000770:	f002 faa3 	bl	8002cba <ae_set_gpio_secure>
 8000774:	4604      	mov	r4, r0

                    oled_show(screen_blankish);
 8000776:	4852      	ldr	r0, [pc, #328]	; (80008c0 <firewall_dispatch+0x2d4>)
 8000778:	f000 fa98 	bl	8000cac <oled_show>
 800077c:	e150      	b.n	8000a20 <firewall_dispatch+0x434>
        case 5:     
            // Are we a brick?
            // if the pairing secret doesn't work anymore, that
            // means we've been bricked.
            // TODO: also report hardware issue, and non-configured states
            ae_setup();
 800077e:	f001 fd67 	bl	8002250 <ae_setup>
            rv = (ae_pair_unlock() != 0);
 8000782:	f001 ff4b 	bl	800261c <ae_pair_unlock>
 8000786:	1c04      	adds	r4, r0, #0
 8000788:	bf18      	it	ne
 800078a:	2401      	movne	r4, #1
            break;
 800078c:	e148      	b.n	8000a20 <firewall_dispatch+0x434>
            #endif
            break;

        case 12:
            // read the DFU button (used for selftest at least)
            REQUIRE_OUT(1);
 800078e:	2300      	movs	r3, #0
 8000790:	4632      	mov	r2, r6
 8000792:	2101      	movs	r1, #1
 8000794:	4628      	mov	r0, r5
 8000796:	f7ff fde7 	bl	8000368 <good_addr>
 800079a:	4604      	mov	r4, r0
 800079c:	2800      	cmp	r0, #0
 800079e:	f040 813f 	bne.w	8000a20 <firewall_dispatch+0x434>
            gpio_setup();
 80007a2:	f002 fca5 	bl	80030f0 <gpio_setup>
            buf_io[0] = dfu_button_pressed();
 80007a6:	f002 fcd7 	bl	8003158 <dfu_button_pressed>
 80007aa:	7028      	strb	r0, [r5, #0]
            break;
 80007ac:	e138      	b.n	8000a20 <firewall_dispatch+0x434>

        case 15: {
            // Read a dataslot directly. Will fail on 
            // encrypted slots.
            if(len_in != 4 && len_in != 32 && len_in != 72) {
 80007ae:	2e04      	cmp	r6, #4
 80007b0:	d004      	beq.n	80007bc <firewall_dispatch+0x1d0>
 80007b2:	2e20      	cmp	r6, #32
 80007b4:	d002      	beq.n	80007bc <firewall_dispatch+0x1d0>
 80007b6:	2e48      	cmp	r6, #72	; 0x48
 80007b8:	f040 812d 	bne.w	8000a16 <firewall_dispatch+0x42a>
                rv = ERANGE;
            } else {
                REQUIRE_OUT(4);
 80007bc:	2300      	movs	r3, #0
 80007be:	4632      	mov	r2, r6
 80007c0:	2104      	movs	r1, #4
 80007c2:	4628      	mov	r0, r5
 80007c4:	f7ff fdd0 	bl	8000368 <good_addr>
 80007c8:	4604      	mov	r4, r0
 80007ca:	2800      	cmp	r0, #0
 80007cc:	f040 8128 	bne.w	8000a20 <firewall_dispatch+0x434>

                ae_setup();
 80007d0:	f001 fd3e 	bl	8002250 <ae_setup>
                if(ae_read_data_slot(arg2 & 0xf, buf_io, len_in)) {
 80007d4:	9801      	ldr	r0, [sp, #4]
 80007d6:	4632      	mov	r2, r6
 80007d8:	4629      	mov	r1, r5
 80007da:	f000 000f 	and.w	r0, r0, #15
 80007de:	f002 fa13 	bl	8002c08 <ae_read_data_slot>
 80007e2:	e0b1      	b.n	8000948 <firewall_dispatch+0x35c>
            break;
        }

        case 16: {
            // Provide the 2 words for anti-phishing.
            REQUIRE_OUT(MAX_PIN_LEN);
 80007e4:	2300      	movs	r3, #0
 80007e6:	4632      	mov	r2, r6
 80007e8:	2120      	movs	r1, #32
 80007ea:	4628      	mov	r0, r5
 80007ec:	f7ff fdbc 	bl	8000368 <good_addr>
 80007f0:	4604      	mov	r4, r0
 80007f2:	2800      	cmp	r0, #0
 80007f4:	f040 8114 	bne.w	8000a20 <firewall_dispatch+0x434>

            // arg2: length of pin.
            if((arg2 < 1) || (arg2 > MAX_PIN_LEN)) {
 80007f8:	9901      	ldr	r1, [sp, #4]
 80007fa:	1e4b      	subs	r3, r1, #1
 80007fc:	2b1f      	cmp	r3, #31
 80007fe:	f200 810a 	bhi.w	8000a16 <firewall_dispatch+0x42a>
                rv = ERANGE;
            } else {
                if(pin_prefix_words((char *)buf_io, arg2, (uint32_t *)buf_io)) {
 8000802:	462a      	mov	r2, r5
 8000804:	4628      	mov	r0, r5
 8000806:	f002 ff43 	bl	8003690 <pin_prefix_words>
 800080a:	e09d      	b.n	8000948 <firewall_dispatch+0x35c>
            break;
        }

        case 17:
            // test rng
            REQUIRE_OUT(32);
 800080c:	2300      	movs	r3, #0
 800080e:	4632      	mov	r2, r6
 8000810:	2120      	movs	r1, #32
 8000812:	4628      	mov	r0, r5
 8000814:	f7ff fda8 	bl	8000368 <good_addr>
 8000818:	4604      	mov	r4, r0
 800081a:	2800      	cmp	r0, #0
 800081c:	f040 8100 	bne.w	8000a20 <firewall_dispatch+0x434>
            memset(buf_io, 0x55, 32);       // to help show errors
 8000820:	2220      	movs	r2, #32
 8000822:	2155      	movs	r1, #85	; 0x55
 8000824:	4628      	mov	r0, r5
 8000826:	f005 fef6 	bl	8006616 <memset>
            rng_buffer(buf_io, 32);
 800082a:	2120      	movs	r1, #32
 800082c:	4628      	mov	r0, r5
 800082e:	f001 fbc9 	bl	8001fc4 <rng_buffer>
            break;
 8000832:	e0f5      	b.n	8000a20 <firewall_dispatch+0x434>

        case 18: {
            // Try login w/ PIN.
            REQUIRE_OUT(PIN_ATTEMPT_SIZE_V2);
 8000834:	2300      	movs	r3, #0
 8000836:	4632      	mov	r2, r6
 8000838:	f44f 718c 	mov.w	r1, #280	; 0x118
 800083c:	4628      	mov	r0, r5
 800083e:	f7ff fd93 	bl	8000368 <good_addr>
 8000842:	4604      	mov	r4, r0
 8000844:	2800      	cmp	r0, #0
 8000846:	f040 80eb 	bne.w	8000a20 <firewall_dispatch+0x434>
            pinAttempt_t *args = (pinAttempt_t *)buf_io;

            switch(arg2) {
 800084a:	9b01      	ldr	r3, [sp, #4]
 800084c:	2b06      	cmp	r3, #6
 800084e:	f200 80e4 	bhi.w	8000a1a <firewall_dispatch+0x42e>
 8000852:	e8df f003 	tbb	[pc, r3]
 8000856:	0804      	.short	0x0804
 8000858:	1814100c 	.word	0x1814100c
 800085c:	1c          	.byte	0x1c
 800085d:	00          	.byte	0x00
                case 0:
                    rv = pin_setup_attempt(args);
 800085e:	4628      	mov	r0, r5
 8000860:	f002 ff34 	bl	80036cc <pin_setup_attempt>
 8000864:	e777      	b.n	8000756 <firewall_dispatch+0x16a>
                    break;
                case 1:
                    rv = pin_delay(args);
 8000866:	4628      	mov	r0, r5
 8000868:	f002 ff98 	bl	800379c <pin_delay>
 800086c:	e773      	b.n	8000756 <firewall_dispatch+0x16a>
                    break;
                case 2:
                    rv = pin_login_attempt(args);
 800086e:	4628      	mov	r0, r5
 8000870:	f002 ff96 	bl	80037a0 <pin_login_attempt>
 8000874:	e76f      	b.n	8000756 <firewall_dispatch+0x16a>
                    break;
                case 3:
                    rv = pin_change(args);
 8000876:	4628      	mov	r0, r5
 8000878:	f003 f84c 	bl	8003914 <pin_change>
 800087c:	e76b      	b.n	8000756 <firewall_dispatch+0x16a>
                    break;
                case 4:
                    rv = pin_fetch_secret(args);
 800087e:	4628      	mov	r0, r5
 8000880:	f003 f962 	bl	8003b48 <pin_fetch_secret>
 8000884:	e767      	b.n	8000756 <firewall_dispatch+0x16a>
                    break;

                case 5:
                    rv = pin_firmware_greenlight(args);
 8000886:	4628      	mov	r0, r5
 8000888:	f003 fa2c 	bl	8003ce4 <pin_firmware_greenlight>
 800088c:	e763      	b.n	8000756 <firewall_dispatch+0x16a>
                    break;

                case 6:         // new for v2
                    rv = pin_long_secret(args);
 800088e:	4628      	mov	r0, r5
 8000890:	f003 f9b6 	bl	8003c00 <pin_long_secret>
 8000894:	e75f      	b.n	8000756 <firewall_dispatch+0x16a>
            break;
        }


        case 19: {   // bag number stuff
            switch(arg2) {
 8000896:	9b01      	ldr	r3, [sp, #4]
 8000898:	2b64      	cmp	r3, #100	; 0x64
 800089a:	d041      	beq.n	8000920 <firewall_dispatch+0x334>
 800089c:	d803      	bhi.n	80008a6 <firewall_dispatch+0x2ba>
 800089e:	b1eb      	cbz	r3, 80008dc <firewall_dispatch+0x2f0>
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d030      	beq.n	8000906 <firewall_dispatch+0x31a>
 80008a4:	e0b9      	b.n	8000a1a <firewall_dispatch+0x42e>
 80008a6:	2b65      	cmp	r3, #101	; 0x65
 80008a8:	d03c      	beq.n	8000924 <firewall_dispatch+0x338>
 80008aa:	2b66      	cmp	r3, #102	; 0x66
 80008ac:	f040 80b5 	bne.w	8000a1a <firewall_dispatch+0x42e>
                case 101:
                    flash_lockdown_hard(OB_RDP_LEVEL_1);        // Can only do 0->1 (experiments)
                    break;
                case 102:
                    // production units will be:
                    flash_lockdown_hard(OB_RDP_LEVEL_2);        // No change possible after this.
 80008b0:	20cc      	movs	r0, #204	; 0xcc
 80008b2:	e038      	b.n	8000926 <firewall_dispatch+0x33a>
 80008b4:	40011c00 	.word	0x40011c00
 80008b8:	08006f70 	.word	0x08006f70
 80008bc:	40022000 	.word	0x40022000
 80008c0:	0800697f 	.word	0x0800697f
 80008c4:	080069ac 	.word	0x080069ac
 80008c8:	08006a44 	.word	0x08006a44
 80008cc:	08006c24 	.word	0x08006c24
 80008d0:	0800668d 	.word	0x0800668d
 80008d4:	20008000 	.word	0x20008000
 80008d8:	08006726 	.word	0x08006726

        case 19: {   // bag number stuff
            switch(arg2) {
                case 0:
                    // read out number
                    REQUIRE_OUT(32);
 80008dc:	4632      	mov	r2, r6
 80008de:	2120      	movs	r1, #32
 80008e0:	4628      	mov	r0, r5
 80008e2:	f7ff fd41 	bl	8000368 <good_addr>
 80008e6:	4604      	mov	r4, r0
 80008e8:	2800      	cmp	r0, #0
 80008ea:	f040 8099 	bne.w	8000a20 <firewall_dispatch+0x434>
                    memcpy(buf_io, rom_secrets->bag_number, 32);
 80008ee:	4a65      	ldr	r2, [pc, #404]	; (8000a84 <firewall_dispatch+0x498>)
 80008f0:	4e65      	ldr	r6, [pc, #404]	; (8000a88 <firewall_dispatch+0x49c>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	cb03      	ldmia	r3!, {r0, r1}
 80008f6:	42b3      	cmp	r3, r6
 80008f8:	6028      	str	r0, [r5, #0]
 80008fa:	6069      	str	r1, [r5, #4]
 80008fc:	461a      	mov	r2, r3
 80008fe:	f105 0508 	add.w	r5, r5, #8
 8000902:	d1f6      	bne.n	80008f2 <firewall_dispatch+0x306>
 8000904:	e08c      	b.n	8000a20 <firewall_dispatch+0x434>
                    break;

                case 1:
                    // set the bag number, and (should) do lock down
                    REQUIRE_IN_ONLY(32);
 8000906:	4632      	mov	r2, r6
 8000908:	2120      	movs	r1, #32
 800090a:	4628      	mov	r0, r5
 800090c:	f7ff fd2c 	bl	8000368 <good_addr>
 8000910:	4604      	mov	r4, r0
 8000912:	2800      	cmp	r0, #0
 8000914:	f040 8084 	bne.w	8000a20 <firewall_dispatch+0x434>

                    flash_save_bag_number(buf_io);
 8000918:	4628      	mov	r0, r5
 800091a:	f001 fa0f 	bl	8001d3c <flash_save_bag_number>
                    break;
 800091e:	e07f      	b.n	8000a20 <firewall_dispatch+0x434>

                case 100:
                    flash_lockdown_hard(OB_RDP_LEVEL_0);        // wipes contents of flash (1->0)
 8000920:	20aa      	movs	r0, #170	; 0xaa
 8000922:	e000      	b.n	8000926 <firewall_dispatch+0x33a>
                    break;
                case 101:
                    flash_lockdown_hard(OB_RDP_LEVEL_1);        // Can only do 0->1 (experiments)
 8000924:	20bb      	movs	r0, #187	; 0xbb
 8000926:	f001 fa9d 	bl	8001e64 <flash_lockdown_hard>
 800092a:	e070      	b.n	8000a0e <firewall_dispatch+0x422>
            break;
        }
            
        case 20:
            // Read out entire config dataspace
            REQUIRE_OUT(128);
 800092c:	2300      	movs	r3, #0
 800092e:	4632      	mov	r2, r6
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	4628      	mov	r0, r5
 8000934:	f7ff fd18 	bl	8000368 <good_addr>
 8000938:	4604      	mov	r4, r0
 800093a:	2800      	cmp	r0, #0
 800093c:	d170      	bne.n	8000a20 <firewall_dispatch+0x434>

            ae_setup();
 800093e:	f001 fc87 	bl	8002250 <ae_setup>
            rv = ae_config_read(buf_io);
 8000942:	4628      	mov	r0, r5
 8000944:	f002 fa25 	bl	8002d92 <ae_config_read>
            if(rv) {
 8000948:	2800      	cmp	r0, #0
 800094a:	d060      	beq.n	8000a0e <firewall_dispatch+0x422>
                rv = EIO;
 800094c:	2405      	movs	r4, #5
 800094e:	e067      	b.n	8000a20 <firewall_dispatch+0x434>
            } 
            break;

        case 21:
            // read OTP / downgrade protection
            switch(arg2) {
 8000950:	9b01      	ldr	r3, [sp, #4]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d861      	bhi.n	8000a1a <firewall_dispatch+0x42e>
 8000956:	e8df f003 	tbb	[pc, r3]
 800095a:	0f02      	.short	0x0f02
 800095c:	401d      	.short	0x401d
                case 0:
                    REQUIRE_OUT(8);
 800095e:	2300      	movs	r3, #0
 8000960:	4632      	mov	r2, r6
 8000962:	2108      	movs	r1, #8
 8000964:	4628      	mov	r0, r5
 8000966:	f7ff fcff 	bl	8000368 <good_addr>
 800096a:	4604      	mov	r4, r0
 800096c:	2800      	cmp	r0, #0
 800096e:	d157      	bne.n	8000a20 <firewall_dispatch+0x434>
                    get_min_version(buf_io);
 8000970:	4628      	mov	r0, r5
 8000972:	f000 ff75 	bl	8001860 <get_min_version>
                    break;
 8000976:	e053      	b.n	8000a20 <firewall_dispatch+0x434>

                case 1:
                    REQUIRE_IN_ONLY(8);
 8000978:	2301      	movs	r3, #1
 800097a:	4632      	mov	r2, r6
 800097c:	2108      	movs	r1, #8
 800097e:	4628      	mov	r0, r5
 8000980:	f7ff fcf2 	bl	8000368 <good_addr>
 8000984:	4604      	mov	r4, r0
 8000986:	2800      	cmp	r0, #0
 8000988:	d14a      	bne.n	8000a20 <firewall_dispatch+0x434>
                    rv = check_is_downgrade(buf_io, NULL);
 800098a:	4601      	mov	r1, r0
 800098c:	4628      	mov	r0, r5
 800098e:	f000 ff85 	bl	800189c <check_is_downgrade>
 8000992:	e6e0      	b.n	8000756 <firewall_dispatch+0x16a>
                    break;

                case 2:
                    REQUIRE_IN_ONLY(8);
 8000994:	2301      	movs	r3, #1
 8000996:	4632      	mov	r2, r6
 8000998:	2108      	movs	r1, #8
 800099a:	4628      	mov	r0, r5
 800099c:	f7ff fce4 	bl	8000368 <good_addr>
 80009a0:	4604      	mov	r4, r0
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d13c      	bne.n	8000a20 <firewall_dispatch+0x434>

                    if(buf_io[0] < 0x10 || buf_io[0] >= 0x40) {
 80009a6:	782b      	ldrb	r3, [r5, #0]
 80009a8:	3b10      	subs	r3, #16
                        // bad data
                        rv = ERANGE;
 80009aa:	2b2f      	cmp	r3, #47	; 0x2f
                    } if(check_is_downgrade(buf_io, NULL)) {
 80009ac:	4601      	mov	r1, r0
 80009ae:	4628      	mov	r0, r5
                case 2:
                    REQUIRE_IN_ONLY(8);

                    if(buf_io[0] < 0x10 || buf_io[0] >= 0x40) {
                        // bad data
                        rv = ERANGE;
 80009b0:	bf88      	it	hi
 80009b2:	2422      	movhi	r4, #34	; 0x22
                    } if(check_is_downgrade(buf_io, NULL)) {
 80009b4:	f000 ff72 	bl	800189c <check_is_downgrade>
 80009b8:	bb88      	cbnz	r0, 8000a1e <firewall_dispatch+0x432>
                        // already at a higher version?
                        rv = EAGAIN;
                    } else {
                        uint8_t min[8];
                        get_min_version(min);
 80009ba:	a80c      	add	r0, sp, #48	; 0x30
 80009bc:	f000 ff50 	bl	8001860 <get_min_version>

                        if(memcmp(min, buf_io, 8) == 0) {
 80009c0:	2208      	movs	r2, #8
 80009c2:	4629      	mov	r1, r5
 80009c4:	a80c      	add	r0, sp, #48	; 0x30
 80009c6:	f005 fdf1 	bl	80065ac <memcmp>
 80009ca:	b340      	cbz	r0, 8000a1e <firewall_dispatch+0x432>
                            // dupe
                            rv = EAGAIN;
                        } else {
                            // save it, but might be "full" already
                            if(record_highwater_version(buf_io)) {
 80009cc:	4628      	mov	r0, r5
 80009ce:	f001 fa63 	bl	8001e98 <record_highwater_version>
                                rv = ENOMEM;
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf18      	it	ne
 80009d6:	240c      	movne	r4, #12
 80009d8:	e022      	b.n	8000a20 <firewall_dispatch+0x434>
                    }
                    break;

                case 3:
                    // read raw counter0 value (max is 0x1fffff)
                    REQUIRE_OUT(4);
 80009da:	2300      	movs	r3, #0
 80009dc:	4632      	mov	r2, r6
 80009de:	2104      	movs	r1, #4
 80009e0:	4628      	mov	r0, r5
 80009e2:	f7ff fcc1 	bl	8000368 <good_addr>
 80009e6:	4604      	mov	r4, r0
 80009e8:	b9d0      	cbnz	r0, 8000a20 <firewall_dispatch+0x434>
                    ae_setup();
 80009ea:	f001 fc31 	bl	8002250 <ae_setup>
                    rv = ae_get_counter((uint32_t *)buf_io, 0) ? EIO: 0;
 80009ee:	4621      	mov	r1, r4
 80009f0:	4628      	mov	r0, r5
 80009f2:	f001 ffc6 	bl	8002982 <ae_get_counter>
 80009f6:	e7a7      	b.n	8000948 <firewall_dispatch+0x35c>
            break;

        case -1:
            // System startup code. Cannot be reached by any code (that hopes to run
            // again) except our reset stub.
            if(incoming_lr <= BL_FLASH_BASE || incoming_lr >= (uint32_t)&firewall_starts) {
 80009f8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80009fc:	d902      	bls.n	8000a04 <firewall_dispatch+0x418>
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <firewall_dispatch+0x4a0>)
 8000a00:	4299      	cmp	r1, r3
 8000a02:	d302      	bcc.n	8000a0a <firewall_dispatch+0x41e>
                fatal_error("LR");
 8000a04:	4822      	ldr	r0, [pc, #136]	; (8000a90 <firewall_dispatch+0x4a4>)
 8000a06:	f7ff fce3 	bl	80003d0 <fatal_error>
            } else {
                system_startup();
 8000a0a:	f7ff fd9b 	bl	8000544 <system_startup>

        case 6:
            // Do we have a ATECC608a and all that implies?
            // NOTE: this number was unused in V1 bootroms, so return ENOENT
            #if FOR_608
                rv = 0;
 8000a0e:	2400      	movs	r4, #0
 8000a10:	e006      	b.n	8000a20 <firewall_dispatch+0x434>
                default:
                case 0:
                    // enter DFU for firmware upgrades
                    if(secure) {
                        // we cannot support DFU in secure mode anymore
                        rv = EPERM;
 8000a12:	2401      	movs	r4, #1
 8000a14:	e004      	b.n	8000a20 <firewall_dispatch+0x434>
    // - use arg2 use when a simple number is needed; never a pointer!
    // - mpy may provide a pointer to flash if we give it a qstr or small value, and if
    //   we're reading only, that's fine.

    if(len_in > 1024) {     // arbitrary max, increase as needed
        rv = ERANGE;
 8000a16:	2422      	movs	r4, #34	; 0x22
 8000a18:	e002      	b.n	8000a20 <firewall_dispatch+0x434>
                    ae_setup();
                    rv = ae_get_counter((uint32_t *)buf_io, 0) ? EIO: 0;
                    break;

                default:
                    rv = ENOENT;
 8000a1a:	2402      	movs	r4, #2
 8000a1c:	e000      	b.n	8000a20 <firewall_dispatch+0x434>
                    if(buf_io[0] < 0x10 || buf_io[0] >= 0x40) {
                        // bad data
                        rv = ERANGE;
                    } if(check_is_downgrade(buf_io, NULL)) {
                        // already at a higher version?
                        rv = EAGAIN;
 8000a1e:	240b      	movs	r4, #11

fail:

    // Precaution: we don't want to leave ATECC508A authorized for any specific keys,
    // perhaps due to an error path we didn't see. Always reset the chip.
    ae_reset_chip();
 8000a20:	f001 fc08 	bl	8002234 <ae_reset_chip>

    // Unlikely it matters, but clear flash memory cache.
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <firewall_dispatch+0x4a8>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a2c:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a3c:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a44:	601a      	str	r2, [r3, #0]

    // .. and instruction memory (flash cache too?)
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a4c:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a5c:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a64:	601a      	str	r2, [r3, #0]
    

    // authorize return from firewall into user's code
    __HAL_FIREWALL_PREARM_ENABLE();
 8000a66:	f5a3 3382 	sub.w	r3, r3, #66560	; 0x10400

    return rv;
}
 8000a6a:	4620      	mov	r0, r4
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
    

    // authorize return from firewall into user's code
    __HAL_FIREWALL_PREARM_ENABLE();
 8000a6c:	6a1a      	ldr	r2, [r3, #32]
 8000a6e:	f042 0201 	orr.w	r2, r2, #1
 8000a72:	621a      	str	r2, [r3, #32]
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8000a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30

    return rv;
}
 8000a7e:	b028      	add	sp, #160	; 0xa0
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
 8000a82:	bf00      	nop
 8000a84:	08007850 	.word	0x08007850
 8000a88:	08007870 	.word	0x08007870
 8000a8c:	08000300 	.word	0x08000300
 8000a90:	08006696 	.word	0x08006696
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_GetTick>:
const uint32_t MSIRangeTable[12] = {100000, 200000, 400000, 800000, 1000000, 2000000, \
                                  4000000, 8000000, 16000000, 24000000, 32000000, 48000000};
uint32_t SystemCoreClock;

// TODO: cleanup HAL stuff to not use this
uint32_t HAL_GetTick(void) { return 53; }
 8000a98:	2035      	movs	r0, #53	; 0x35
 8000a9a:	4770      	bx	lr

08000a9c <write_bytes>:
//
    static inline void
write_bytes(int len, const uint8_t *buf)
{
    // send via SPI(1)
    HAL_SPI_Transmit(&spi_port, (uint8_t *)buf, len, HAL_MAX_DELAY);
 8000a9c:	b282      	uxth	r2, r0
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa2:	4801      	ldr	r0, [pc, #4]	; (8000aa8 <write_bytes+0xc>)
 8000aa4:	f000 bbed 	b.w	8001282 <HAL_SPI_Transmit>
 8000aa8:	1000625c 	.word	0x1000625c

08000aac <oled_write_cmd>:

// oled_write_cmd()
//
    void
oled_write_cmd(uint8_t cmd)
{
 8000aac:	b513      	push	{r0, r1, r4, lr}
 8000aae:	ac02      	add	r4, sp, #8
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000ab0:	2201      	movs	r2, #1

// oled_write_cmd()
//
    void
oled_write_cmd(uint8_t cmd)
{
 8000ab2:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abc:	f000 fb56 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f000 fb4f 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f000 fb49 	bl	800116c <HAL_GPIO_WritePin>

    write_bytes(1, &cmd);
 8000ada:	4621      	mov	r1, r4
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff ffdd 	bl	8000a9c <write_bytes>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f000 fb3f 	bl	800116c <HAL_GPIO_WritePin>
}
 8000aee:	b002      	add	sp, #8
 8000af0:	bd10      	pop	{r4, pc}

08000af2 <oled_write_cmd_sequence>:

// oled_write_cmd_sequence()
//
    void
oled_write_cmd_sequence(int len, const uint8_t *cmds)
{
 8000af2:	b570      	push	{r4, r5, r6, lr}
 8000af4:	4606      	mov	r6, r0
 8000af6:	460d      	mov	r5, r1
    for(int i=0; i<len; i++) {
 8000af8:	460c      	mov	r4, r1
 8000afa:	1b63      	subs	r3, r4, r5
 8000afc:	429e      	cmp	r6, r3
 8000afe:	dd04      	ble.n	8000b0a <oled_write_cmd_sequence+0x18>
        oled_write_cmd(cmds[i]);
 8000b00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000b04:	f7ff ffd2 	bl	8000aac <oled_write_cmd>
 8000b08:	e7f7      	b.n	8000afa <oled_write_cmd_sequence+0x8>
    }
}
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}

08000b0c <oled_write_data>:

// oled_write_data()
//
    void
oled_write_data(int len, const uint8_t *pixels)
{
 8000b0c:	b538      	push	{r3, r4, r5, lr}
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000b0e:	2201      	movs	r2, #1

// oled_write_data()
//
    void
oled_write_data(int len, const uint8_t *pixels)
{
 8000b10:	4604      	mov	r4, r0
 8000b12:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	2110      	movs	r1, #16
 8000b1a:	f000 fb27 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f000 fb20 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 fb1a 	bl	800116c <HAL_GPIO_WritePin>

    write_bytes(len, pixels);
 8000b38:	4629      	mov	r1, r5
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f7ff ffae 	bl	8000a9c <write_bytes>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8000b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);

    write_bytes(len, pixels);

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000b4c:	f000 bb0e 	b.w	800116c <HAL_GPIO_WritePin>

08000b50 <oled_spi_setup>:
//
// Just setup SPI, do not reset display, etc.
//
    void
oled_spi_setup(void)
{
 8000b50:	b538      	push	{r3, r4, r5, lr}
    // might already be setup
    if(spi_port.Instance == SPI1) return;
 8000b52:	4c0e      	ldr	r4, [pc, #56]	; (8000b8c <oled_spi_setup+0x3c>)
 8000b54:	4d0e      	ldr	r5, [pc, #56]	; (8000b90 <oled_spi_setup+0x40>)
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	d015      	beq.n	8000b88 <oled_spi_setup+0x38>

    memset(&spi_port, 0, sizeof(spi_port));
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	2264      	movs	r2, #100	; 0x64
 8000b60:	2100      	movs	r1, #0
 8000b62:	f005 fd58 	bl	8006616 <memset>

    spi_port.Instance = SPI1;

    // see SPI_InitTypeDef
    spi_port.Init.Mode = SPI_MODE_MASTER;
 8000b66:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b6a:	6063      	str	r3, [r4, #4]
    spi_port.Init.Direction = SPI_DIRECTION_2LINES;
    spi_port.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b70:	60e3      	str	r3, [r4, #12]
    spi_port.Init.CLKPolarity = SPI_POLARITY_LOW;
    spi_port.Init.CLKPhase = SPI_PHASE_1EDGE;
    spi_port.Init.NSS = SPI_NSS_SOFT;
 8000b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b76:	61a3      	str	r3, [r4, #24]
    spi_port.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;    // conservative
 8000b78:	2318      	movs	r3, #24
    // might already be setup
    if(spi_port.Instance == SPI1) return;

    memset(&spi_port, 0, sizeof(spi_port));

    spi_port.Instance = SPI1;
 8000b7a:	6025      	str	r5, [r4, #0]
    spi_port.Init.Direction = SPI_DIRECTION_2LINES;
    spi_port.Init.DataSize = SPI_DATASIZE_8BIT;
    spi_port.Init.CLKPolarity = SPI_POLARITY_LOW;
    spi_port.Init.CLKPhase = SPI_PHASE_1EDGE;
    spi_port.Init.NSS = SPI_NSS_SOFT;
    spi_port.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;    // conservative
 8000b7c:	61e3      	str	r3, [r4, #28]
    spi_port.Init.FirstBit = SPI_FIRSTBIT_MSB;
    spi_port.Init.TIMode = SPI_TIMODE_DISABLED;
    spi_port.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;

    HAL_SPI_Init(&spi_port);
 8000b7e:	4620      	mov	r0, r4
}
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spi_port.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;    // conservative
    spi_port.Init.FirstBit = SPI_FIRSTBIT_MSB;
    spi_port.Init.TIMode = SPI_TIMODE_DISABLED;
    spi_port.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;

    HAL_SPI_Init(&spi_port);
 8000b84:	f000 bb36 	b.w	80011f4 <HAL_SPI_Init>
 8000b88:	bd38      	pop	{r3, r4, r5, pc}
 8000b8a:	bf00      	nop
 8000b8c:	1000625c 	.word	0x1000625c
 8000b90:	40013000 	.word	0x40013000

08000b94 <oled_setup>:
//
// Ok to call this lots.
//
    void
oled_setup(void)
{
 8000b94:	b530      	push	{r4, r5, lr}
    static uint32_t inited;

    if(inited == 0x238a572F) {
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <oled_setup+0xb0>)
 8000b98:	4a2b      	ldr	r2, [pc, #172]	; (8000c48 <oled_setup+0xb4>)
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	4291      	cmp	r1, r2
//
// Ok to call this lots.
//
    void
oled_setup(void)
{
 8000b9e:	b089      	sub	sp, #36	; 0x24
    static uint32_t inited;

    if(inited == 0x238a572F) {
 8000ba0:	d04e      	beq.n	8000c40 <oled_setup+0xac>
        return;
    }
    inited = 0x238a572F;
 8000ba2:	601a      	str	r2, [r3, #0]

    // enable some internal clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <oled_setup+0xb8>)
    __HAL_RCC_SPI1_CLK_ENABLE();

    // simple pins
    GPIO_InitTypeDef setup = {
 8000ba6:	4d2a      	ldr	r5, [pc, #168]	; (8000c50 <oled_setup+0xbc>)
        return;
    }
    inited = 0x238a572F;

    // enable some internal clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000baa:	f042 0201 	orr.w	r2, r2, #1
 8000bae:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb2:	f002 0201 	and.w	r2, r2, #1
 8000bb6:	9201      	str	r2, [sp, #4]
 8000bb8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000bc0:	661a      	str	r2, [r3, #96]	; 0x60
 8000bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc8:	9302      	str	r3, [sp, #8]
 8000bca:	9b02      	ldr	r3, [sp, #8]

    // simple pins
    GPIO_InitTypeDef setup = {
 8000bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bce:	ac03      	add	r4, sp, #12
 8000bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd2:	682b      	ldr	r3, [r5, #0]
 8000bd4:	6023      	str	r3, [r4, #0]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_MEDIUM,
        .Alternate = 0,
    };
    HAL_GPIO_Init(GPIOA, &setup);
 8000bd6:	a903      	add	r1, sp, #12
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f000 f948 	bl	8000e70 <HAL_GPIO_Init>

    // starting values
    HAL_GPIO_WritePin(GPIOA, RESET_PIN | CS_PIN | DC_PIN, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 fabf 	bl	800116c <HAL_GPIO_WritePin>

    // SPI pins
    setup.Pin = SPI_SCK | SPI_MOSI;
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	9303      	str	r3, [sp, #12]
    setup.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	9304      	str	r3, [sp, #16]
    setup.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &setup);
 8000bf6:	a903      	add	r1, sp, #12
    HAL_GPIO_WritePin(GPIOA, RESET_PIN | CS_PIN | DC_PIN, 1);

    // SPI pins
    setup.Pin = SPI_SCK | SPI_MOSI;
    setup.Mode = GPIO_MODE_AF_PP;
    setup.Alternate = GPIO_AF5_SPI1;
 8000bf8:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &setup);
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_GPIO_WritePin(GPIOA, RESET_PIN | CS_PIN | DC_PIN, 1);

    // SPI pins
    setup.Pin = SPI_SCK | SPI_MOSI;
    setup.Mode = GPIO_MODE_AF_PP;
    setup.Alternate = GPIO_AF5_SPI1;
 8000bfe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &setup);
 8000c00:	f000 f936 	bl	8000e70 <HAL_GPIO_Init>

    // lock the RESET pin so that St's DFU code doesn't clear screen
    // it might be trying to use it a MISO signal for SPI loading
    HAL_GPIO_LockPin(GPIOA, RESET_PIN | CS_PIN | DC_PIN);
 8000c04:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f000 fab7 	bl	800117e <HAL_GPIO_LockPin>

    // 10ms low-going pulse on reset pin
    delay_ms(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f002 fa41 	bl	8003098 <delay_ms>
    HAL_GPIO_WritePin(GPIOA, RESET_PIN, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2140      	movs	r1, #64	; 0x40
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f000 faa5 	bl	800116c <HAL_GPIO_WritePin>
    delay_ms(10);
 8000c22:	200a      	movs	r0, #10
 8000c24:	f002 fa38 	bl	8003098 <delay_ms>
    HAL_GPIO_WritePin(GPIOA, RESET_PIN, 1);
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f000 fa9c 	bl	800116c <HAL_GPIO_WritePin>

    oled_spi_setup();
 8000c34:	f7ff ff8c 	bl	8000b50 <oled_spi_setup>
    // this code:
    //      '0x37c', '0x1700', '0x603'
    //SPI1->CR1 = 0x354;

    // write a sequence to reset things
    oled_write_cmd_sequence(sizeof(reset_commands), reset_commands);
 8000c38:	4906      	ldr	r1, [pc, #24]	; (8000c54 <oled_setup+0xc0>)
 8000c3a:	2019      	movs	r0, #25
 8000c3c:	f7ff ff59 	bl	8000af2 <oled_write_cmd_sequence>
}
 8000c40:	b009      	add	sp, #36	; 0x24
 8000c42:	bd30      	pop	{r4, r5, pc}
 8000c44:	10006258 	.word	0x10006258
 8000c48:	238a572f 	.word	0x238a572f
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	080066e4 	.word	0x080066e4
 8000c54:	0800670d 	.word	0x0800670d

08000c58 <oled_show_raw>:
//
// No decompression.
//
    void
oled_show_raw(uint32_t len, const uint8_t *pixels)
{
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460d      	mov	r5, r1
    oled_setup();
 8000c5e:	f7ff ff99 	bl	8000b94 <oled_setup>

    oled_write_cmd_sequence(sizeof(before_show), before_show);
 8000c62:	4911      	ldr	r1, [pc, #68]	; (8000ca8 <oled_show_raw+0x50>)
 8000c64:	2006      	movs	r0, #6
 8000c66:	f7ff ff44 	bl	8000af2 <oled_write_cmd_sequence>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f000 fa7b 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f000 fa74 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f000 fa6e 	bl	800116c <HAL_GPIO_WritePin>

    write_bytes(len, pixels);
 8000c90:	4629      	mov	r1, r5
 8000c92:	4620      	mov	r0, r4
 8000c94:	f7ff ff02 	bl	8000a9c <write_bytes>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);

    write_bytes(len, pixels);

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000ca4:	f000 ba62 	b.w	800116c <HAL_GPIO_WritePin>
 8000ca8:	080066f8 	.word	0x080066f8

08000cac <oled_show>:
//
// Perform simple RLE decompression.
//
    void
oled_show(const uint8_t *pixels)
{
 8000cac:	b530      	push	{r4, r5, lr}
 8000cae:	b0a1      	sub	sp, #132	; 0x84
 8000cb0:	4604      	mov	r4, r0
    oled_setup();
 8000cb2:	f7ff ff6f 	bl	8000b94 <oled_setup>

    oled_write_cmd_sequence(sizeof(before_show), before_show);
 8000cb6:	491c      	ldr	r1, [pc, #112]	; (8000d28 <oled_show+0x7c>)
 8000cb8:	2006      	movs	r0, #6
 8000cba:	f7ff ff1a 	bl	8000af2 <oled_write_cmd_sequence>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f000 fa51 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd4:	f000 fa4a 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2110      	movs	r1, #16
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f000 fa44 	bl	800116c <HAL_GPIO_WritePin>
    uint8_t         buf[127];
    const uint8_t *p = pixels;

    // NOTE: must also update code in oled_show_progress, which dups this heavily.
    while(1) {
        uint8_t hdr = *(p++);
 8000ce4:	7823      	ldrb	r3, [r4, #0]
        if(!hdr) break;
 8000ce6:	b1b3      	cbz	r3, 8000d16 <oled_show+0x6a>

        uint8_t len = hdr & 0x7f;
 8000ce8:	f003 057f 	and.w	r5, r3, #127	; 0x7f
        if(hdr & 0x80) {
 8000cec:	061b      	lsls	r3, r3, #24
 8000cee:	d507      	bpl.n	8000d00 <oled_show+0x54>
    uint8_t         buf[127];
    const uint8_t *p = pixels;

    // NOTE: must also update code in oled_show_progress, which dups this heavily.
    while(1) {
        uint8_t hdr = *(p++);
 8000cf0:	3401      	adds	r4, #1
        if(!hdr) break;

        uint8_t len = hdr & 0x7f;
        if(hdr & 0x80) {
            // random bytes follow
            memcpy(buf, p, len);
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	462a      	mov	r2, r5
 8000cf6:	4668      	mov	r0, sp
 8000cf8:	f005 fc67 	bl	80065ca <memcpy>
            p += len;
 8000cfc:	442c      	add	r4, r5
 8000cfe:	e005      	b.n	8000d0c <oled_show+0x60>
        } else {
            // repeat same byte
            memset(buf, *p, len);
 8000d00:	7861      	ldrb	r1, [r4, #1]
 8000d02:	462a      	mov	r2, r5
 8000d04:	4668      	mov	r0, sp
 8000d06:	f005 fc86 	bl	8006616 <memset>
            p++;
 8000d0a:	3402      	adds	r4, #2
        }

        write_bytes(len, buf);
 8000d0c:	4669      	mov	r1, sp
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f7ff fec4 	bl	8000a9c <write_bytes>
    }
 8000d14:	e7e6      	b.n	8000ce4 <oled_show+0x38>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2110      	movs	r1, #16
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f000 fa25 	bl	800116c <HAL_GPIO_WritePin>
}
 8000d22:	b021      	add	sp, #132	; 0x84
 8000d24:	bd30      	pop	{r4, r5, pc}
 8000d26:	bf00      	nop
 8000d28:	080066f8 	.word	0x080066f8

08000d2c <oled_show_progress>:
//
// Perform simple RLE decompression, and add a bar on final screen line.
//
    void
oled_show_progress(const uint8_t *pixels, int progress)
{
 8000d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d30:	b0a0      	sub	sp, #128	; 0x80
 8000d32:	460d      	mov	r5, r1
 8000d34:	4607      	mov	r7, r0
    oled_setup();
 8000d36:	f7ff ff2d 	bl	8000b94 <oled_setup>

    oled_write_cmd_sequence(sizeof(before_show), before_show);
 8000d3a:	493b      	ldr	r1, [pc, #236]	; (8000e28 <oled_show_progress+0xfc>)
 8000d3c:	2006      	movs	r0, #6
 8000d3e:	f7ff fed8 	bl	8000af2 <oled_write_cmd_sequence>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2110      	movs	r1, #16
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f000 fa0f 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f000 fa08 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f000 fa02 	bl	800116c <HAL_GPIO_WritePin>

    uint8_t         buf[127];
    const uint8_t *p = pixels;

    const uint16_t p_start = 896;
    uint32_t p_count = 1280 * progress / 1000;
 8000d68:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d6c:	4369      	muls	r1, r5
 8000d6e:	2600      	movs	r6, #0
 8000d70:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000d74:	fb91 f5f5 	sdiv	r5, r1, r5
 8000d78:	2d80      	cmp	r5, #128	; 0x80
 8000d7a:	bf28      	it	cs
 8000d7c:	2580      	movcs	r5, #128	; 0x80
 8000d7e:	46b0      	mov	r8, r6

    bool last_line = false;

    uint16_t offset = 0;
    while(1) {
        uint8_t hdr = *(p++);
 8000d80:	783b      	ldrb	r3, [r7, #0]
        if(hdr == 0) break;
 8000d82:	b3ab      	cbz	r3, 8000df0 <oled_show_progress+0xc4>

        uint8_t len = hdr & 0x7f;
 8000d84:	f003 047f 	and.w	r4, r3, #127	; 0x7f
        if(hdr & 0x80) {
 8000d88:	061b      	lsls	r3, r3, #24
 8000d8a:	d507      	bpl.n	8000d9c <oled_show_progress+0x70>

    bool last_line = false;

    uint16_t offset = 0;
    while(1) {
        uint8_t hdr = *(p++);
 8000d8c:	3701      	adds	r7, #1
        if(hdr == 0) break;

        uint8_t len = hdr & 0x7f;
        if(hdr & 0x80) {
            // random bytes follow
            memcpy(buf, p, len);
 8000d8e:	4639      	mov	r1, r7
 8000d90:	4622      	mov	r2, r4
 8000d92:	4668      	mov	r0, sp
 8000d94:	f005 fc19 	bl	80065ca <memcpy>
            p += len;
 8000d98:	4427      	add	r7, r4
 8000d9a:	e005      	b.n	8000da8 <oled_show_progress+0x7c>
        } else {
            // repeat same byte
            memset(buf, *p, len);
 8000d9c:	7879      	ldrb	r1, [r7, #1]
 8000d9e:	4622      	mov	r2, r4
 8000da0:	4668      	mov	r0, sp
 8000da2:	f005 fc38 	bl	8006616 <memset>
            p++;
 8000da6:	3702      	adds	r7, #2
        }

        if(!last_line && (offset+len) >= p_start) {
 8000da8:	f1b8 0f00 	cmp.w	r8, #0
 8000dac:	d129      	bne.n	8000e02 <oled_show_progress+0xd6>
 8000dae:	1933      	adds	r3, r6, r4
 8000db0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000db4:	db15      	blt.n	8000de2 <oled_show_progress+0xb6>
            last_line = true;

            // adjust so we're aligned w/ last line
            int h = p_start - offset;
            if(h) {
 8000db6:	f5d6 7860 	rsbs	r8, r6, #896	; 0x380
 8000dba:	d022      	beq.n	8000e02 <oled_show_progress+0xd6>
                write_bytes(h, buf);
 8000dbc:	4669      	mov	r1, sp
 8000dbe:	4640      	mov	r0, r8
                memmove(buf, buf+h, len-h);
 8000dc0:	ebc8 0404 	rsb	r4, r8, r4
            last_line = true;

            // adjust so we're aligned w/ last line
            int h = p_start - offset;
            if(h) {
                write_bytes(h, buf);
 8000dc4:	f7ff fe6a 	bl	8000a9c <write_bytes>
                memmove(buf, buf+h, len-h);
 8000dc8:	4622      	mov	r2, r4
 8000dca:	eb0d 0108 	add.w	r1, sp, r8
 8000dce:	4668      	mov	r0, sp
 8000dd0:	f005 fc06 	bl	80065e0 <memmove>
                len -= h;
 8000dd4:	b2e4      	uxtb	r4, r4
                offset += h;
 8000dd6:	f44f 7660 	mov.w	r6, #896	; 0x380
 8000dda:	e012      	b.n	8000e02 <oled_show_progress+0xd6>
 8000ddc:	4615      	mov	r5, r2
 8000dde:	f04f 0801 	mov.w	r8, #1
            for(int j=0; (p_count > 0) && (j<len); j++, p_count--) {
                buf[j] |= 0x80;
            }
        }

        write_bytes(len, buf);
 8000de2:	4669      	mov	r1, sp
 8000de4:	4620      	mov	r0, r4
        offset += len;
 8000de6:	4426      	add	r6, r4
            for(int j=0; (p_count > 0) && (j<len); j++, p_count--) {
                buf[j] |= 0x80;
            }
        }

        write_bytes(len, buf);
 8000de8:	f7ff fe58 	bl	8000a9c <write_bytes>
        offset += len;
 8000dec:	b2b6      	uxth	r6, r6
    }
 8000dee:	e7c7      	b.n	8000d80 <oled_show_progress+0x54>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f000 f9b8 	bl	800116c <HAL_GPIO_WritePin>
}
 8000dfc:	b020      	add	sp, #128	; 0x80
 8000dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    uint8_t         buf[127];
    const uint8_t *p = pixels;

    const uint16_t p_start = 896;
    uint32_t p_count = 1280 * progress / 1000;
 8000e02:	2300      	movs	r3, #0
                offset += h;
            }
        }

        if(last_line) {
            for(int j=0; (p_count > 0) && (j<len); j++, p_count--) {
 8000e04:	42ab      	cmp	r3, r5
 8000e06:	eba5 0203 	sub.w	r2, r5, r3
 8000e0a:	d009      	beq.n	8000e20 <oled_show_progress+0xf4>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	dae5      	bge.n	8000ddc <oled_show_progress+0xb0>
                buf[j] |= 0x80;
 8000e10:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8000e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e18:	f80d 2003 	strb.w	r2, [sp, r3]
                offset += h;
            }
        }

        if(last_line) {
            for(int j=0; (p_count > 0) && (j<len); j++, p_count--) {
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	e7f1      	b.n	8000e04 <oled_show_progress+0xd8>
 8000e20:	f04f 0801 	mov.w	r8, #1
 8000e24:	2500      	movs	r5, #0
 8000e26:	e7dc      	b.n	8000de2 <oled_show_progress+0xb6>
 8000e28:	080066f8 	.word	0x080066f8

08000e2c <oled_factory_busy>:

// oled_factory_busy()
//
    void
oled_factory_busy(void)
{
 8000e2c:	b510      	push	{r4, lr}
    };
    uint8_t data[128];

    for(int x=0; x<128; x++) {
        // each byte here is a vertical column, 8 pixels tall, MSB at bottom
        data[x] = (1<<(7 - (x%8)));
 8000e2e:	2201      	movs	r2, #1

// oled_factory_busy()
//
    void
oled_factory_busy(void)
{
 8000e30:	b0a0      	sub	sp, #128	; 0x80
            0, 0xff,        // placeholders
        0x2f                // start
    };
    uint8_t data[128];

    for(int x=0; x<128; x++) {
 8000e32:	2400      	movs	r4, #0
        // each byte here is a vertical column, 8 pixels tall, MSB at bottom
        data[x] = (1<<(7 - (x%8)));
 8000e34:	f004 0307 	and.w	r3, r4, #7
 8000e38:	f1c3 0307 	rsb	r3, r3, #7
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	f80d 3004 	strb.w	r3, [sp, r4]
            0, 0xff,        // placeholders
        0x2f                // start
    };
    uint8_t data[128];

    for(int x=0; x<128; x++) {
 8000e44:	3401      	adds	r4, #1
 8000e46:	2c80      	cmp	r4, #128	; 0x80
 8000e48:	d1f4      	bne.n	8000e34 <oled_factory_busy+0x8>
        // each byte here is a vertical column, 8 pixels tall, MSB at bottom
        data[x] = (1<<(7 - (x%8)));
    }

    oled_write_cmd_sequence(sizeof(setup), setup);
 8000e4a:	4907      	ldr	r1, [pc, #28]	; (8000e68 <oled_factory_busy+0x3c>)
 8000e4c:	2006      	movs	r0, #6
 8000e4e:	f7ff fe50 	bl	8000af2 <oled_write_cmd_sequence>
    oled_write_data(sizeof(data), data);
 8000e52:	4669      	mov	r1, sp
 8000e54:	4620      	mov	r0, r4
 8000e56:	f7ff fe59 	bl	8000b0c <oled_write_data>
    oled_write_cmd_sequence(sizeof(animate), animate);
 8000e5a:	4904      	ldr	r1, [pc, #16]	; (8000e6c <oled_factory_busy+0x40>)
 8000e5c:	2009      	movs	r0, #9
 8000e5e:	f7ff fe48 	bl	8000af2 <oled_write_cmd_sequence>
}
 8000e62:	b020      	add	sp, #128	; 0x80
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	bf00      	nop
 8000e68:	080066fe 	.word	0x080066fe
 8000e6c:	08006704 	.word	0x08006704

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e74:	f8d1 b000 	ldr.w	fp, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001028 <HAL_GPIO_Init+0x1b8>
 8000e7c:	4c68      	ldr	r4, [pc, #416]	; (8001020 <HAL_GPIO_Init+0x1b0>)
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7e:	b085      	sub	sp, #20
  uint32_t position = 0x00;
 8000e80:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e82:	fa3b f203 	lsrs.w	r2, fp, r3
 8000e86:	f000 80c7 	beq.w	8001018 <HAL_GPIO_Init+0x1a8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	409e      	lsls	r6, r3

    if(iocurrent)
 8000e8e:	ea1b 0e06 	ands.w	lr, fp, r6
 8000e92:	f000 80bf 	beq.w	8001014 <HAL_GPIO_Init+0x1a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e96:	684a      	ldr	r2, [r1, #4]
 8000e98:	f022 0910 	bic.w	r9, r2, #16
 8000e9c:	f1b9 0f02 	cmp.w	r9, #2
 8000ea0:	d114      	bne.n	8000ecc <HAL_GPIO_Init+0x5c>
 8000ea2:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000ea6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eaa:	f003 0a07 	and.w	sl, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000eae:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eb2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000eb6:	250f      	movs	r5, #15
 8000eb8:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ebc:	ea27 0705 	bic.w	r7, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ec0:	690d      	ldr	r5, [r1, #16]
 8000ec2:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ec6:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8000ec8:	f8cc 5020 	str.w	r5, [ip, #32]
 8000ecc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000ed0:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000ed4:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ed8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eda:	f002 0a03 	and.w	sl, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000ede:	9501      	str	r5, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000ee4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ee6:	fa0a f70c 	lsl.w	r7, sl, ip
 8000eea:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eec:	f1b9 0f01 	cmp.w	r9, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8000ef0:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef2:	d813      	bhi.n	8000f1c <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000ef6:	9d01      	ldr	r5, [sp, #4]
 8000ef8:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000efc:	68cf      	ldr	r7, [r1, #12]
 8000efe:	fa07 f70c 	lsl.w	r7, r7, ip
 8000f02:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000f06:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f08:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f0a:	f3c2 1900 	ubfx	r9, r2, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f0e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f12:	fa09 f903 	lsl.w	r9, r9, r3
 8000f16:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8000f1a:	6047      	str	r7, [r0, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f1c:	f1ba 0f03 	cmp.w	sl, #3
 8000f20:	d107      	bne.n	8000f32 <HAL_GPIO_Init+0xc2>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f22:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f24:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f28:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000f2c:	409f      	lsls	r7, r3
 8000f2e:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000f30:	62c6      	str	r6, [r0, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f32:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000f34:	9d01      	ldr	r5, [sp, #4]
 8000f36:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f38:	688e      	ldr	r6, [r1, #8]
 8000f3a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f3e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000f40:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f42:	00d5      	lsls	r5, r2, #3
 8000f44:	d566      	bpl.n	8001014 <HAL_GPIO_Init+0x1a4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000f4a:	f045 0501 	orr.w	r5, r5, #1
 8000f4e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000f52:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000f56:	f023 0703 	bic.w	r7, r3, #3
 8000f5a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f5e:	f005 0501 	and.w	r5, r5, #1
 8000f62:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000f66:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f68:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f6e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f70:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f74:	250f      	movs	r5, #15
 8000f76:	fa05 f50c 	lsl.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f7a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f7e:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f82:	d019      	beq.n	8000fb8 <HAL_GPIO_Init+0x148>
 8000f84:	4d27      	ldr	r5, [pc, #156]	; (8001024 <HAL_GPIO_Init+0x1b4>)
 8000f86:	42a8      	cmp	r0, r5
 8000f88:	d018      	beq.n	8000fbc <HAL_GPIO_Init+0x14c>
 8000f8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f8e:	42a8      	cmp	r0, r5
 8000f90:	d016      	beq.n	8000fc0 <HAL_GPIO_Init+0x150>
 8000f92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f96:	42a8      	cmp	r0, r5
 8000f98:	d014      	beq.n	8000fc4 <HAL_GPIO_Init+0x154>
 8000f9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f9e:	42a8      	cmp	r0, r5
 8000fa0:	d012      	beq.n	8000fc8 <HAL_GPIO_Init+0x158>
 8000fa2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa6:	42a8      	cmp	r0, r5
 8000fa8:	d010      	beq.n	8000fcc <HAL_GPIO_Init+0x15c>
 8000faa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fae:	42a8      	cmp	r0, r5
 8000fb0:	bf14      	ite	ne
 8000fb2:	2507      	movne	r5, #7
 8000fb4:	2506      	moveq	r5, #6
 8000fb6:	e00a      	b.n	8000fce <HAL_GPIO_Init+0x15e>
 8000fb8:	2500      	movs	r5, #0
 8000fba:	e008      	b.n	8000fce <HAL_GPIO_Init+0x15e>
 8000fbc:	2501      	movs	r5, #1
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_Init+0x15e>
 8000fc0:	2502      	movs	r5, #2
 8000fc2:	e004      	b.n	8000fce <HAL_GPIO_Init+0x15e>
 8000fc4:	2503      	movs	r5, #3
 8000fc6:	e002      	b.n	8000fce <HAL_GPIO_Init+0x15e>
 8000fc8:	2504      	movs	r5, #4
 8000fca:	e000      	b.n	8000fce <HAL_GPIO_Init+0x15e>
 8000fcc:	2505      	movs	r5, #5
 8000fce:	fa05 f50c 	lsl.w	r5, r5, ip
 8000fd2:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fd4:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fd6:	4d12      	ldr	r5, [pc, #72]	; (8001020 <HAL_GPIO_Init+0x1b0>)
 8000fd8:	682d      	ldr	r5, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fde:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	bf54      	ite	pl
 8000fe2:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000fe4:	ea4e 0505 	orrmi.w	r5, lr, r5
        }
        EXTI->IMR1 = temp;
 8000fe8:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR1;
 8000fea:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fec:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 8000fee:	bf54      	ite	pl
 8000ff0:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000ff2:	ea4e 0505 	orrmi.w	r5, lr, r5
        }
        EXTI->EMR1 = temp;
 8000ff6:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ff8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffa:	02d7      	lsls	r7, r2, #11
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	bf54      	ite	pl
 8000ffe:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001000:	ea4e 0505 	orrmi.w	r5, lr, r5
        }
        EXTI->RTSR1 = temp;
 8001004:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR1;
 8001006:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 800100a:	bf54      	ite	pl
 800100c:	4035      	andpl	r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800100e:	ea4e 0505 	orrmi.w	r5, lr, r5
        }
        EXTI->FTSR1 = temp;
 8001012:	60e5      	str	r5, [r4, #12]
      }
    }

    position++;
 8001014:	3301      	adds	r3, #1
 8001016:	e734      	b.n	8000e82 <HAL_GPIO_Init+0x12>
  }
}
 8001018:	b005      	add	sp, #20
 800101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800101e:	bf00      	nop
 8001020:	40010400 	.word	0x40010400
 8001024:	48000400 	.word	0x48000400
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800102c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8001030:	4a47      	ldr	r2, [pc, #284]	; (8001150 <HAL_GPIO_DeInit+0x124>)
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8001032:	f8df a124 	ldr.w	sl, [pc, #292]	; 8001158 <HAL_GPIO_DeInit+0x12c>
 8001036:	f8df b124 	ldr.w	fp, [pc, #292]	; 800115c <HAL_GPIO_DeInit+0x130>
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00;
 800103a:	2300      	movs	r3, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800103c:	f04f 0801 	mov.w	r8, #1

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8001040:	f04f 0903 	mov.w	r9, #3
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 8001044:	fa31 f403 	lsrs.w	r4, r1, r3
 8001048:	d07e      	beq.n	8001148 <HAL_GPIO_DeInit+0x11c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800104a:	fa08 f603 	lsl.w	r6, r8, r3

    if (iocurrent)
 800104e:	ea11 0406 	ands.w	r4, r1, r6
 8001052:	9401      	str	r4, [sp, #4]
 8001054:	d076      	beq.n	8001144 <HAL_GPIO_DeInit+0x118>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8001056:	6807      	ldr	r7, [r0, #0]
 8001058:	005c      	lsls	r4, r3, #1
 800105a:	fa09 f404 	lsl.w	r4, r9, r4
 800105e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001062:	4327      	orrs	r7, r4
 8001064:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001068:	6007      	str	r7, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800106a:	f8dc 7020 	ldr.w	r7, [ip, #32]
 800106e:	f003 0e07 	and.w	lr, r3, #7
 8001072:	463d      	mov	r5, r7
 8001074:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001078:	270f      	movs	r7, #15
 800107a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800107e:	ea25 0e0e 	bic.w	lr, r5, lr
 8001082:	f8cc e020 	str.w	lr, [ip, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001086:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800108a:	43e4      	mvns	r4, r4
 800108c:	ea0e 0e04 	and.w	lr, lr, r4
 8001090:	f8c0 e008 	str.w	lr, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001094:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8001098:	43f6      	mvns	r6, r6
 800109a:	ea0e 0e06 	and.w	lr, lr, r6
 800109e:	f8c0 e004 	str.w	lr, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80010a2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80010a6:	ea04 040e 	and.w	r4, r4, lr
 80010aa:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80010ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80010ae:	4026      	ands	r6, r4
 80010b0:	62c6      	str	r6, [r0, #44]	; 0x2c
 80010b2:	f023 0603 	bic.w	r6, r3, #3
 80010b6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80010ba:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010be:	f003 0e03 	and.w	lr, r3, #3
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 80010c2:	68b4      	ldr	r4, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010c4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010c8:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80010cc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010d0:	ea04 0c07 	and.w	ip, r4, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80010d4:	d015      	beq.n	8001102 <HAL_GPIO_DeInit+0xd6>
 80010d6:	4c1f      	ldr	r4, [pc, #124]	; (8001154 <HAL_GPIO_DeInit+0x128>)
 80010d8:	42a0      	cmp	r0, r4
 80010da:	d014      	beq.n	8001106 <HAL_GPIO_DeInit+0xda>
 80010dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010e0:	42a0      	cmp	r0, r4
 80010e2:	d012      	beq.n	800110a <HAL_GPIO_DeInit+0xde>
 80010e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010e8:	42a0      	cmp	r0, r4
 80010ea:	d010      	beq.n	800110e <HAL_GPIO_DeInit+0xe2>
 80010ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010f0:	42a0      	cmp	r0, r4
 80010f2:	d00e      	beq.n	8001112 <HAL_GPIO_DeInit+0xe6>
 80010f4:	4550      	cmp	r0, sl
 80010f6:	d00e      	beq.n	8001116 <HAL_GPIO_DeInit+0xea>
 80010f8:	4558      	cmp	r0, fp
 80010fa:	bf0c      	ite	eq
 80010fc:	2406      	moveq	r4, #6
 80010fe:	2407      	movne	r4, #7
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_DeInit+0xec>
 8001102:	2400      	movs	r4, #0
 8001104:	e008      	b.n	8001118 <HAL_GPIO_DeInit+0xec>
 8001106:	2401      	movs	r4, #1
 8001108:	e006      	b.n	8001118 <HAL_GPIO_DeInit+0xec>
 800110a:	2402      	movs	r4, #2
 800110c:	e004      	b.n	8001118 <HAL_GPIO_DeInit+0xec>
 800110e:	2403      	movs	r4, #3
 8001110:	e002      	b.n	8001118 <HAL_GPIO_DeInit+0xec>
 8001112:	2404      	movs	r4, #4
 8001114:	e000      	b.n	8001118 <HAL_GPIO_DeInit+0xec>
 8001116:	2405      	movs	r4, #5
 8001118:	fa04 f40e 	lsl.w	r4, r4, lr
 800111c:	45a4      	cmp	ip, r4
 800111e:	d111      	bne.n	8001144 <HAL_GPIO_DeInit+0x118>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001120:	68b4      	ldr	r4, [r6, #8]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8001122:	9d01      	ldr	r5, [sp, #4]
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001124:	ea24 0707 	bic.w	r7, r4, r7
 8001128:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 800112a:	6814      	ldr	r4, [r2, #0]
 800112c:	43ed      	mvns	r5, r5
 800112e:	402c      	ands	r4, r5
 8001130:	6014      	str	r4, [r2, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 8001132:	6854      	ldr	r4, [r2, #4]
 8001134:	402c      	ands	r4, r5
 8001136:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 8001138:	6894      	ldr	r4, [r2, #8]
 800113a:	402c      	ands	r4, r5
 800113c:	6094      	str	r4, [r2, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 800113e:	68d4      	ldr	r4, [r2, #12]
 8001140:	4025      	ands	r5, r4
 8001142:	60d5      	str	r5, [r2, #12]
      }
    }

    position++;
 8001144:	3301      	adds	r3, #1
 8001146:	e77d      	b.n	8001044 <HAL_GPIO_DeInit+0x18>
  }
}
 8001148:	b003      	add	sp, #12
 800114a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800114e:	bf00      	nop
 8001150:	40010400 	.word	0x40010400
 8001154:	48000400 	.word	0x48000400
 8001158:	48001400 	.word	0x48001400
 800115c:	48001800 	.word	0x48001800

08001160 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001160:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001162:	4219      	tst	r1, r3
}
 8001164:	bf14      	ite	ne
 8001166:	2001      	movne	r0, #1
 8001168:	2000      	moveq	r0, #0
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	b10a      	cbz	r2, 8001172 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800116e:	6181      	str	r1, [r0, #24]
 8001170:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001172:	6281      	str	r1, [r0, #40]	; 0x28
 8001174:	4770      	bx	lr

08001176 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001176:	6943      	ldr	r3, [r0, #20]
 8001178:	4059      	eors	r1, r3
 800117a:	6141      	str	r1, [r0, #20]
 800117c:	4770      	bx	lr

0800117e <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117e:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8001180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001184:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8001186:	9b01      	ldr	r3, [sp, #4]
 8001188:	430b      	orrs	r3, r1
 800118a:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800118c:	9b01      	ldr	r3, [sp, #4]
 800118e:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8001190:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001192:	9b01      	ldr	r3, [sp, #4]
 8001194:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001196:	69c3      	ldr	r3, [r0, #28]
 8001198:	9301      	str	r3, [sp, #4]

  if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800119a:	69c0      	ldr	r0, [r0, #28]
 800119c:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 80011a0:	f3c0 4000 	ubfx	r0, r0, #16, #1
 80011a4:	b002      	add	sp, #8
 80011a6:	4770      	bx	lr

080011a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011ac:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80011b0:	6959      	ldr	r1, [r3, #20]
 80011b2:	4201      	tst	r1, r0
 80011b4:	d002      	beq.n	80011bc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011b6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011b8:	f7ff fff6 	bl	80011a8 <HAL_GPIO_EXTI_Callback>
 80011bc:	bd08      	pop	{r3, pc}
 80011be:	bf00      	nop
 80011c0:	40010400 	.word	0x40010400

080011c4 <SPI_EndRxTxTransaction.isra.2>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80011c4:	6803      	ldr	r3, [r0, #0]
  * @param  hspi: SPI handle
  * @param  Timeout: Timeout duration
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80011c6:	b082      	sub	sp, #8
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 80011ce:	d1fb      	bne.n	80011c8 <SPI_EndRxTxTransaction.isra.2+0x4>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d1fa      	bne.n	80011d0 <SPI_EndRxTxTransaction.isra.2+0xc>
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80011da:	6898      	ldr	r0, [r3, #8]
 80011dc:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 80011e0:	d006      	beq.n	80011f0 <SPI_EndRxTxTransaction.isra.2+0x2c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80011e2:	7b1a      	ldrb	r2, [r3, #12]
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	f88d 2007 	strb.w	r2, [sp, #7]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80011ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80011ee:	e7f4      	b.n	80011da <SPI_EndRxTxTransaction.isra.2+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80011f0:	b002      	add	sp, #8
 80011f2:	4770      	bx	lr

080011f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80011f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d041      	beq.n	800127e <HAL_SPI_Init+0x8a>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80011fe:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001202:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001206:	b90b      	cbnz	r3, 800120c <HAL_SPI_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001208:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800120c:	6801      	ldr	r1, [r0, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800120e:	68c5      	ldr	r5, [r0, #12]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
//PDG//    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001210:	2202      	movs	r2, #2
 8001212:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001216:	680b      	ldr	r3, [r1, #0]
 8001218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800121c:	600b      	str	r3, [r1, #0]
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800121e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001220:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
 8001224:	bf8c      	ite	hi
 8001226:	2400      	movhi	r4, #0
 8001228:	f44f 5480 	movls.w	r4, #4096	; 0x1000
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800122c:	b92b      	cbnz	r3, 800123a <HAL_SPI_Init+0x46>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800122e:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001232:	bf96      	itet	ls
 8001234:	2301      	movls	r3, #1
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001236:	6302      	strhi	r2, [r0, #48]	; 0x30
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001238:	6303      	strls	r3, [r0, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800123a:	6882      	ldr	r2, [r0, #8]
 800123c:	6846      	ldr	r6, [r0, #4]
 800123e:	6983      	ldr	r3, [r0, #24]
 8001240:	4316      	orrs	r6, r2
 8001242:	6902      	ldr	r2, [r0, #16]
 8001244:	4316      	orrs	r6, r2
 8001246:	6942      	ldr	r2, [r0, #20]
 8001248:	4316      	orrs	r6, r2
 800124a:	69c2      	ldr	r2, [r0, #28]
 800124c:	4316      	orrs	r6, r2
 800124e:	6a02      	ldr	r2, [r0, #32]
 8001250:	4316      	orrs	r6, r2
 8001252:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001256:	4332      	orrs	r2, r6
 8001258:	600a      	str	r2, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800125a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800125c:	4315      	orrs	r5, r2
 800125e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001260:	0c1b      	lsrs	r3, r3, #16
 8001262:	4315      	orrs	r5, r2
 8001264:	f003 0204 	and.w	r2, r3, #4
 8001268:	ea45 0302 	orr.w	r3, r5, r2
 800126c:	4323      	orrs	r3, r4
 800126e:	604b      	str	r3, [r1, #4]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001270:	2201      	movs	r2, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001272:	2300      	movs	r3, #0
 8001274:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001276:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d

  return HAL_OK;
 800127a:	4618      	mov	r0, r3
 800127c:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 800127e:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001280:	bd70      	pop	{r4, r5, r6, pc}

08001282 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001282:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001286:	461e      	mov	r6, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001288:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800128c:	2b01      	cmp	r3, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800128e:	4604      	mov	r4, r0
 8001290:	460d      	mov	r5, r1
 8001292:	4690      	mov	r8, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001294:	f000 8089 	beq.w	80013aa <HAL_SPI_Transmit+0x128>
 8001298:	2301      	movs	r3, #1
 800129a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800129e:	f7ff fbfb 	bl	8000a98 <HAL_GetTick>
 80012a2:	4607      	mov	r7, r0

  if (hspi->State != HAL_SPI_STATE_READY)
 80012a4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80012a8:	b2c0      	uxtb	r0, r0
 80012aa:	2801      	cmp	r0, #1
 80012ac:	d175      	bne.n	800139a <HAL_SPI_Transmit+0x118>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pData == NULL) || (Size == 0U))
 80012ae:	2d00      	cmp	r5, #0
 80012b0:	d074      	beq.n	800139c <HAL_SPI_Transmit+0x11a>
 80012b2:	f1b8 0f00 	cmp.w	r8, #0
 80012b6:	d071      	beq.n	800139c <HAL_SPI_Transmit+0x11a>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80012b8:	2303      	movs	r3, #3
 80012ba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012be:	68a3      	ldr	r3, [r4, #8]
 80012c0:	6822      	ldr	r2, [r4, #0]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80012c2:	63a5      	str	r5, [r4, #56]	; 0x38
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80012c4:	2100      	movs	r1, #0
 80012c6:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 80012cc:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
  hspi->RxXferCount = 0U;
 80012d0:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 80012d4:	bf08      	it	eq
 80012d6:	6813      	ldreq	r3, [r2, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80012d8:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 80012da:	bf08      	it	eq
 80012dc:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
 80012e0:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
 80012e4:	6521      	str	r1, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80012e6:	64e1      	str	r1, [r4, #76]	; 0x4c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 80012e8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 80012ec:	bf08      	it	eq
 80012ee:	6013      	streq	r3, [r2, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	0659      	lsls	r1, r3, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80012f4:	bf5e      	ittt	pl
 80012f6:	6813      	ldrpl	r3, [r2, #0]
 80012f8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80012fc:	6013      	strpl	r3, [r2, #0]
  }
  /* Transmit data in 8 Bit mode */
  else
  {
#endif
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80012fe:	6863      	ldr	r3, [r4, #4]
 8001300:	b11b      	cbz	r3, 800130a <HAL_SPI_Transmit+0x88>
 8001302:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001304:	b29b      	uxth	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d115      	bne.n	8001336 <HAL_SPI_Transmit+0xb4>
    {
      if (hspi->TxXferCount > 1U)
 800130a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800130c:	b29b      	uxth	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d903      	bls.n	800131a <HAL_SPI_Transmit+0x98>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001312:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001316:	60d3      	str	r3, [r2, #12]
 8001318:	e01b      	b.n	8001352 <HAL_SPI_Transmit+0xd0>
        pData += sizeof(uint16_t);
        hspi->TxXferCount -= 2U;
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800131a:	782b      	ldrb	r3, [r5, #0]
 800131c:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800131e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001320:	3b01      	subs	r3, #1
 8001322:	b29b      	uxth	r3, r3
 8001324:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001326:	e005      	b.n	8001334 <HAL_SPI_Transmit+0xb2>
          pData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001328:	782a      	ldrb	r2, [r5, #0]
 800132a:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800132c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800132e:	3a01      	subs	r2, #1
 8001330:	b292      	uxth	r2, r2
 8001332:	87e2      	strh	r2, [r4, #62]	; 0x3e
          pData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001334:	3501      	adds	r5, #1
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
        hspi->TxXferCount--;
      }
    }
    while (hspi->TxXferCount > 0U)
 8001336:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001338:	b29b      	uxth	r3, r3
 800133a:	b1d3      	cbz	r3, 8001372 <HAL_SPI_Transmit+0xf0>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	0792      	lsls	r2, r2, #30
 8001342:	d50b      	bpl.n	800135c <HAL_SPI_Transmit+0xda>
      {
        if (hspi->TxXferCount > 1U)
 8001344:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001346:	b292      	uxth	r2, r2
 8001348:	2a01      	cmp	r2, #1
 800134a:	d9ed      	bls.n	8001328 <HAL_SPI_Transmit+0xa6>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800134c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001350:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
 8001352:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001354:	3b02      	subs	r3, #2
 8001356:	b29b      	uxth	r3, r3
 8001358:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800135a:	e7ec      	b.n	8001336 <HAL_SPI_Transmit+0xb4>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800135c:	b90e      	cbnz	r6, 8001362 <HAL_SPI_Transmit+0xe0>
        {
          errorcode = HAL_TIMEOUT;
 800135e:	2003      	movs	r0, #3
 8001360:	e01c      	b.n	800139c <HAL_SPI_Transmit+0x11a>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001362:	1c73      	adds	r3, r6, #1
 8001364:	d0e7      	beq.n	8001336 <HAL_SPI_Transmit+0xb4>
 8001366:	f7ff fb97 	bl	8000a98 <HAL_GetTick>
 800136a:	1bc0      	subs	r0, r0, r7
 800136c:	4286      	cmp	r6, r0
 800136e:	d8e2      	bhi.n	8001336 <HAL_SPI_Transmit+0xb4>
 8001370:	e7f5      	b.n	800135e <HAL_SPI_Transmit+0xdc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff ff26 	bl	80011c4 <SPI_EndRxTxTransaction.isra.2>
 8001378:	b108      	cbz	r0, 800137e <HAL_SPI_Transmit+0xfc>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800137a:	2320      	movs	r3, #32
 800137c:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800137e:	68a3      	ldr	r3, [r4, #8]
 8001380:	b933      	cbnz	r3, 8001390 <HAL_SPI_Transmit+0x10e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	9201      	str	r2, [sp, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	9b01      	ldr	r3, [sp, #4]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001390:	6e20      	ldr	r0, [r4, #96]	; 0x60
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if (hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 8001392:	3000      	adds	r0, #0
 8001394:	bf18      	it	ne
 8001396:	2001      	movne	r0, #1
 8001398:	e000      	b.n	800139c <HAL_SPI_Transmit+0x11a>
 800139a:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800139c:	2301      	movs	r3, #1
 800139e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80013a2:	2300      	movs	r3, #0
 80013a4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80013a8:	e000      	b.n	80013ac <HAL_SPI_Transmit+0x12a>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80013aa:	2002      	movs	r0, #2
error:
  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 80013ac:	b002      	add	sp, #8
 80013ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80013b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013b6:	461e      	mov	r6, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80013b8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80013bc:	f8dd 8020 	ldr.w	r8, [sp, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80013c0:	2b01      	cmp	r3, #1
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80013c2:	4604      	mov	r4, r0
 80013c4:	460d      	mov	r5, r1
 80013c6:	4617      	mov	r7, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80013c8:	f000 80d7 	beq.w	800157a <HAL_SPI_TransmitReceive+0x1c8>
 80013cc:	2301      	movs	r3, #1
 80013ce:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80013d2:	f7ff fb61 	bl	8000a98 <HAL_GetTick>

  tmp  = hspi->State;
 80013d6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 80013da:	6861      	ldr	r1, [r4, #4]
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  tmp  = hspi->State;
 80013dc:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80013de:	2b01      	cmp	r3, #1

  /* Process Locked */
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80013e0:	4681      	mov	r9, r0

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80013e2:	d00a      	beq.n	80013fa <HAL_SPI_TransmitReceive+0x48>
 80013e4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80013e8:	f040 80bc 	bne.w	8001564 <HAL_SPI_TransmitReceive+0x1b2>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80013ec:	68a2      	ldr	r2, [r4, #8]
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	f040 80b8 	bne.w	8001564 <HAL_SPI_TransmitReceive+0x1b2>
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	f040 80b5 	bne.w	8001564 <HAL_SPI_TransmitReceive+0x1b2>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80013fa:	2d00      	cmp	r5, #0
 80013fc:	f000 80b4 	beq.w	8001568 <HAL_SPI_TransmitReceive+0x1b6>
 8001400:	2f00      	cmp	r7, #0
 8001402:	f000 80b1 	beq.w	8001568 <HAL_SPI_TransmitReceive+0x1b6>
 8001406:	2e00      	cmp	r6, #0
 8001408:	f000 80ae 	beq.w	8001568 <HAL_SPI_TransmitReceive+0x1b6>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800140c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001410:	6427      	str	r7, [r4, #64]	; 0x40
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001412:	2b04      	cmp	r3, #4
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001414:	bf1c      	itt	ne
 8001416:	2305      	movne	r3, #5
 8001418:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001420:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001422:	6523      	str	r3, [r4, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001424:	68e3      	ldr	r3, [r4, #12]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 8001426:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800142a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
  hspi->RxXferSize  = Size;
 800142e:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001432:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001434:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001436:	87a6      	strh	r6, [r4, #60]	; 0x3c
 8001438:	6823      	ldr	r3, [r4, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800143a:	d804      	bhi.n	8001446 <HAL_SPI_TransmitReceive+0x94>
 800143c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001440:	b292      	uxth	r2, r2
 8001442:	2a01      	cmp	r2, #1
 8001444:	d903      	bls.n	800144e <HAL_SPI_TransmitReceive+0x9c>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800144c:	e002      	b.n	8001454 <HAL_SPI_TransmitReceive+0xa2>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001454:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	0650      	lsls	r0, r2, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800145a:	bf5e      	ittt	pl
 800145c:	681a      	ldrpl	r2, [r3, #0]
 800145e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001462:	601a      	strpl	r2, [r3, #0]
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
#endif
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001464:	b119      	cbz	r1, 800146e <HAL_SPI_TransmitReceive+0xbc>
 8001466:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001468:	b292      	uxth	r2, r2
 800146a:	2a01      	cmp	r2, #1
 800146c:	d112      	bne.n	8001494 <HAL_SPI_TransmitReceive+0xe2>
    {
      if (hspi->TxXferCount > 1U)
 800146e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001470:	b292      	uxth	r2, r2
 8001472:	2a01      	cmp	r2, #1
 8001474:	d907      	bls.n	8001486 <HAL_SPI_TransmitReceive+0xd4>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001476:	f835 2b02 	ldrh.w	r2, [r5], #2
 800147a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount -= 2U;
 800147c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800147e:	3b02      	subs	r3, #2
 8001480:	b29b      	uxth	r3, r3
 8001482:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001484:	e006      	b.n	8001494 <HAL_SPI_TransmitReceive+0xe2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001486:	782a      	ldrb	r2, [r5, #0]
 8001488:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800148a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800148c:	3b01      	subs	r3, #1
 800148e:	b29b      	uxth	r3, r3
 8001490:	87e3      	strh	r3, [r4, #62]	; 0x3e
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount -= 2U;
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001492:	3501      	adds	r5, #1
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001494:	2601      	movs	r6, #1
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
        hspi->TxXferCount--;
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001496:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001498:	b29b      	uxth	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d052      	beq.n	8001544 <HAL_SPI_TransmitReceive+0x192>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800149e:	b1e6      	cbz	r6, 80014da <HAL_SPI_TransmitReceive+0x128>
 80014a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	b1c3      	cbz	r3, 80014d8 <HAL_SPI_TransmitReceive+0x126>
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	0791      	lsls	r1, r2, #30
 80014ac:	d514      	bpl.n	80014d8 <HAL_SPI_TransmitReceive+0x126>
      {
        if (hspi->TxXferCount > 1U)
 80014ae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80014b0:	b292      	uxth	r2, r2
 80014b2:	2a01      	cmp	r2, #1
 80014b4:	d907      	bls.n	80014c6 <HAL_SPI_TransmitReceive+0x114>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80014b6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80014ba:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
 80014bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014be:	3b02      	subs	r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80014c4:	e006      	b.n	80014d4 <HAL_SPI_TransmitReceive+0x122>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80014c6:	782a      	ldrb	r2, [r5, #0]
 80014c8:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80014ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
          pTxData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80014d2:	3501      	adds	r5, #1
          hspi->TxXferCount--;
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80014d4:	2600      	movs	r6, #0
 80014d6:	e000      	b.n	80014da <HAL_SPI_TransmitReceive+0x128>
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80014d8:	2601      	movs	r6, #1
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80014da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b32b      	cbz	r3, 800152e <HAL_SPI_TransmitReceive+0x17c>
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	07d2      	lsls	r2, r2, #31
 80014e8:	d521      	bpl.n	800152e <HAL_SPI_TransmitReceive+0x17c>
      {
        if (hspi->RxXferCount > 1U)
 80014ea:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80014ee:	b292      	uxth	r2, r2
 80014f0:	2a01      	cmp	r2, #1
 80014f2:	d912      	bls.n	800151a <HAL_SPI_TransmitReceive+0x168>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	f827 2b02 	strh.w	r2, [r7], #2
          pRxData += sizeof(uint16_t);
          hspi->RxXferCount -= 2U;
 80014fa:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80014fe:	3a02      	subs	r2, #2
 8001500:	b292      	uxth	r2, r2
 8001502:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8001506:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800150a:	b292      	uxth	r2, r2
 800150c:	2a01      	cmp	r2, #1
 800150e:	d80d      	bhi.n	800152c <HAL_SPI_TransmitReceive+0x17a>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	e008      	b.n	800152c <HAL_SPI_TransmitReceive+0x17a>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800151a:	7b1b      	ldrb	r3, [r3, #12]
 800151c:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 800151e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001522:	3b01      	subs	r3, #1
 8001524:	b29b      	uxth	r3, r3
 8001526:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800152a:	3701      	adds	r7, #1
          hspi->RxXferCount--;
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800152c:	2601      	movs	r6, #1
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800152e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001532:	d0b0      	beq.n	8001496 <HAL_SPI_TransmitReceive+0xe4>
 8001534:	f7ff fab0 	bl	8000a98 <HAL_GetTick>
 8001538:	ebc9 0000 	rsb	r0, r9, r0
 800153c:	4580      	cmp	r8, r0
 800153e:	d8aa      	bhi.n	8001496 <HAL_SPI_TransmitReceive+0xe4>
      {
        errorcode = HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e012      	b.n	800156a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
        hspi->TxXferCount--;
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001544:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001548:	b29b      	uxth	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1a7      	bne.n	800149e <HAL_SPI_TransmitReceive+0xec>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff fe38 	bl	80011c4 <SPI_EndRxTxTransaction.isra.2>
 8001554:	b108      	cbz	r0, 800155a <HAL_SPI_TransmitReceive+0x1a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001556:	2320      	movs	r3, #32
 8001558:	6623      	str	r3, [r4, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800155a:	6e20      	ldr	r0, [r4, #96]	; 0x60
  tmp1 = hspi->Init.Mode;

  if (!((tmp == HAL_SPI_STATE_READY) || \
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800155c:	3000      	adds	r0, #0
 800155e:	bf18      	it	ne
 8001560:	2001      	movne	r0, #1
 8001562:	e002      	b.n	800156a <HAL_SPI_TransmitReceive+0x1b8>
 8001564:	2002      	movs	r0, #2
 8001566:	e000      	b.n	800156a <HAL_SPI_TransmitReceive+0x1b8>
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 8001568:	2001      	movs	r0, #1
  {
    errorcode = HAL_ERROR;
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800156a:	2301      	movs	r3, #1
 800156c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001570:	2300      	movs	r3, #0
 8001572:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8001576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800157a:	2002      	movs	r0, #2

error :
  hspi->State = HAL_SPI_STATE_READY;
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 800157c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001580 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001580:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001584:	461e      	mov	r6, r3
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001586:	6843      	ldr	r3, [r0, #4]
 8001588:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800158c:	4604      	mov	r4, r0
 800158e:	460d      	mov	r5, r1
 8001590:	4690      	mov	r8, r2
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001592:	d10a      	bne.n	80015aa <HAL_SPI_Receive+0x2a>
 8001594:	6883      	ldr	r3, [r0, #8]
 8001596:	b943      	cbnz	r3, 80015aa <HAL_SPI_Receive+0x2a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001598:	2304      	movs	r3, #4
 800159a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800159e:	4613      	mov	r3, r2
 80015a0:	9600      	str	r6, [sp, #0]
 80015a2:	460a      	mov	r2, r1
 80015a4:	f7ff ff05 	bl	80013b2 <HAL_SPI_TransmitReceive>
 80015a8:	e093      	b.n	80016d2 <HAL_SPI_Receive+0x152>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80015aa:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d073      	beq.n	800169a <HAL_SPI_Receive+0x11a>
 80015b2:	2301      	movs	r3, #1
 80015b4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015b8:	f7ff fa6e 	bl	8000a98 <HAL_GetTick>
 80015bc:	4607      	mov	r7, r0

  if (hspi->State != HAL_SPI_STATE_READY)
 80015be:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80015c2:	b2c0      	uxtb	r0, r0
 80015c4:	2801      	cmp	r0, #1
 80015c6:	d160      	bne.n	800168a <HAL_SPI_Receive+0x10a>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pData == NULL) || (Size == 0U))
 80015c8:	2d00      	cmp	r5, #0
 80015ca:	d05f      	beq.n	800168c <HAL_SPI_Receive+0x10c>
 80015cc:	f1b8 0f00 	cmp.w	r8, #0
 80015d0:	d05c      	beq.n	800168c <HAL_SPI_Receive+0x10c>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80015d2:	2304      	movs	r3, #4
 80015d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015d8:	2100      	movs	r1, #0
 80015da:	6822      	ldr	r2, [r4, #0]
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80015dc:	68e3      	ldr	r3, [r4, #12]
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015de:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;
 80015e0:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
  hspi->TxXferSize  = 0U;
  hspi->TxXferCount = 0U;
 80015e4:	87e1      	strh	r1, [r4, #62]	; 0x3e
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80015e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80015ea:	6853      	ldr	r3, [r2, #4]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80015ec:	6425      	str	r5, [r4, #64]	; 0x40

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80015ee:	bf8c      	ite	hi
 80015f0:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80015f4:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
 80015f8:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80015fc:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80015fe:	87a1      	strh	r1, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
  hspi->RxISR       = NULL;
 8001600:	64e1      	str	r1, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001602:	6521      	str	r1, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001604:	6053      	str	r3, [r2, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001606:	68a3      	ldr	r3, [r4, #8]
 8001608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  {
    SPI_1LINE_RX(hspi);
 800160c:	bf02      	ittt	eq
 800160e:	6813      	ldreq	r3, [r2, #0]
 8001610:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 8001614:	6013      	streq	r3, [r2, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001616:	6813      	ldr	r3, [r2, #0]
 8001618:	0658      	lsls	r0, r3, #25
 800161a:	d410      	bmi.n	800163e <HAL_SPI_Receive+0xbe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800161c:	6813      	ldr	r3, [r2, #0]
 800161e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e00b      	b.n	800163e <HAL_SPI_Receive+0xbe>
#endif
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001626:	6893      	ldr	r3, [r2, #8]
 8001628:	07d9      	lsls	r1, r3, #31
 800162a:	d50f      	bpl.n	800164c <HAL_SPI_Receive+0xcc>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800162c:	7b13      	ldrb	r3, [r2, #12]
 800162e:	f805 3b01 	strb.w	r3, [r5], #1
        pData += sizeof(uint8_t);
        hspi->RxXferCount--;
 8001632:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001636:	3a01      	subs	r2, #1
 8001638:	b292      	uxth	r2, r2
 800163a:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
#if 0
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
  {
#endif
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800163e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ed      	bne.n	8001626 <HAL_SPI_Receive+0xa6>
 800164a:	e00a      	b.n	8001662 <HAL_SPI_Receive+0xe2>
        hspi->RxXferCount--;
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800164c:	b90e      	cbnz	r6, 8001652 <HAL_SPI_Receive+0xd2>
        {
          errorcode = HAL_TIMEOUT;
 800164e:	2003      	movs	r0, #3
 8001650:	e01c      	b.n	800168c <HAL_SPI_Receive+0x10c>
        hspi->RxXferCount--;
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001652:	1c73      	adds	r3, r6, #1
 8001654:	d0f3      	beq.n	800163e <HAL_SPI_Receive+0xbe>
 8001656:	f7ff fa1f 	bl	8000a98 <HAL_GetTick>
 800165a:	1bc0      	subs	r0, r0, r7
 800165c:	4286      	cmp	r6, r0
 800165e:	d8ee      	bhi.n	800163e <HAL_SPI_Receive+0xbe>
 8001660:	e7f5      	b.n	800164e <HAL_SPI_Receive+0xce>
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001662:	6861      	ldr	r1, [r4, #4]
 8001664:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001668:	d10a      	bne.n	8001680 <HAL_SPI_Receive+0x100>
 800166a:	68a3      	ldr	r3, [r4, #8]
 800166c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001670:	d002      	beq.n	8001678 <HAL_SPI_Receive+0xf8>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001676:	d103      	bne.n	8001680 <HAL_SPI_Receive+0x100>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001678:	6813      	ldr	r3, [r2, #0]
 800167a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800167e:	6013      	str	r3, [r2, #0]
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001680:	6893      	ldr	r3, [r2, #8]
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	b153      	cbz	r3, 800169e <HAL_SPI_Receive+0x11e>
 8001688:	e7fa      	b.n	8001680 <HAL_SPI_Receive+0x100>
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if (hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 800168a:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800168c:	2301      	movs	r3, #1
 800168e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001692:	2300      	movs	r3, #0
 8001694:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8001698:	e01b      	b.n	80016d2 <HAL_SPI_Receive+0x152>
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800169a:	2002      	movs	r0, #2
 800169c:	e019      	b.n	80016d2 <HAL_SPI_Receive+0x152>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800169e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80016a2:	d106      	bne.n	80016b2 <HAL_SPI_Receive+0x132>
 80016a4:	68a3      	ldr	r3, [r4, #8]
 80016a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016aa:	d007      	beq.n	80016bc <HAL_SPI_Receive+0x13c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80016ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b0:	d004      	beq.n	80016bc <HAL_SPI_Receive+0x13c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016b2:	6e20      	ldr	r0, [r4, #96]	; 0x60
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if (hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 80016b4:	3000      	adds	r0, #0
 80016b6:	bf18      	it	ne
 80016b8:	2001      	movne	r0, #1
 80016ba:	e7e7      	b.n	800168c <HAL_SPI_Receive+0x10c>
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80016bc:	6893      	ldr	r3, [r2, #8]
 80016be:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80016c2:	d0f6      	beq.n	80016b2 <HAL_SPI_Receive+0x132>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80016c4:	7b13      	ldrb	r3, [r2, #12]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f88d 300f 	strb.w	r3, [sp, #15]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80016cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80016d0:	e7f4      	b.n	80016bc <HAL_SPI_Receive+0x13c>

error :
  hspi->State = HAL_SPI_STATE_READY;
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 80016d2:	b004      	add	sp, #16
 80016d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016d8 <checksum_more>:

// checksum_more()
//
    static void
checksum_more(SHA256_CTX *ctx, uint32_t *total, const uint8_t *addr, int len)
{
 80016d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // do a nice progress bar as it works.
    while(len) {
        int here = MIN(len, 8196);
        int percent = ((*total) * 100) / TOTAL_CHECKSUM_LEN;

        oled_show_progress(screen_verify, percent);
 80016dc:	f8df a054 	ldr.w	sl, [pc, #84]	; 8001734 <checksum_more+0x5c>

// checksum_more()
//
    static void
checksum_more(SHA256_CTX *ctx, uint32_t *total, const uint8_t *addr, int len)
{
 80016e0:	4680      	mov	r8, r0
 80016e2:	460e      	mov	r6, r1
 80016e4:	4617      	mov	r7, r2
 80016e6:	461c      	mov	r4, r3
    // do a nice progress bar as it works.
    while(len) {
        int here = MIN(len, 8196);
 80016e8:	f242 0904 	movw	r9, #8196	; 0x2004
//
    static void
checksum_more(SHA256_CTX *ctx, uint32_t *total, const uint8_t *addr, int len)
{
    // do a nice progress bar as it works.
    while(len) {
 80016ec:	b1f4      	cbz	r4, 800172c <checksum_more+0x54>
        int here = MIN(len, 8196);
        int percent = ((*total) * 100) / TOTAL_CHECKSUM_LEN;

        oled_show_progress(screen_verify, percent);
 80016ee:	6831      	ldr	r1, [r6, #0]
 80016f0:	480f      	ldr	r0, [pc, #60]	; (8001730 <checksum_more+0x58>)
    static void
checksum_more(SHA256_CTX *ctx, uint32_t *total, const uint8_t *addr, int len)
{
    // do a nice progress bar as it works.
    while(len) {
        int here = MIN(len, 8196);
 80016f2:	454c      	cmp	r4, r9
        int percent = ((*total) * 100) / TOTAL_CHECKSUM_LEN;

        oled_show_progress(screen_verify, percent);
 80016f4:	f04f 0364 	mov.w	r3, #100	; 0x64
    static void
checksum_more(SHA256_CTX *ctx, uint32_t *total, const uint8_t *addr, int len)
{
    // do a nice progress bar as it works.
    while(len) {
        int here = MIN(len, 8196);
 80016f8:	4625      	mov	r5, r4
        int percent = ((*total) * 100) / TOTAL_CHECKSUM_LEN;

        oled_show_progress(screen_verify, percent);
 80016fa:	fb03 f101 	mul.w	r1, r3, r1
    static void
checksum_more(SHA256_CTX *ctx, uint32_t *total, const uint8_t *addr, int len)
{
    // do a nice progress bar as it works.
    while(len) {
        int here = MIN(len, 8196);
 80016fe:	bfa8      	it	ge
 8001700:	464d      	movge	r5, r9
        int percent = ((*total) * 100) / TOTAL_CHECKSUM_LEN;

        oled_show_progress(screen_verify, percent);
 8001702:	fbb1 f1fa 	udiv	r1, r1, sl
 8001706:	f7ff fb11 	bl	8000d2c <oled_show_progress>
        sha256_update(ctx, addr, here);
 800170a:	4639      	mov	r1, r7
 800170c:	462a      	mov	r2, r5
 800170e:	4640      	mov	r0, r8
 8001710:	f004 f85c 	bl	80057cc <sha256_update>

        *total += here;
 8001714:	6833      	ldr	r3, [r6, #0]
 8001716:	442b      	add	r3, r5
 8001718:	6033      	str	r3, [r6, #0]
        addr += here;
 800171a:	442f      	add	r7, r5
        len -= here;
 800171c:	1b64      	subs	r4, r4, r5

        if(dfu_button_pressed()) dfu_by_request();
 800171e:	f001 fd1b 	bl	8003158 <dfu_button_pressed>
 8001722:	2800      	cmp	r0, #0
 8001724:	d0e2      	beq.n	80016ec <checksum_more+0x14>
 8001726:	f7fe fefd 	bl	8000524 <dfu_by_request>
 800172a:	e7df      	b.n	80016ec <checksum_more+0x14>
    }
}
 800172c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001730:	080067e4 	.word	0x080067e4
 8001734:	0010741c 	.word	0x0010741c

08001738 <checksum_flash>:

// checksum_flash()
//
    void
checksum_flash(uint8_t fw_digest[32], uint8_t world_digest[32])
{
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	b0a6      	sub	sp, #152	; 0x98
 800173c:	4606      	mov	r6, r0
    const uint8_t *start = (const uint8_t *)FIRMWARE_START;

    SHA256_CTX  ctx;
    uint32_t    total_len = 0;
 800173e:	2300      	movs	r3, #0
    uint8_t first[32];

    sha256_init(&ctx);
 8001740:	a80a      	add	r0, sp, #40	; 0x28
    // start of firmware (just after we end) to header
    checksum_more(&ctx, &total_len, start, FW_HEADER_OFFSET + FW_HEADER_SIZE - 64);

    // from after header to end
    checksum_more(&ctx, &total_len, start + FW_HEADER_OFFSET + FW_HEADER_SIZE, 
                            FW_HDR->firmware_length - (FW_HEADER_OFFSET + FW_HEADER_SIZE));
 8001742:	4d3d      	ldr	r5, [pc, #244]	; (8001838 <checksum_flash+0x100>)
checksum_flash(uint8_t fw_digest[32], uint8_t world_digest[32])
{
    const uint8_t *start = (const uint8_t *)FIRMWARE_START;

    SHA256_CTX  ctx;
    uint32_t    total_len = 0;
 8001744:	9301      	str	r3, [sp, #4]

// checksum_flash()
//
    void
checksum_flash(uint8_t fw_digest[32], uint8_t world_digest[32])
{
 8001746:	460c      	mov	r4, r1

    SHA256_CTX  ctx;
    uint32_t    total_len = 0;
    uint8_t first[32];

    sha256_init(&ctx);
 8001748:	f004 f816 	bl	8005778 <sha256_init>

    // start of firmware (just after we end) to header
    checksum_more(&ctx, &total_len, start, FW_HEADER_OFFSET + FW_HEADER_SIZE - 64);
 800174c:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8001750:	4a3a      	ldr	r2, [pc, #232]	; (800183c <checksum_flash+0x104>)
 8001752:	a901      	add	r1, sp, #4
 8001754:	a80a      	add	r0, sp, #40	; 0x28
 8001756:	f7ff ffbf 	bl	80016d8 <checksum_more>

    // from after header to end
    checksum_more(&ctx, &total_len, start + FW_HEADER_OFFSET + FW_HEADER_SIZE, 
 800175a:	69ab      	ldr	r3, [r5, #24]
 800175c:	4a38      	ldr	r2, [pc, #224]	; (8001840 <checksum_flash+0x108>)
 800175e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001762:	a901      	add	r1, sp, #4
 8001764:	a80a      	add	r0, sp, #40	; 0x28
 8001766:	f7ff ffb7 	bl	80016d8 <checksum_more>
                            FW_HDR->firmware_length - (FW_HEADER_OFFSET + FW_HEADER_SIZE));

    sha256_final(&ctx, first);
 800176a:	a902      	add	r1, sp, #8
 800176c:	a80a      	add	r0, sp, #40	; 0x28
 800176e:	f004 f84b 	bl	8005808 <sha256_final>

    // double SHA256
    sha256_init(&ctx);
 8001772:	a80a      	add	r0, sp, #40	; 0x28
 8001774:	f004 f800 	bl	8005778 <sha256_init>
    sha256_update(&ctx, first, sizeof(first));
 8001778:	2220      	movs	r2, #32
 800177a:	a902      	add	r1, sp, #8
 800177c:	a80a      	add	r0, sp, #40	; 0x28
 800177e:	f004 f825 	bl	80057cc <sha256_update>
    sha256_final(&ctx, fw_digest);
 8001782:	4631      	mov	r1, r6
 8001784:	a80a      	add	r0, sp, #40	; 0x28
 8001786:	f004 f83f 	bl	8005808 <sha256_final>

    // start over, and get the rest of flash. All of it.
    sha256_init(&ctx);
 800178a:	a80a      	add	r0, sp, #40	; 0x28
 800178c:	f003 fff4 	bl	8005778 <sha256_init>

    // .. and chain in what we have so far
    sha256_update(&ctx, fw_digest, 32);
 8001790:	2220      	movs	r2, #32
 8001792:	4631      	mov	r1, r6
 8001794:	a80a      	add	r0, sp, #40	; 0x28
 8001796:	f004 f819 	bl	80057cc <sha256_update>

    // bootloader, including pairing secret area.
    const uint8_t *base = (const uint8_t *)BL_FLASH_BASE;
    checksum_more(&ctx, &total_len, base, start-base);
 800179a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800179e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a2:	a901      	add	r1, sp, #4
 80017a4:	a80a      	add	r0, sp, #40	; 0x28
 80017a6:	f7ff ff97 	bl	80016d8 <checksum_more>

    // probably-blank area after firmware, and filesystem area
    const uint8_t *fs = start + FW_HDR->firmware_length;
 80017aa:	69aa      	ldr	r2, [r5, #24]
 80017ac:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 80017b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    const uint8_t *last = base + MAIN_FLASH_SIZE;
    checksum_more(&ctx, &total_len, fs, last-fs);
 80017b4:	f1c2 6301 	rsb	r3, r2, #135266304	; 0x8100000
 80017b8:	a901      	add	r1, sp, #4
 80017ba:	a80a      	add	r0, sp, #40	; 0x28
 80017bc:	f7ff ff8c 	bl	80016d8 <checksum_more>

    // OTP area
    checksum_more(&ctx, &total_len, (void *)0x1fff7000, 0x400);
 80017c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c4:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <checksum_flash+0x10c>)
 80017c6:	a901      	add	r1, sp, #4
 80017c8:	a80a      	add	r0, sp, #40	; 0x28
 80017ca:	f7ff ff85 	bl	80016d8 <checksum_more>

    // "just in case" ... the option bytes (2 banks)
    checksum_more(&ctx, &total_len, (void *)0x1fff7800, 0x28);
 80017ce:	2328      	movs	r3, #40	; 0x28
 80017d0:	eb0d 0003 	add.w	r0, sp, r3
 80017d4:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <checksum_flash+0x110>)
 80017d6:	a901      	add	r1, sp, #4
 80017d8:	f7ff ff7e 	bl	80016d8 <checksum_more>
    checksum_more(&ctx, &total_len, (void *)0x1ffff800, 0x28);
 80017dc:	2328      	movs	r3, #40	; 0x28
 80017de:	eb0d 0003 	add.w	r0, sp, r3
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <checksum_flash+0x114>)
 80017e4:	a901      	add	r1, sp, #4
 80017e6:	f7ff ff77 	bl	80016d8 <checksum_more>

    // System ROM (they say it can't change, but clearly
    // implemented as flash cells)
    checksum_more(&ctx, &total_len, (void *)0x1fff0000, 0x7000);
 80017ea:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80017ee:	4a18      	ldr	r2, [pc, #96]	; (8001850 <checksum_flash+0x118>)
 80017f0:	a901      	add	r1, sp, #4
 80017f2:	a80a      	add	r0, sp, #40	; 0x28
 80017f4:	f7ff ff70 	bl	80016d8 <checksum_more>

    // device serial number, just for kicks
    checksum_more(&ctx, &total_len, (void *)0x1fff7590, 12);
 80017f8:	230c      	movs	r3, #12
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <checksum_flash+0x11c>)
 80017fc:	a901      	add	r1, sp, #4
 80017fe:	a80a      	add	r0, sp, #40	; 0x28
 8001800:	f7ff ff6a 	bl	80016d8 <checksum_more>

    ASSERT(total_len == TOTAL_CHECKSUM_LEN);
 8001804:	9a01      	ldr	r2, [sp, #4]
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <checksum_flash+0x120>)
 8001808:	429a      	cmp	r2, r3
 800180a:	d002      	beq.n	8001812 <checksum_flash+0xda>
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <checksum_flash+0x124>)
 800180e:	f7fe fddf 	bl	80003d0 <fatal_error>
    
    sha256_final(&ctx, world_digest);
 8001812:	4621      	mov	r1, r4
 8001814:	a80a      	add	r0, sp, #40	; 0x28
 8001816:	f003 fff7 	bl	8005808 <sha256_final>

    // double SHA256 (a bitcoin fetish)
    sha256_init(&ctx);
 800181a:	a80a      	add	r0, sp, #40	; 0x28
 800181c:	f003 ffac 	bl	8005778 <sha256_init>
    sha256_update(&ctx, world_digest, 32);
 8001820:	2220      	movs	r2, #32
 8001822:	4621      	mov	r1, r4
 8001824:	a80a      	add	r0, sp, #40	; 0x28
 8001826:	f003 ffd1 	bl	80057cc <sha256_update>
    sha256_final(&ctx, world_digest);
 800182a:	4621      	mov	r1, r4
 800182c:	a80a      	add	r0, sp, #40	; 0x28
 800182e:	f003 ffeb 	bl	8005808 <sha256_final>
}
 8001832:	b026      	add	sp, #152	; 0x98
 8001834:	bd70      	pop	{r4, r5, r6, pc}
 8001836:	bf00      	nop
 8001838:	0800bf80 	.word	0x0800bf80
 800183c:	08008000 	.word	0x08008000
 8001840:	0800c000 	.word	0x0800c000
 8001844:	1fff7000 	.word	0x1fff7000
 8001848:	1fff7800 	.word	0x1fff7800
 800184c:	1ffff800 	.word	0x1ffff800
 8001850:	1fff0000 	.word	0x1fff0000
 8001854:	1fff7590 	.word	0x1fff7590
 8001858:	0010741c 	.word	0x0010741c
 800185c:	08006686 	.word	0x08006686

08001860 <get_min_version>:
// Scan the OTP area and determine what the current min-version (timestamp)
// we can allow. All zeros if any if okay.
//
    void
get_min_version(uint8_t min_version[8])
{
 8001860:	b570      	push	{r4, r5, r6, lr}
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;

    memset(min_version, 0, 8);
 8001862:	2300      	movs	r3, #0
// we can allow. All zeros if any if okay.
//
    void
get_min_version(uint8_t min_version[8])
{
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;
 8001864:	4c0b      	ldr	r4, [pc, #44]	; (8001894 <get_min_version+0x34>)

    memset(min_version, 0, 8);

    for(int i=0; i<NUM_OPT_SLOTS; i++, otp+=8) {
 8001866:	4e0c      	ldr	r6, [pc, #48]	; (8001898 <get_min_version+0x38>)
    void
get_min_version(uint8_t min_version[8])
{
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;

    memset(min_version, 0, 8);
 8001868:	6003      	str	r3, [r0, #0]
// Scan the OTP area and determine what the current min-version (timestamp)
// we can allow. All zeros if any if okay.
//
    void
get_min_version(uint8_t min_version[8])
{
 800186a:	4605      	mov	r5, r0
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;

    memset(min_version, 0, 8);
 800186c:	6043      	str	r3, [r0, #4]
        // is it programmed?
        if(otp[0] == 0xff) continue;

        // is it a timestamp value?
        if(otp[0] >= 0x40) continue;
        if(otp[0] < 0x10) continue;
 800186e:	7823      	ldrb	r3, [r4, #0]
 8001870:	3b10      	subs	r3, #16
 8001872:	2b2f      	cmp	r3, #47	; 0x2f
 8001874:	d80a      	bhi.n	800188c <get_min_version+0x2c>

        if(memcmp(otp, min_version, 8) > 0) {
 8001876:	4629      	mov	r1, r5
 8001878:	2208      	movs	r2, #8
 800187a:	4620      	mov	r0, r4
 800187c:	f004 fe96 	bl	80065ac <memcmp>
 8001880:	2800      	cmp	r0, #0
            memcpy(min_version, otp, 8);
 8001882:	bfc1      	itttt	gt
 8001884:	4623      	movgt	r3, r4
 8001886:	cb03      	ldmiagt	r3!, {r0, r1}
 8001888:	6028      	strgt	r0, [r5, #0]
 800188a:	6069      	strgt	r1, [r5, #4]
{
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;

    memset(min_version, 0, 8);

    for(int i=0; i<NUM_OPT_SLOTS; i++, otp+=8) {
 800188c:	3408      	adds	r4, #8
 800188e:	42b4      	cmp	r4, r6
 8001890:	d1ed      	bne.n	800186e <get_min_version+0xe>

        if(memcmp(otp, min_version, 8) > 0) {
            memcpy(min_version, otp, 8);
        }
    }
}
 8001892:	bd70      	pop	{r4, r5, r6, pc}
 8001894:	1fff7000 	.word	0x1fff7000
 8001898:	1fff7400 	.word	0x1fff7400

0800189c <check_is_downgrade>:

// check_is_downgrade()
//
    bool
check_is_downgrade(const uint8_t timestamp[8], const char *version)
{
 800189c:	b513      	push	{r0, r1, r4, lr}
 800189e:	4604      	mov	r4, r0
    if(version) {
 80018a0:	b129      	cbz	r1, 80018ae <check_is_downgrade+0x12>
        int major = (version[1] == '.') ? (version[0]-'0') : 10;
 80018a2:	784b      	ldrb	r3, [r1, #1]
 80018a4:	2b2e      	cmp	r3, #46	; 0x2e
 80018a6:	d102      	bne.n	80018ae <check_is_downgrade+0x12>
        if(major < 3) {
 80018a8:	780b      	ldrb	r3, [r1, #0]
 80018aa:	2b32      	cmp	r3, #50	; 0x32
 80018ac:	dd09      	ble.n	80018c2 <check_is_downgrade+0x26>
        }
    }

    // look at FW_HDR->timestamp and compare to a growing list in main flash OTP
    uint8_t min[8];
    get_min_version(min);
 80018ae:	4668      	mov	r0, sp
 80018b0:	f7ff ffd6 	bl	8001860 <get_min_version>

    return (memcmp(timestamp, min, 8) < 0);
 80018b4:	2208      	movs	r2, #8
 80018b6:	4669      	mov	r1, sp
 80018b8:	4620      	mov	r0, r4
 80018ba:	f004 fe77 	bl	80065ac <memcmp>
 80018be:	0fc0      	lsrs	r0, r0, #31
 80018c0:	e000      	b.n	80018c4 <check_is_downgrade+0x28>
{
    if(version) {
        int major = (version[1] == '.') ? (version[0]-'0') : 10;
        if(major < 3) {
            // we require major version 3.0.0 or later (for mark3 hardware)
            return true;
 80018c2:	2001      	movs	r0, #1
    // look at FW_HDR->timestamp and compare to a growing list in main flash OTP
    uint8_t min[8];
    get_min_version(min);

    return (memcmp(timestamp, min, 8) < 0);
}
 80018c4:	b002      	add	sp, #8
 80018c6:	bd10      	pop	{r4, pc}

080018c8 <check_factory_key>:

// check_factory_key()
//
    void
check_factory_key(uint32_t pubkey_num)
{
 80018c8:	b510      	push	{r4, lr}
    if(IS_FACTORY_KEY(pubkey_num)) return;
 80018ca:	b950      	cbnz	r0, 80018e2 <check_factory_key+0x1a>
 80018cc:	4604      	mov	r4, r0
#else
    const int wait = 1;
#endif
    
    for(int i=0; i < wait; i++) {
        oled_show_progress(screen_devmode, (i*100)/wait);
 80018ce:	4621      	mov	r1, r4
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <check_factory_key+0x1c>)
 80018d2:	f7ff fa2b 	bl	8000d2c <oled_show_progress>
    const int wait = 100;
#else
    const int wait = 1;
#endif
    
    for(int i=0; i < wait; i++) {
 80018d6:	3401      	adds	r4, #1
        oled_show_progress(screen_devmode, (i*100)/wait);

        delay_ms(250);
 80018d8:	20fa      	movs	r0, #250	; 0xfa
 80018da:	f001 fbdd 	bl	8003098 <delay_ms>
    const int wait = 100;
#else
    const int wait = 1;
#endif
    
    for(int i=0; i < wait; i++) {
 80018de:	2c64      	cmp	r4, #100	; 0x64
 80018e0:	d1f5      	bne.n	80018ce <check_factory_key+0x6>
 80018e2:	bd10      	pop	{r4, pc}
 80018e4:	08006aae 	.word	0x08006aae

080018e8 <verify_header>:
// verify_header()
//
    bool
verify_header(const coldcardFirmwareHeader_t *hdr)
{
    if(hdr->magic_value != FW_HEADER_MAGIC) goto fail;
 80018e8:	6802      	ldr	r2, [r0, #0]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <verify_header+0x34>)
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d112      	bne.n	8001916 <verify_header+0x2e>
    if(hdr->version_string[0] == 0x0) goto fail;
 80018f0:	7b03      	ldrb	r3, [r0, #12]
 80018f2:	b173      	cbz	r3, 8001912 <verify_header+0x2a>
    if(hdr->timestamp[0] >= 0x40) goto fail;        // 22 yr product lifetime
 80018f4:	7903      	ldrb	r3, [r0, #4]
 80018f6:	2b3f      	cmp	r3, #63	; 0x3f
 80018f8:	d80d      	bhi.n	8001916 <verify_header+0x2e>
    if(hdr->firmware_length < FW_MIN_LENGTH) goto fail;
 80018fa:	6983      	ldr	r3, [r0, #24]
 80018fc:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8001900:	f5b3 2f38 	cmp.w	r3, #753664	; 0xb8000
 8001904:	d807      	bhi.n	8001916 <verify_header+0x2e>
    if(hdr->firmware_length > FW_MAX_LENGTH) goto fail;
    if(hdr->pubkey_num >= NUM_KNOWN_PUBKEYS) goto fail;
 8001906:	6940      	ldr	r0, [r0, #20]
 8001908:	2805      	cmp	r0, #5
 800190a:	bf8c      	ite	hi
 800190c:	2000      	movhi	r0, #0
 800190e:	2001      	movls	r0, #1
 8001910:	4770      	bx	lr

    return true;
fail:
    return false;
 8001912:	4618      	mov	r0, r3
 8001914:	4770      	bx	lr
 8001916:	2000      	movs	r0, #0
}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	cc001234 	.word	0xcc001234

08001920 <verify_signature>:
//
// Given double-sha256 over the firmware bytes, check the signature.
//
    bool
verify_signature(const coldcardFirmwareHeader_t *hdr, const uint8_t fw_check[32])
{
 8001920:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ok = uECC_verify(approved_pubkeys[hdr->pubkey_num], fw_check, 32,
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <verify_signature+0x2c>)
 8001924:	6944      	ldr	r4, [r0, #20]
//
// Given double-sha256 over the firmware bytes, check the signature.
//
    bool
verify_signature(const coldcardFirmwareHeader_t *hdr, const uint8_t fw_check[32])
{
 8001926:	4605      	mov	r5, r0
    int ok = uECC_verify(approved_pubkeys[hdr->pubkey_num], fw_check, 32,
 8001928:	eb02 1484 	add.w	r4, r2, r4, lsl #6
//
// Given double-sha256 over the firmware bytes, check the signature.
//
    bool
verify_signature(const coldcardFirmwareHeader_t *hdr, const uint8_t fw_check[32])
{
 800192c:	460e      	mov	r6, r1
    int ok = uECC_verify(approved_pubkeys[hdr->pubkey_num], fw_check, 32,
 800192e:	f004 fc2b 	bl	8006188 <uECC_secp256k1>
 8001932:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8001936:	9000      	str	r0, [sp, #0]
 8001938:	2220      	movs	r2, #32
 800193a:	4631      	mov	r1, r6
 800193c:	4620      	mov	r0, r4
 800193e:	f004 fc74 	bl	800622a <uECC_verify>
                                    hdr->signature, uECC_secp256k1());
    return ok;
}
 8001942:	3000      	adds	r0, #0
 8001944:	bf18      	it	ne
 8001946:	2001      	movne	r0, #1
 8001948:	b002      	add	sp, #8
 800194a:	bd70      	pop	{r4, r5, r6, pc}
 800194c:	08006d2f 	.word	0x08006d2f

08001950 <verify_firmware>:

// verify_firmware()
//
    void
verify_firmware(void)
{
 8001950:	b510      	push	{r4, lr}
    STATIC_ASSERT(sizeof(coldcardFirmwareHeader_t) == FW_HEADER_SIZE);

    // watch for unprogrammed header. and some 
    if(FW_HDR->version_string[0] == 0xff) goto blank;
 8001952:	4c13      	ldr	r4, [pc, #76]	; (80019a0 <verify_firmware+0x50>)
 8001954:	7b23      	ldrb	r3, [r4, #12]
 8001956:	2bff      	cmp	r3, #255	; 0xff

// verify_firmware()
//
    void
verify_firmware(void)
{
 8001958:	b090      	sub	sp, #64	; 0x40
    STATIC_ASSERT(sizeof(coldcardFirmwareHeader_t) == FW_HEADER_SIZE);

    // watch for unprogrammed header. and some 
    if(FW_HDR->version_string[0] == 0xff) goto blank;
 800195a:	d01a      	beq.n	8001992 <verify_firmware+0x42>
    if(!verify_header(FW_HDR)) goto fail;
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff ffc3 	bl	80018e8 <verify_header>
 8001962:	b1a0      	cbz	r0, 800198e <verify_firmware+0x3e>

    // measure checksum
    uint8_t fw_check[32], world_check[32];
    checksum_flash(fw_check, world_check);
 8001964:	a908      	add	r1, sp, #32
 8001966:	4668      	mov	r0, sp
 8001968:	f7ff fee6 	bl	8001738 <checksum_flash>

    // Verify the signature
    // - use pubkey_num to pick a specific key
    if(!verify_signature(FW_HDR, fw_check)) goto fail;
 800196c:	4669      	mov	r1, sp
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff ffd6 	bl	8001920 <verify_signature>
 8001974:	b158      	cbz	r0, 800198e <verify_firmware+0x3e>
 
    // Push the hash to the 508a which might make the Genuine light green,
    // but only if we arrived at same hash before. It decides.
    int not_green = ae_set_gpio_secure(world_check);
 8001976:	a808      	add	r0, sp, #32
 8001978:	f001 f99f 	bl	8002cba <ae_set_gpio_secure>

    // maybe show big warning if not an "approved" key
    if(not_green) {
 800197c:	b110      	cbz	r0, 8001984 <verify_firmware+0x34>
        check_factory_key(FW_HDR->pubkey_num);
 800197e:	6960      	ldr	r0, [r4, #20]
 8001980:	f7ff ffa2 	bl	80018c8 <check_factory_key>
    }

    oled_show_progress(screen_verify, 100);
 8001984:	2164      	movs	r1, #100	; 0x64
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <verify_firmware+0x54>)
 8001988:	f7ff f9d0 	bl	8000d2c <oled_show_progress>

    return;
 800198c:	e006      	b.n	800199c <verify_firmware+0x4c>

fail:
    oled_show(screen_corrupt);
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <verify_firmware+0x58>)
 8001990:	e000      	b.n	8001994 <verify_firmware+0x44>
    enter_dfu();
    return;

blank:
    oled_show(screen_dfu);
 8001992:	4806      	ldr	r0, [pc, #24]	; (80019ac <verify_firmware+0x5c>)
 8001994:	f7ff f98a 	bl	8000cac <oled_show>
    enter_dfu();
 8001998:	f7fe fd74 	bl	8000484 <enter_dfu>
    return;
}
 800199c:	b010      	add	sp, #64	; 0x40
 800199e:	bd10      	pop	{r4, pc}
 80019a0:	0800bf80 	.word	0x0800bf80
 80019a4:	080067e4 	.word	0x080067e4
 80019a8:	08006cb4 	.word	0x08006cb4
 80019ac:	080069ac 	.word	0x080069ac

080019b0 <systick_setup>:
    void
systick_setup(void)
{
    const uint32_t ticks = HCLK_FREQUENCY/1000;

    SysTick->LOAD = (ticks - 1);
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <systick_setup+0x10>)
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <systick_setup+0x14>)
 80019b4:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SYSTICK_CLKSOURCE_HCLK | SysTick_CTRL_ENABLE_Msk;
 80019ba:	2205      	movs	r2, #5
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	4770      	bx	lr
 80019c0:	e000e010 	.word	0xe000e010
 80019c4:	0001387f 	.word	0x0001387f

080019c8 <clocks_setup>:

// clocks_setup()
//
    void
clocks_setup(void)
{
 80019c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;

    // Configure LSE Drive Capability
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019cc:	4d2b      	ldr	r5, [pc, #172]	; (8001a7c <clocks_setup+0xb4>)
 80019ce:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90

// clocks_setup()
//
    void
clocks_setup(void)
{
 80019d2:	b0b9      	sub	sp, #228	; 0xe4
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;

    // Configure LSE Drive Capability
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019d4:	f023 0318 	bic.w	r3, r3, #24
 80019d8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90

    // Enable HSE Oscillator and activate PLL with HSE as source
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019dc:	2301      	movs	r3, #1
 80019de:	9305      	str	r3, [sp, #20]

    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
    RCC_OscInitStruct.MSIState = RCC_MSI_OFF;

    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e4:	2703      	movs	r7, #3
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

    // Enable HSE Oscillator and activate PLL with HSE as source
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;

    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e6:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;

    // Select PLL as system clock source and configure
    // the HCLK, PCLK1 and PCLK2 clocks dividers
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK 
 80019e8:	230f      	movs	r3, #15

    // Enable HSE Oscillator and activate PLL with HSE as source
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;

    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80019ea:	2400      	movs	r4, #0
    RCC_OscInitStruct.MSIState = RCC_MSI_OFF;

    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ec:	2602      	movs	r6, #2

    // Select PLL as system clock source and configure
    // the HCLK, PCLK1 and PCLK2 clocks dividers
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK 
                                    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ee:	e88d 0088 	stmia.w	sp, {r3, r7}

    RCC_OscInitStruct.PLL.PLLM = CKCC_CLK_PLLM;
    RCC_OscInitStruct.PLL.PLLN = CKCC_CLK_PLLN;
    RCC_OscInitStruct.PLL.PLLP = CKCC_CLK_PLLP;
 80019f2:	f04f 0807 	mov.w	r8, #7
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK 
                                    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;

    RCC_OscInitStruct.PLL.PLLM = CKCC_CLK_PLLM;
    RCC_OscInitStruct.PLL.PLLN = CKCC_CLK_PLLN;
 80019f6:	2328      	movs	r3, #40	; 0x28
    RCC_OscInitStruct.PLL.PLLP = CKCC_CLK_PLLP;
    RCC_OscInitStruct.PLL.PLLQ = CKCC_CLK_PLLQ;
 80019f8:	f04f 0904 	mov.w	r9, #4

    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80019fc:	a805      	add	r0, sp, #20
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK 
                                    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;

    RCC_OscInitStruct.PLL.PLLM = CKCC_CLK_PLLM;
    RCC_OscInitStruct.PLL.PLLN = CKCC_CLK_PLLN;
 80019fe:	9312      	str	r3, [sp, #72]	; 0x48

    // Enable HSE Oscillator and activate PLL with HSE as source
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;

    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001a00:	9407      	str	r4, [sp, #28]
    RCC_OscInitStruct.MSIState = RCC_MSI_OFF;
 8001a02:	940b      	str	r4, [sp, #44]	; 0x2c

    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a04:	9710      	str	r7, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a06:	960f      	str	r6, [sp, #60]	; 0x3c
    // the HCLK, PCLK1 and PCLK2 clocks dividers
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK 
                                    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;

    RCC_OscInitStruct.PLL.PLLM = CKCC_CLK_PLLM;
 8001a08:	9611      	str	r6, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLN = CKCC_CLK_PLLN;
    RCC_OscInitStruct.PLL.PLLP = CKCC_CLK_PLLP;
 8001a0a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLQ = CKCC_CLK_PLLQ;
 8001a0e:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLR = CKCC_CLK_PLLR;
 8001a12:	9615      	str	r6, [sp, #84]	; 0x54

    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a14:	9402      	str	r4, [sp, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a16:	9403      	str	r4, [sp, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a18:	9404      	str	r4, [sp, #16]

    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001a1a:	f002 fcb3 	bl	8004384 <HAL_RCC_OscConfig>

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001a1e:	4649      	mov	r1, r9
 8001a20:	4668      	mov	r0, sp
 8001a22:	f002 febf 	bl	80047a4 <HAL_RCC_ClockConfig>

    // DIS-able MSI-Hardware auto calibration mode with LSE
    CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001a26:	682b      	ldr	r3, [r5, #0]
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	602b      	str	r3, [r5, #0]

    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <clocks_setup+0xb8>)
 8001a30:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    // PLLSAI is used to clock USB, ADC, I2C1 and RNG. The frequency is
    // HSE(8MHz)/PLLM(2)*PLLSAI1N(24)/PLLSAIQ(2) = 48MHz.
    //
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a36:	9334      	str	r3, [sp, #208]	; 0xd0
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001a38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a3c:	9331      	str	r3, [sp, #196]	; 0xc4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001a3e:	9333      	str	r3, [sp, #204]	; 0xcc

    PeriphClkInitStruct.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1M = 2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1N = 24;
 8001a40:	2318      	movs	r3, #24
    // HSE(8MHz)/PLLM(2)*PLLSAI1N(24)/PLLSAIQ(2) = 48MHz.
    //
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a42:	f44f 7280 	mov.w	r2, #256	; 0x100
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;

    PeriphClkInitStruct.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1M = 2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1N = 24;
 8001a46:	9319      	str	r3, [sp, #100]	; 0x64
    PeriphClkInitStruct.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
                                                 |RCC_PLLSAI1_48M2CLK
                                                 |RCC_PLLSAI1_ADC1CLK;

    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001a48:	a816      	add	r0, sp, #88	; 0x58
    PeriphClkInitStruct.PLLSAI1.PLLSAI1M = 2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1N = 24;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <clocks_setup+0xbc>)
    // HSE(8MHz)/PLLM(2)*PLLSAI1N(24)/PLLSAIQ(2) = 48MHz.
    //
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a4c:	9237      	str	r2, [sp, #220]	; 0xdc
    PeriphClkInitStruct.PLLSAI1.PLLSAI1M = 2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1N = 24;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 8001a4e:	931d      	str	r3, [sp, #116]	; 0x74
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                                              |RCC_PERIPHCLK_USB |RCC_PERIPHCLK_ADC
                                              |RCC_PERIPHCLK_RNG |RCC_PERIPHCLK_RTC;

    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a50:	942a      	str	r4, [sp, #168]	; 0xa8
    // PLLSAI is used to clock USB, ADC, I2C1 and RNG. The frequency is
    // HSE(8MHz)/PLLM(2)*PLLSAI1N(24)/PLLSAIQ(2) = 48MHz.
    //
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001a52:	942f      	str	r4, [sp, #188]	; 0xbc
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;

    PeriphClkInitStruct.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001a54:	9717      	str	r7, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLLSAI1.PLLSAI1M = 2;
 8001a56:	9618      	str	r6, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLLSAI1.PLLSAI1N = 24;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a58:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a5c:	961b      	str	r6, [sp, #108]	; 0x6c
    PeriphClkInitStruct.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a5e:	961c      	str	r6, [sp, #112]	; 0x70
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
                                                 |RCC_PLLSAI1_48M2CLK
                                                 |RCC_PLLSAI1_ADC1CLK;

    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001a60:	f003 f8a4 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_RTC_ENABLE();
 8001a64:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90

    // setup SYSTICK, but we don't have the irq hooked up and not using HAL
    systick_setup();
 8001a70:	f7ff ff9e 	bl	80019b0 <systick_setup>
}
 8001a74:	b039      	add	sp, #228	; 0xe4
 8001a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	00066840 	.word	0x00066840
 8001a84:	01110000 	.word	0x01110000

08001a88 <flash_ob_lock.part.1>:
    } else {

        // write changes to OB flash bytes

        // Set OPTSTRT bit
        SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <flash_ob_lock.part.1+0xdc>)
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	461a      	mov	r2, r3
    __attribute__((section(".ramfunc")))
    __attribute__((always_inline))
    static inline uint32_t
_flash_wait_done(void)
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
 8001a94:	6911      	ldr	r1, [r2, #16]
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <flash_ob_lock.part.1+0xdc>)
 8001a98:	03c8      	lsls	r0, r1, #15
 8001a9a:	d4fb      	bmi.n	8001a94 <flash_ob_lock.part.1+0xc>
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	0791      	lsls	r1, r2, #30
 8001aa0:	d41e      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	0712      	lsls	r2, r2, #28
 8001aa6:	d41b      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
 8001aa8:	691a      	ldr	r2, [r3, #16]
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
 8001aaa:	06d0      	lsls	r0, r2, #27
 8001aac:	d418      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	0691      	lsls	r1, r2, #26
 8001ab2:	d415      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8001ab4:	691a      	ldr	r2, [r3, #16]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
 8001ab6:	0652      	lsls	r2, r2, #25
 8001ab8:	d412      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	0610      	lsls	r0, r2, #24
 8001abe:	d40f      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
 8001ac0:	691a      	ldr	r2, [r3, #16]
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8001ac2:	05d1      	lsls	r1, r2, #23
 8001ac4:	d40c      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	0592      	lsls	r2, r2, #22
 8001aca:	d409      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8001acc:	691b      	ldr	r3, [r3, #16]
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
 8001ace:	0458      	lsls	r0, r3, #17
 8001ad0:	d406      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <flash_ob_lock.part.1+0xdc>)
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	0411      	lsls	r1, r2, #16
 8001ad8:	d402      	bmi.n	8001ae0 <flash_ob_lock.part.1+0x58>
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY))
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8001ada:	699a      	ldr	r2, [r3, #24]

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8001adc:	2a00      	cmp	r2, #0
 8001ade:	da02      	bge.n	8001ae6 <flash_ob_lock.part.1+0x5e>
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
#endif
    ) {
        // Save an error code; somewhat random
        return FLASH->SR;
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <flash_ob_lock.part.1+0xdc>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	e004      	b.n	8001af0 <flash_ob_lock.part.1+0x68>
    }

    // Check FLASH End of Operation flag
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	07d2      	lsls	r2, r2, #31
        // Clear FLASH End of Operation pending bit
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001aea:	bf44      	itt	mi
 8001aec:	2201      	movmi	r2, #1
 8001aee:	611a      	strmi	r2, [r3, #16]

        /// Wait for update to complete
        _flash_wait_done();

        // lock OB again.
        SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <flash_ob_lock.part.1+0xdc>)
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001af8:	615a      	str	r2, [r3, #20]

        // include "launch" to make them take effect NOW
        SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	461a      	mov	r2, r3
    __attribute__((section(".ramfunc")))
    __attribute__((always_inline))
    static inline uint32_t
_flash_wait_done(void)
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
 8001b04:	6911      	ldr	r1, [r2, #16]
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <flash_ob_lock.part.1+0xdc>)
 8001b08:	03c8      	lsls	r0, r1, #15
 8001b0a:	d4fb      	bmi.n	8001b04 <flash_ob_lock.part.1+0x7c>
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	0791      	lsls	r1, r2, #30
 8001b10:	d41e      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	0712      	lsls	r2, r2, #28
 8001b16:	d41b      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
 8001b18:	691a      	ldr	r2, [r3, #16]
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
 8001b1a:	06d0      	lsls	r0, r2, #27
 8001b1c:	d418      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	0691      	lsls	r1, r2, #26
 8001b22:	d415      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8001b24:	691a      	ldr	r2, [r3, #16]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
 8001b26:	0652      	lsls	r2, r2, #25
 8001b28:	d412      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	0610      	lsls	r0, r2, #24
 8001b2e:	d40f      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
 8001b30:	691a      	ldr	r2, [r3, #16]
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8001b32:	05d1      	lsls	r1, r2, #23
 8001b34:	d40c      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	0592      	lsls	r2, r2, #22
 8001b3a:	d409      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8001b3c:	691b      	ldr	r3, [r3, #16]
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
 8001b3e:	0458      	lsls	r0, r3, #17
 8001b40:	d406      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <flash_ob_lock.part.1+0xdc>)
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	0411      	lsls	r1, r2, #16
 8001b48:	d402      	bmi.n	8001b50 <flash_ob_lock.part.1+0xc8>
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY))
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8001b4a:	699a      	ldr	r2, [r3, #24]

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	da02      	bge.n	8001b56 <flash_ob_lock.part.1+0xce>
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
#endif
    ) {
        // Save an error code; somewhat random
        return FLASH->SR;
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <flash_ob_lock.part.1+0xdc>)
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	4770      	bx	lr
    }

    // Check FLASH End of Operation flag
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	07d2      	lsls	r2, r2, #31
        // Clear FLASH End of Operation pending bit
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b5a:	bf44      	itt	mi
 8001b5c:	2201      	movmi	r2, #1
 8001b5e:	611a      	strmi	r2, [r3, #16]
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000

08001b68 <flash_setup0>:

// flash_setup0()
//
    void
flash_setup0(void)
{
 8001b68:	b507      	push	{r0, r1, r2, lr}
    // bits in the same bank. Cannot read bank while programming it.
    // Therefore, must have our programming code running in RAM.

    // put the ram-callable functions into place
    extern uint8_t _srelocate, _etext, _erelocate;
    memcpy(&_srelocate, &_etext, ((uint32_t)&_erelocate)-(uint32_t)&_srelocate);
 8001b6a:	4809      	ldr	r0, [pc, #36]	; (8001b90 <flash_setup0+0x28>)
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <flash_setup0+0x2c>)
 8001b6e:	490a      	ldr	r1, [pc, #40]	; (8001b98 <flash_setup0+0x30>)
 8001b70:	1a12      	subs	r2, r2, r0
 8001b72:	f004 fd2a 	bl	80065ca <memcpy>

    // turn on clock to flash registers
    __HAL_RCC_FLASH_CLK_ENABLE();
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <flash_setup0+0x34>)
 8001b78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b7e:	649a      	str	r2, [r3, #72]	; 0x48
 8001b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	9b01      	ldr	r3, [sp, #4]
}
 8001b8a:	b003      	add	sp, #12
 8001b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b90:	10006000 	.word	0x10006000
 8001b94:	10006258 	.word	0x10006258
 8001b98:	0800716c 	.word	0x0800716c
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <flash_lock>:
//
    void
flash_lock(void)
{
    // see HAL_FLASH_Lock();
    SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ba0:	4a02      	ldr	r2, [pc, #8]	; (8001bac <flash_lock+0xc>)
 8001ba2:	6953      	ldr	r3, [r2, #20]
 8001ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	6153      	str	r3, [r2, #20]
 8001baa:	4770      	bx	lr
 8001bac:	40022000 	.word	0x40022000

08001bb0 <flash_unlock>:
//
// Ok to run from flash.
//
    void
flash_unlock(void)
{
 8001bb0:	b508      	push	{r3, lr}
    // see HAL_FLASH_Unlock();
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK)) {
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <flash_unlock+0x24>)
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	da0a      	bge.n	8001bd0 <flash_unlock+0x20>
        // Authorize the FLASH Registers access
        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <flash_unlock+0x28>)
 8001bbc:	609a      	str	r2, [r3, #8]
        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bbe:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001bc2:	609a      	str	r2, [r3, #8]

        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK)) {
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da02      	bge.n	8001bd0 <flash_unlock+0x20>
            INCONSISTENT("failed to unlock");
 8001bca:	4804      	ldr	r0, [pc, #16]	; (8001bdc <flash_unlock+0x2c>)
 8001bcc:	f7fe fc00 	bl	80003d0 <fatal_error>
 8001bd0:	bd08      	pop	{r3, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	45670123 	.word	0x45670123
 8001bdc:	08006680 	.word	0x08006680

08001be0 <flash_ob_lock>:
// - also does "launch" when done
// - also locks/unlocks the main flash
//
    void
flash_ob_lock(bool lock)
{
 8001be0:	b510      	push	{r4, lr}
    if(!lock) {
 8001be2:	b980      	cbnz	r0, 8001c06 <flash_ob_lock+0x26>
        // unlock sequence
        if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK)) {
 8001be4:	4c0a      	ldr	r4, [pc, #40]	; (8001c10 <flash_ob_lock+0x30>)
 8001be6:	6963      	ldr	r3, [r4, #20]
 8001be8:	005a      	lsls	r2, r3, #1
 8001bea:	d510      	bpl.n	8001c0e <flash_ob_lock+0x2e>
            flash_unlock();
 8001bec:	f7ff ffe0 	bl	8001bb0 <flash_unlock>

            WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <flash_ob_lock+0x34>)
 8001bf2:	60e3      	str	r3, [r4, #12]
            WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001bf4:	f103 3344 	add.w	r3, r3, #1145324612	; 0x44444444
 8001bf8:	60e3      	str	r3, [r4, #12]

            if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK)) {
 8001bfa:	6963      	ldr	r3, [r4, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	d506      	bpl.n	8001c0e <flash_ob_lock+0x2e>
                INCONSISTENT("failed to OB unlock");
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <flash_ob_lock+0x38>)
 8001c02:	f7fe fbe5 	bl	80003d0 <fatal_error>
        // include "launch" to make them take effect NOW
        SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);

        _flash_wait_done();
    }
}
 8001c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c0a:	f7ff bf3d 	b.w	8001a88 <flash_ob_lock.part.1>
 8001c0e:	bd10      	pop	{r4, pc}
 8001c10:	40022000 	.word	0x40022000
 8001c14:	08192a3b 	.word	0x08192a3b
 8001c18:	08006680 	.word	0x08006680

08001c1c <pick_pairing_secret>:

// pick_pairing_secret()
//
    static void
pick_pairing_secret(void)
{
 8001c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c20:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
    // important the RNG works here. ok to call setup multiple times.
    rng_setup();
 8001c24:	f000 f9a2 	bl	8001f6c <rng_setup>
 8001c28:	f44f 747a 	mov.w	r4, #1000	; 0x3e8

    // Demo to anyone watching that the RNG is working, but likely only
    // to be seen by production team during initial powerup.
    uint8_t    tmp[1024];
    for(int i=0; i<1000; i++) {
        rng_buffer(tmp, sizeof(tmp));
 8001c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c30:	a808      	add	r0, sp, #32
 8001c32:	f000 f9c7 	bl	8001fc4 <rng_buffer>

        oled_show_raw(sizeof(tmp), (void *)tmp);
 8001c36:	a908      	add	r1, sp, #32
 8001c38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c3c:	f7ff f80c 	bl	8000c58 <oled_show_raw>
    rng_setup();

    // Demo to anyone watching that the RNG is working, but likely only
    // to be seen by production team during initial powerup.
    uint8_t    tmp[1024];
    for(int i=0; i<1000; i++) {
 8001c40:	3c01      	subs	r4, #1
 8001c42:	d1f3      	bne.n	8001c2c <pick_pairing_secret+0x10>
        rng_buffer(tmp, sizeof(tmp));

        oled_show_raw(sizeof(tmp), (void *)tmp);
    }

    oled_factory_busy();
 8001c44:	f7ff f8f2 	bl	8000e2c <oled_factory_busy>

    // .. but don't use those numbers, because those are semi-public now.
    uint32_t secret[8];
    for(int i=0; i<8; i++) {
        secret[i] = rng_sample();
 8001c48:	f000 f97c 	bl	8001f44 <rng_sample>
 8001c4c:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]

    oled_factory_busy();

    // .. but don't use those numbers, because those are semi-public now.
    uint32_t secret[8];
    for(int i=0; i<8; i++) {
 8001c50:	3401      	adds	r4, #1
 8001c52:	2c08      	cmp	r4, #8
 8001c54:	d1f8      	bne.n	8001c48 <pick_pairing_secret+0x2c>
        secret[i] = rng_sample();
    }

    // enforce policy that first word is not all ones (so it never
    // looks like unprogrammed flash).
    while(secret[0] == ~0) {
 8001c56:	9b00      	ldr	r3, [sp, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	d103      	bne.n	8001c64 <pick_pairing_secret+0x48>
        secret[0] = rng_sample();
 8001c5c:	f000 f972 	bl	8001f44 <rng_sample>
 8001c60:	9000      	str	r0, [sp, #0]
 8001c62:	e7f8      	b.n	8001c56 <pick_pairing_secret+0x3a>

    // Write pairing secret into flash
    {
        uint32_t dest = (uint32_t)&rom_secrets->pairing_secret;

        flash_unlock();
 8001c64:	f7ff ffa4 	bl	8001bb0 <flash_unlock>
 8001c68:	2400      	movs	r4, #0
        for(int i=0; i<8; i+=2, dest += 8) {
            uint64_t    val = (((uint64_t)secret[i]) << 32) | secret[i+1];
 8001c6a:	eb0d 0304 	add.w	r3, sp, r4

            if(flash_burn(dest, val)) {
 8001c6e:	f85d 9004 	ldr.w	r9, [sp, r4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	f04f 0800 	mov.w	r8, #0
 8001c78:	4640      	mov	r0, r8
 8001c7a:	4649      	mov	r1, r9
 8001c7c:	ea40 0002 	orr.w	r0, r0, r2
 8001c80:	4602      	mov	r2, r0
 8001c82:	f104 6000 	add.w	r0, r4, #134217728	; 0x8000000
 8001c86:	460b      	mov	r3, r1
 8001c88:	f500 40f0 	add.w	r0, r0, #30720	; 0x7800
 8001c8c:	f004 fce8 	bl	8006660 <__flash_burn_veneer>
 8001c90:	b110      	cbz	r0, 8001c98 <pick_pairing_secret+0x7c>
                INCONSISTENT("flash fail");
 8001c92:	4811      	ldr	r0, [pc, #68]	; (8001cd8 <pick_pairing_secret+0xbc>)
 8001c94:	f7fe fb9c 	bl	80003d0 <fatal_error>
 8001c98:	3408      	adds	r4, #8
    // Write pairing secret into flash
    {
        uint32_t dest = (uint32_t)&rom_secrets->pairing_secret;

        flash_unlock();
        for(int i=0; i<8; i+=2, dest += 8) {
 8001c9a:	2c20      	cmp	r4, #32
 8001c9c:	d1e5      	bne.n	8001c6a <pick_pairing_secret+0x4e>

            if(flash_burn(dest, val)) {
                INCONSISTENT("flash fail");
            }
        }
        flash_lock();
 8001c9e:	f7ff ff7f 	bl	8001ba0 <flash_lock>
                                + sizeof(rom_secrets->hash_cache_secret);

        STATIC_ASSERT(blen % 8 == 0);
        STATIC_ASSERT(blen == (72+416+32));

        flash_unlock();
 8001ca2:	f7ff ff85 	bl	8001bb0 <flash_unlock>
    }

    // Also at this point, pick RNG noise to use as our one-time-pad
    // for encrypting the secrets held in the 608a.
    {
        uint32_t dest = (uint32_t)&rom_secrets->otp_key;
 8001ca6:	4c0d      	ldr	r4, [pc, #52]	; (8001cdc <pick_pairing_secret+0xc0>)

        STATIC_ASSERT(blen % 8 == 0);
        STATIC_ASSERT(blen == (72+416+32));

        flash_unlock();
        for(int i=0; i<blen; i+=8, dest += 8) {
 8001ca8:	4d0d      	ldr	r5, [pc, #52]	; (8001ce0 <pick_pairing_secret+0xc4>)
            uint64_t    val = ((uint64_t)rng_sample() << 32) | rng_sample();
 8001caa:	f000 f94b 	bl	8001f44 <rng_sample>
 8001cae:	4680      	mov	r8, r0
 8001cb0:	f000 f948 	bl	8001f44 <rng_sample>

            if(flash_burn(dest, val)) {
 8001cb4:	2600      	movs	r6, #0
 8001cb6:	ea46 0200 	orr.w	r2, r6, r0
 8001cba:	4643      	mov	r3, r8
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f004 fccf 	bl	8006660 <__flash_burn_veneer>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d1e5      	bne.n	8001c92 <pick_pairing_secret+0x76>

        STATIC_ASSERT(blen % 8 == 0);
        STATIC_ASSERT(blen == (72+416+32));

        flash_unlock();
        for(int i=0; i<blen; i+=8, dest += 8) {
 8001cc6:	3408      	adds	r4, #8
 8001cc8:	42ac      	cmp	r4, r5
 8001cca:	d1ee      	bne.n	8001caa <pick_pairing_secret+0x8e>

            if(flash_burn(dest, val)) {
                INCONSISTENT("flash fail");
            }
        }
        flash_lock();
 8001ccc:	f7ff ff68 	bl	8001ba0 <flash_lock>
    }
    
}
 8001cd0:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 8001cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cd8:	08006680 	.word	0x08006680
 8001cdc:	08007870 	.word	0x08007870
 8001ce0:	08007a78 	.word	0x08007a78

08001ce4 <flash_save_ae_serial>:
//
// Write the serial number of ATECC508A into flash forever.
//
    void
flash_save_ae_serial(const uint8_t serial[9])
{
 8001ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001ce6:	4604      	mov	r4, r0

    uint64_t    tmp[2];
    memset(&tmp, 0x0, sizeof(tmp));
 8001ce8:	2210      	movs	r2, #16
 8001cea:	2100      	movs	r1, #0
 8001cec:	4668      	mov	r0, sp
 8001cee:	f004 fc92 	bl	8006616 <memset>
    memcpy(&tmp, serial, 9);
 8001cf2:	6820      	ldr	r0, [r4, #0]
 8001cf4:	6861      	ldr	r1, [r4, #4]
 8001cf6:	7a22      	ldrb	r2, [r4, #8]
 8001cf8:	466b      	mov	r3, sp
 8001cfa:	c303      	stmia	r3!, {r0, r1}
 8001cfc:	701a      	strb	r2, [r3, #0]

    flash_setup0();
 8001cfe:	f7ff ff33 	bl	8001b68 <flash_setup0>
    flash_unlock();
 8001d02:	f7ff ff55 	bl	8001bb0 <flash_unlock>

    if(flash_burn((uint32_t)&rom_secrets->ae_serial_number[0], tmp[0])) {
 8001d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001d0a:	4809      	ldr	r0, [pc, #36]	; (8001d30 <flash_save_ae_serial+0x4c>)
 8001d0c:	f004 fca8 	bl	8006660 <__flash_burn_veneer>
 8001d10:	b110      	cbz	r0, 8001d18 <flash_save_ae_serial+0x34>
        INCONSISTENT("fail1");
 8001d12:	4808      	ldr	r0, [pc, #32]	; (8001d34 <flash_save_ae_serial+0x50>)
 8001d14:	f7fe fb5c 	bl	80003d0 <fatal_error>
    }
    if(flash_burn((uint32_t)&rom_secrets->ae_serial_number[1], tmp[1])) {
 8001d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001d1c:	4806      	ldr	r0, [pc, #24]	; (8001d38 <flash_save_ae_serial+0x54>)
 8001d1e:	f004 fc9f 	bl	8006660 <__flash_burn_veneer>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d1f5      	bne.n	8001d12 <flash_save_ae_serial+0x2e>
        INCONSISTENT("fail2");
    }

    flash_lock();
}
 8001d26:	b004      	add	sp, #16
 8001d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    if(flash_burn((uint32_t)&rom_secrets->ae_serial_number[1], tmp[1])) {
        INCONSISTENT("fail2");
    }

    flash_lock();
 8001d2c:	f7ff bf38 	b.w	8001ba0 <flash_lock>
 8001d30:	08007840 	.word	0x08007840
 8001d34:	08006680 	.word	0x08006680
 8001d38:	08007848 	.word	0x08007848

08001d3c <flash_save_bag_number>:
//
// Write bag number (probably a string)
//
    void
flash_save_bag_number(const uint8_t new_number[32])
{
 8001d3c:	b570      	push	{r4, r5, r6, lr}
 8001d3e:	4605      	mov	r5, r0

    uint32_t dest = (uint32_t)&rom_secrets->bag_number[0];
    uint64_t *src = (uint64_t *)new_number;

    flash_setup0();
 8001d40:	f7ff ff12 	bl	8001b68 <flash_setup0>
    flash_unlock();
 8001d44:	f7ff ff34 	bl	8001bb0 <flash_unlock>
//
    void
flash_save_bag_number(const uint8_t new_number[32])
{

    uint32_t dest = (uint32_t)&rom_secrets->bag_number[0];
 8001d48:	4c09      	ldr	r4, [pc, #36]	; (8001d70 <flash_save_bag_number+0x34>)
    flash_setup0();
    flash_unlock();

    // NOTE: can only write once! No provision for read/check, and write
    // when non-ones will fail.
    for(int i=0; i<(32/8); i++, dest+=8, src++) {
 8001d4a:	4e0a      	ldr	r6, [pc, #40]	; (8001d74 <flash_save_bag_number+0x38>)
 8001d4c:	3d08      	subs	r5, #8
        if(flash_burn(dest, *src)) {
 8001d4e:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8001d52:	4620      	mov	r0, r4
 8001d54:	f004 fc84 	bl	8006660 <__flash_burn_veneer>
 8001d58:	b110      	cbz	r0, 8001d60 <flash_save_bag_number+0x24>
            INCONSISTENT("fail write");
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <flash_save_bag_number+0x3c>)
 8001d5c:	f7fe fb38 	bl	80003d0 <fatal_error>
    flash_setup0();
    flash_unlock();

    // NOTE: can only write once! No provision for read/check, and write
    // when non-ones will fail.
    for(int i=0; i<(32/8); i++, dest+=8, src++) {
 8001d60:	3408      	adds	r4, #8
 8001d62:	42b4      	cmp	r4, r6
 8001d64:	d1f3      	bne.n	8001d4e <flash_save_bag_number+0x12>
            INCONSISTENT("fail write");
        }
    }

    flash_lock();
}
 8001d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(flash_burn(dest, *src)) {
            INCONSISTENT("fail write");
        }
    }

    flash_lock();
 8001d6a:	f7ff bf19 	b.w	8001ba0 <flash_lock>
 8001d6e:	bf00      	nop
 8001d70:	08007850 	.word	0x08007850
 8001d74:	08007870 	.word	0x08007870
 8001d78:	08006680 	.word	0x08006680

08001d7c <flash_setup>:
//
// This is really a state-machine, to recover boards that are booted w/ missing AE chip.
//
    void
flash_setup(void)
{
 8001d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    flash_setup0();

    STATIC_ASSERT(sizeof(rom_secrets_t) <= 2048);

    // see if we have picked a pairing secret yet.
    bool blank_ps = check_all_ones(rom_secrets->pairing_secret, 32);
 8001d80:	4d2e      	ldr	r5, [pc, #184]	; (8001e3c <flash_setup+0xc0>)
//
// This is really a state-machine, to recover boards that are booted w/ missing AE chip.
//
    void
flash_setup(void)
{
 8001d82:	b088      	sub	sp, #32
    flash_setup0();
 8001d84:	f7ff fef0 	bl	8001b68 <flash_setup0>

    STATIC_ASSERT(sizeof(rom_secrets_t) <= 2048);

    // see if we have picked a pairing secret yet.
    bool blank_ps = check_all_ones(rom_secrets->pairing_secret, 32);
 8001d88:	2120      	movs	r1, #32
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f000 f8b2 	bl	8001ef4 <check_all_ones>
    bool blank_xor = check_all_ones(rom_secrets->pairing_secret_xor, 32);
 8001d90:	2120      	movs	r1, #32
    flash_setup0();

    STATIC_ASSERT(sizeof(rom_secrets_t) <= 2048);

    // see if we have picked a pairing secret yet.
    bool blank_ps = check_all_ones(rom_secrets->pairing_secret, 32);
 8001d92:	4680      	mov	r8, r0
    bool blank_xor = check_all_ones(rom_secrets->pairing_secret_xor, 32);
 8001d94:	482a      	ldr	r0, [pc, #168]	; (8001e40 <flash_setup+0xc4>)
 8001d96:	f000 f8ad 	bl	8001ef4 <check_all_ones>
    bool blank_ae = (~rom_secrets->ae_serial_number[0] == 0);
 8001d9a:	e9d5 6710 	ldrd	r6, r7, [r5, #64]	; 0x40

    STATIC_ASSERT(sizeof(rom_secrets_t) <= 2048);

    // see if we have picked a pairing secret yet.
    bool blank_ps = check_all_ones(rom_secrets->pairing_secret, 32);
    bool blank_xor = check_all_ones(rom_secrets->pairing_secret_xor, 32);
 8001d9e:	4604      	mov	r4, r0
    bool blank_ae = (~rom_secrets->ae_serial_number[0] == 0);

    if(blank_ps) {
 8001da0:	f1b8 0f00 	cmp.w	r8, #0
 8001da4:	d001      	beq.n	8001daa <flash_setup+0x2e>
        // get some good entropy, save it.
        pick_pairing_secret();
 8001da6:	f7ff ff39 	bl	8001c1c <pick_pairing_secret>

        blank_ps = false;
    }

    if(blank_xor || blank_ae) {
 8001daa:	b924      	cbnz	r4, 8001db6 <flash_setup+0x3a>
 8001dac:	3701      	adds	r7, #1
 8001dae:	bf08      	it	eq
 8001db0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8001db4:	d121      	bne.n	8001dfa <flash_setup+0x7e>

        // configure and lock-down the ATECC508A
        int rv = ae_setup_config();
 8001db6:	f001 f801 	bl	8002dbc <ae_setup_config>

        if(rv) {
 8001dba:	b120      	cbz	r0, 8001dc6 <flash_setup+0x4a>
            // Hardware fail speaking to AE chip ... be careful not to brick here.
            // Do not continue!! We might fix the board, or add missing pullup, etc.
            oled_show(screen_brick);
 8001dbc:	4821      	ldr	r0, [pc, #132]	; (8001e44 <flash_setup+0xc8>)
 8001dbe:	f7fe ff75 	bl	8000cac <oled_show>
 8001dc2:	bf30      	wfi
 8001dc4:	e7fd      	b.n	8001dc2 <flash_setup+0x46>
            LOCKUP_FOREVER();
        }

        if(blank_xor) {
 8001dc6:	b19c      	cbz	r4, 8001df0 <flash_setup+0x74>
    // BUT: we are using to mark the 2nd half of a two-phase commit w.r.t AE setup

    uint64_t *src = (uint64_t *)&rom_secrets->pairing_secret;
    uint32_t dest = (uint32_t)&rom_secrets->pairing_secret_xor;

    flash_unlock();
 8001dc8:	f7ff fef2 	bl	8001bb0 <flash_unlock>
 8001dcc:	4c1e      	ldr	r4, [pc, #120]	; (8001e48 <flash_setup+0xcc>)
    for(int i=0; i<(32/8); i++, dest+=8, src++) {
 8001dce:	4d1f      	ldr	r5, [pc, #124]	; (8001e4c <flash_setup+0xd0>)
 8001dd0:	f104 0028 	add.w	r0, r4, #40	; 0x28
        uint64_t    val = ~(*src);

        if(flash_burn(dest, val)) {
 8001dd4:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8001dd8:	43d2      	mvns	r2, r2
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	f004 fc40 	bl	8006660 <__flash_burn_veneer>
 8001de0:	b110      	cbz	r0, 8001de8 <flash_setup+0x6c>
            INCONSISTENT("flash xor fail");
 8001de2:	481b      	ldr	r0, [pc, #108]	; (8001e50 <flash_setup+0xd4>)
 8001de4:	f7fe faf4 	bl	80003d0 <fatal_error>

    uint64_t *src = (uint64_t *)&rom_secrets->pairing_secret;
    uint32_t dest = (uint32_t)&rom_secrets->pairing_secret_xor;

    flash_unlock();
    for(int i=0; i<(32/8); i++, dest+=8, src++) {
 8001de8:	42ac      	cmp	r4, r5
 8001dea:	d1f1      	bne.n	8001dd0 <flash_setup+0x54>

        if(flash_burn(dest, val)) {
            INCONSISTENT("flash xor fail");
        }
    }
    flash_lock();
 8001dec:	f7ff fed8 	bl	8001ba0 <flash_lock>
            // write secret again, complemented, to indicate successful AE programming
            confirm_pairing_secret();
        }

        // real power cycle required now.
        oled_show(screen_replug);
 8001df0:	4818      	ldr	r0, [pc, #96]	; (8001e54 <flash_setup+0xd8>)
 8001df2:	f7fe ff5b 	bl	8000cac <oled_show>
 8001df6:	bf30      	wfi
 8001df8:	e7fd      	b.n	8001df6 <flash_setup+0x7a>
    }

    if(!blank_ps && !blank_xor) {
        // check the XOR value also written: 2 phase commit
        uint8_t tmp[32];
        memcpy(tmp, rom_secrets->pairing_secret, 32);
 8001dfa:	4d10      	ldr	r5, [pc, #64]	; (8001e3c <flash_setup+0xc0>)
 8001dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfe:	466c      	mov	r4, sp
 8001e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <flash_setup+0xdc>)
bool check_equal(const void *aV, const void *bV, int len);

// XOR-mixin more bytes; acc = acc XOR more for each byte
void static inline xor_mixin(uint8_t *acc, const uint8_t *more, int len)
{
	for(; len; len--, more++, acc++) {
 8001e0c:	4c13      	ldr	r4, [pc, #76]	; (8001e5c <flash_setup+0xe0>)
 8001e0e:	466b      	mov	r3, sp
 8001e10:	4668      	mov	r0, sp
		*(acc) ^= *(more);
 8001e12:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001e16:	781d      	ldrb	r5, [r3, #0]
bool check_equal(const void *aV, const void *bV, int len);

// XOR-mixin more bytes; acc = acc XOR more for each byte
void static inline xor_mixin(uint8_t *acc, const uint8_t *more, int len)
{
	for(; len; len--, more++, acc++) {
 8001e18:	42a2      	cmp	r2, r4
		*(acc) ^= *(more);
 8001e1a:	ea81 0105 	eor.w	r1, r1, r5
 8001e1e:	f803 1b01 	strb.w	r1, [r3], #1
bool check_equal(const void *aV, const void *bV, int len);

// XOR-mixin more bytes; acc = acc XOR more for each byte
void static inline xor_mixin(uint8_t *acc, const uint8_t *more, int len)
{
	for(; len; len--, more++, acc++) {
 8001e22:	d1f6      	bne.n	8001e12 <flash_setup+0x96>
        xor_mixin(tmp, rom_secrets->pairing_secret_xor, 32);

        if(!check_all_ones(tmp, 32)) {
 8001e24:	2120      	movs	r1, #32
 8001e26:	f000 f865 	bl	8001ef4 <check_all_ones>
 8001e2a:	b920      	cbnz	r0, 8001e36 <flash_setup+0xba>
            oled_show(screen_corrupt);
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <flash_setup+0xe4>)
 8001e2e:	f7fe ff3d 	bl	8000cac <oled_show>
 8001e32:	bf30      	wfi
 8001e34:	e7fd      	b.n	8001e32 <flash_setup+0xb6>
    // That's fine if we intend to ship units locked already.
    
    // Do NOT do write every boot, as it might wear-out
    // the flash bits in OB.

}
 8001e36:	b008      	add	sp, #32
 8001e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e3c:	08007800 	.word	0x08007800
 8001e40:	08007820 	.word	0x08007820
 8001e44:	08006a44 	.word	0x08006a44
 8001e48:	080077f8 	.word	0x080077f8
 8001e4c:	08007818 	.word	0x08007818
 8001e50:	08006680 	.word	0x08006680
 8001e54:	080069e3 	.word	0x080069e3
 8001e58:	0800781f 	.word	0x0800781f
 8001e5c:	0800783f 	.word	0x0800783f
 8001e60:	08006cb4 	.word	0x08006cb4

08001e64 <flash_lockdown_hard>:
// 
// This is a one-way trip. Might need power cycle to (fully?) take effect.
//
    void
flash_lockdown_hard(uint8_t rdp_level_code)
{
 8001e64:	b510      	push	{r4, lr}
 8001e66:	4604      	mov	r4, r0
    flash_setup0();
 8001e68:	f7ff fe7e 	bl	8001b68 <flash_setup0>

    // see FLASH_OB_WRPConfig()

    flash_ob_lock(false);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff feb7 	bl	8001be0 <flash_ob_lock>
        // lock first 32k against any writes
        FLASH->WRP1AR = (num_pages_locked << 16);
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <flash_lockdown_hard+0x2c>)
 8001e74:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c
        FLASH->WRP1BR = 0xff;      // unused.
 8001e7a:	22ff      	movs	r2, #255	; 0xff
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
        FLASH->WRP2AR = 0xff;      // unused.
 8001e7e:	64da      	str	r2, [r3, #76]	; 0x4c
        FLASH->WRP2BR = 0xff;      // unused.
 8001e80:	651a      	str	r2, [r3, #80]	; 0x50
        FLASH->PCROP2ER = (1<<31);      // set PCROP_RDP bit, since maybe we need to?
        FLASH->PCROP2SR = 0xffff;
#endif

        // set protection level
        FLASH->OPTR = 0xffeff800 | rdp_level_code;    // select level X, other values as observed
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <flash_lockdown_hard+0x30>)
 8001e84:	4322      	orrs	r2, r4
 8001e86:	621a      	str	r2, [r3, #32]

    flash_ob_lock(true);
}
 8001e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e8c:	f7ff bdfc 	b.w	8001a88 <flash_ob_lock.part.1>
 8001e90:	40022000 	.word	0x40022000
 8001e94:	ffeff800 	.word	0xffeff800

08001e98 <record_highwater_version>:

// record_highwater_version()
//
    int
record_highwater_version(const uint8_t timestamp[8])
{
 8001e98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;

    ASSERT(timestamp[0] < 0x40);
    ASSERT(timestamp[0] >= 0x10);
 8001e9a:	7803      	ldrb	r3, [r0, #0]
 8001e9c:	3b10      	subs	r3, #16
 8001e9e:	2b2f      	cmp	r3, #47	; 0x2f

// record_highwater_version()
//
    int
record_highwater_version(const uint8_t timestamp[8])
{
 8001ea0:	4605      	mov	r5, r0
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;

    ASSERT(timestamp[0] < 0x40);
    ASSERT(timestamp[0] >= 0x10);
 8001ea2:	d902      	bls.n	8001eaa <record_highwater_version+0x12>
    int
record_highwater_version(const uint8_t timestamp[8])
{
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;

    ASSERT(timestamp[0] < 0x40);
 8001ea4:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <record_highwater_version+0x50>)
 8001ea6:	f7fe fa93 	bl	80003d0 <fatal_error>
 8001eaa:	4c10      	ldr	r4, [pc, #64]	; (8001eec <record_highwater_version+0x54>)
    ASSERT(timestamp[0] >= 0x10);

    // just write to first blank slot we can find.
    for(int i=0; i<NUM_OPT_SLOTS; i++, otp+=8) {
 8001eac:	4e10      	ldr	r6, [pc, #64]	; (8001ef0 <record_highwater_version+0x58>)
        if(check_all_ones(otp, 8)) {
 8001eae:	2108      	movs	r1, #8
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f000 f81f 	bl	8001ef4 <check_all_ones>
 8001eb6:	b180      	cbz	r0, 8001eda <record_highwater_version+0x42>
            // here.
            uint64_t val = 0;
            memcpy(&val, timestamp, 8);
 8001eb8:	6869      	ldr	r1, [r5, #4]
 8001eba:	6828      	ldr	r0, [r5, #0]
 8001ebc:	466b      	mov	r3, sp
 8001ebe:	c303      	stmia	r3!, {r0, r1}

            flash_setup0();
 8001ec0:	f7ff fe52 	bl	8001b68 <flash_setup0>

            flash_unlock();
 8001ec4:	f7ff fe74 	bl	8001bb0 <flash_unlock>
                flash_burn((uint32_t)otp, val);
 8001ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f004 fbc7 	bl	8006660 <__flash_burn_veneer>
            flash_lock();
 8001ed2:	f7ff fe65 	bl	8001ba0 <flash_lock>

            return 0;
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	e003      	b.n	8001ee2 <record_highwater_version+0x4a>

    ASSERT(timestamp[0] < 0x40);
    ASSERT(timestamp[0] >= 0x10);

    // just write to first blank slot we can find.
    for(int i=0; i<NUM_OPT_SLOTS; i++, otp+=8) {
 8001eda:	3408      	adds	r4, #8
 8001edc:	42b4      	cmp	r4, r6
 8001ede:	d1e6      	bne.n	8001eae <record_highwater_version+0x16>
            return 0;
        }
    }

    // no space.
    return 1;
 8001ee0:	2001      	movs	r0, #1
}
 8001ee2:	b002      	add	sp, #8
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}
 8001ee6:	bf00      	nop
 8001ee8:	08006686 	.word	0x08006686
 8001eec:	1fff7000 	.word	0x1fff7000
 8001ef0:	1fff7400 	.word	0x1fff7400

08001ef4 <check_all_ones>:
//
// Return T if all bytes are 0xFF
//
	bool
check_all_ones(const void *ptrV, int len)
{
 8001ef4:	4401      	add	r1, r0
	uint8_t rv = 0xff;
 8001ef6:	23ff      	movs	r3, #255	; 0xff
	const uint8_t *ptr = (const uint8_t *)ptrV;

	for(; len; len--, ptr++) {
 8001ef8:	4288      	cmp	r0, r1
 8001efa:	d003      	beq.n	8001f04 <check_all_ones+0x10>
		rv &= *ptr;
 8001efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	e7f9      	b.n	8001ef8 <check_all_ones+0x4>
	}

	return (rv == 0xff);
}
 8001f04:	3bff      	subs	r3, #255	; 0xff
 8001f06:	4258      	negs	r0, r3
 8001f08:	4158      	adcs	r0, r3
 8001f0a:	4770      	bx	lr

08001f0c <check_all_zeros>:
//
// Return T if all bytes are 0x00
//
	bool
check_all_zeros(const void *ptrV, int len)
{
 8001f0c:	4401      	add	r1, r0
	uint8_t rv = 0x0;
 8001f0e:	2300      	movs	r3, #0
	const uint8_t *ptr = (const uint8_t *)ptrV;

	for(; len; len--, ptr++) {
 8001f10:	4288      	cmp	r0, r1
 8001f12:	d003      	beq.n	8001f1c <check_all_zeros+0x10>
		rv |= *ptr;
 8001f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	e7f9      	b.n	8001f10 <check_all_zeros+0x4>
	}

	return (rv == 0x00);
}
 8001f1c:	fab3 f083 	clz	r0, r3
 8001f20:	0940      	lsrs	r0, r0, #5
 8001f22:	4770      	bx	lr

08001f24 <check_equal>:
	const uint8_t *left = (const uint8_t *)aV;
	const uint8_t *right = (const uint8_t *)bV;
    uint8_t diff = 0;
    int i;

    for (i = 0; i < len; i++) {
 8001f24:	2300      	movs	r3, #0
//
// Equality check.
//
	bool
check_equal(const void *aV, const void *bV, int len)
{
 8001f26:	b570      	push	{r4, r5, r6, lr}
	const uint8_t *left = (const uint8_t *)aV;
	const uint8_t *right = (const uint8_t *)bV;
    uint8_t diff = 0;
 8001f28:	461c      	mov	r4, r3
    int i;

    for (i = 0; i < len; i++) {
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	da05      	bge.n	8001f3a <check_equal+0x16>
        diff |= (left[i] ^ right[i]);
 8001f2e:	5cc6      	ldrb	r6, [r0, r3]
 8001f30:	5ccd      	ldrb	r5, [r1, r3]
 8001f32:	4075      	eors	r5, r6
 8001f34:	432c      	orrs	r4, r5
	const uint8_t *left = (const uint8_t *)aV;
	const uint8_t *right = (const uint8_t *)bV;
    uint8_t diff = 0;
    int i;

    for (i = 0; i < len; i++) {
 8001f36:	3301      	adds	r3, #1
 8001f38:	e7f7      	b.n	8001f2a <check_equal+0x6>
        diff |= (left[i] ^ right[i]);
    }

    return (diff == 0);
}
 8001f3a:	fab4 f084 	clz	r0, r4
 8001f3e:	0940      	lsrs	r0, r0, #5
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f44 <rng_sample>:
        }

        // Get the new number
        uint32_t rv = RNG->DR;

        if(rv != last_rng_result && rv) {
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <rng_sample+0x20>)
{
    static uint32_t last_rng_result;

    while(1) {
        // Check if data register contains valid random data
        while(!(RNG->SR & RNG_FLAG_DRDY)) {
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <rng_sample+0x24>)
        }

        // Get the new number
        uint32_t rv = RNG->DR;

        if(rv != last_rng_result && rv) {
 8001f48:	6819      	ldr	r1, [r3, #0]

// rng_sample()
//
    uint32_t
rng_sample(void)
{
 8001f4a:	b510      	push	{r4, lr}
    static uint32_t last_rng_result;

    while(1) {
        // Check if data register contains valid random data
        while(!(RNG->SR & RNG_FLAG_DRDY)) {
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	6850      	ldr	r0, [r2, #4]
 8001f50:	07c0      	lsls	r0, r0, #31
 8001f52:	d5fc      	bpl.n	8001f4e <rng_sample+0xa>
            // busy wait; okay to get stuck here... better than failing.
        }

        // Get the new number
        uint32_t rv = RNG->DR;
 8001f54:	68a0      	ldr	r0, [r4, #8]

        if(rv != last_rng_result && rv) {
 8001f56:	4288      	cmp	r0, r1
 8001f58:	d0f9      	beq.n	8001f4e <rng_sample+0xa>
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	d0f7      	beq.n	8001f4e <rng_sample+0xa>
            last_rng_result = rv;
 8001f5e:	6018      	str	r0, [r3, #0]

        // keep trying if not a new number
    }

    // NOT-REACHED
}
 8001f60:	bd10      	pop	{r4, pc}
 8001f62:	bf00      	nop
 8001f64:	100062c0 	.word	0x100062c0
 8001f68:	50060800 	.word	0x50060800

08001f6c <rng_setup>:
// rng_setup()
//
    void
rng_setup(void)
{
    if(RNG->CR & RNG_CR_RNGEN) {
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <rng_setup+0x4c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	0752      	lsls	r2, r2, #29

// rng_setup()
//
    void
rng_setup(void)
{
 8001f72:	b513      	push	{r0, r1, r4, lr}
    if(RNG->CR & RNG_CR_RNGEN) {
 8001f74:	d41d      	bmi.n	8001fb2 <rng_setup+0x46>
        // already setup
        return;
    }

    // Enable the Peripheral
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <rng_setup+0x50>)
 8001f78:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001f7a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8001f7e:	64d1      	str	r1, [r2, #76]	; 0x4c
 8001f80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f82:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001f86:	9201      	str	r2, [sp, #4]
 8001f88:	9a01      	ldr	r2, [sp, #4]

    // Turn on feature.
    RNG->CR |=  RNG_CR_RNGEN;
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f042 0204 	orr.w	r2, r2, #4
 8001f90:	601a      	str	r2, [r3, #0]

    // Sample twice to be sure that we have a 
    // valid RNG result.
    uint32_t chk = rng_sample();
 8001f92:	f7ff ffd7 	bl	8001f44 <rng_sample>
 8001f96:	4604      	mov	r4, r0
    uint32_t chk2 = rng_sample();
 8001f98:	f7ff ffd4 	bl	8001f44 <rng_sample>

    // die if we are clearly not getting random values
    if(chk == 0 || chk == ~0
 8001f9c:	1e63      	subs	r3, r4, #1
 8001f9e:	3303      	adds	r3, #3
 8001fa0:	d804      	bhi.n	8001fac <rng_setup+0x40>
        || chk2 == 0 || chk2 == ~0
 8001fa2:	1e43      	subs	r3, r0, #1
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	d801      	bhi.n	8001fac <rng_setup+0x40>
        || chk == chk2
 8001fa8:	4284      	cmp	r4, r0
 8001faa:	d102      	bne.n	8001fb2 <rng_setup+0x46>
    ) {
        INCONSISTENT("bad rng");
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <rng_setup+0x54>)
 8001fae:	f7fe fa0f 	bl	80003d0 <fatal_error>

        while(1) ;
    }
}
 8001fb2:	b002      	add	sp, #8
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	bf00      	nop
 8001fb8:	50060800 	.word	0x50060800
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08006680 	.word	0x08006680

08001fc4 <rng_buffer>:

// rng_buffer()
//
    void
rng_buffer(uint8_t *result, int len)
{
 8001fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fc6:	4607      	mov	r7, r0
 8001fc8:	460e      	mov	r6, r1
    while(len > 0) {
 8001fca:	460c      	mov	r4, r1
 8001fcc:	1b35      	subs	r5, r6, r4
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	443d      	add	r5, r7
 8001fd2:	dd0c      	ble.n	8001fee <rng_buffer+0x2a>
        uint32_t    t = rng_sample();
 8001fd4:	f7ff ffb6 	bl	8001f44 <rng_sample>

        memcpy(result, &t, MIN(4, len));
 8001fd8:	2c04      	cmp	r4, #4
 8001fda:	4622      	mov	r2, r4
//
    void
rng_buffer(uint8_t *result, int len)
{
    while(len > 0) {
        uint32_t    t = rng_sample();
 8001fdc:	9001      	str	r0, [sp, #4]

        memcpy(result, &t, MIN(4, len));
 8001fde:	bfa8      	it	ge
 8001fe0:	2204      	movge	r2, #4
 8001fe2:	a901      	add	r1, sp, #4
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f004 faf0 	bl	80065ca <memcpy>

        len -= 4;
 8001fea:	3c04      	subs	r4, #4
 8001fec:	e7ee      	b.n	8001fcc <rng_buffer+0x8>
        result += 4;
    }
}
 8001fee:	b003      	add	sp, #12
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ff4 <_send_byte>:
    static inline void
_send_byte(uint8_t ch)
{
    // reset timeout timer (Systick)
    uint32_t    ticks = 0;
    SysTick->VAL = 0;
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <_send_byte+0x24>)

// _send_byte()
//
    static inline void
_send_byte(uint8_t ch)
{
 8001ff6:	b510      	push	{r4, lr}
    // reset timeout timer (Systick)
    uint32_t    ticks = 0;
    SysTick->VAL = 0;
 8001ff8:	2200      	movs	r2, #0

    while(!(MY_UART->ISR & UART_FLAG_TXE)) {
 8001ffa:	4c08      	ldr	r4, [pc, #32]	; (800201c <_send_byte+0x28>)
    static inline void
_send_byte(uint8_t ch)
{
    // reset timeout timer (Systick)
    uint32_t    ticks = 0;
    SysTick->VAL = 0;
 8001ffc:	609a      	str	r2, [r3, #8]

    while(!(MY_UART->ISR & UART_FLAG_TXE)) {
 8001ffe:	220b      	movs	r2, #11
 8002000:	69e1      	ldr	r1, [r4, #28]
 8002002:	0609      	lsls	r1, r1, #24
 8002004:	d404      	bmi.n	8002010 <_send_byte+0x1c>
        // busy-wait until able to send (no fifo?)
        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	03c9      	lsls	r1, r1, #15
 800200a:	d5f9      	bpl.n	8002000 <_send_byte+0xc>
            // failsafe timeout
            ticks += 1;
            if(ticks > 10) break;
 800200c:	3a01      	subs	r2, #1
 800200e:	d1f7      	bne.n	8002000 <_send_byte+0xc>
        }
    }
    MY_UART->TDR = ch;
 8002010:	4b02      	ldr	r3, [pc, #8]	; (800201c <_send_byte+0x28>)
 8002012:	b280      	uxth	r0, r0
 8002014:	8518      	strh	r0, [r3, #40]	; 0x28
 8002016:	bd10      	pop	{r4, pc}
 8002018:	e000e010 	.word	0xe000e010
 800201c:	40004c00 	.word	0x40004c00

08002020 <_send_bits>:

// _send_bits()
//
    static void
_send_bits(uint8_t tx)
{
 8002020:	b570      	push	{r4, r5, r6, lr}
 8002022:	4606      	mov	r6, r0
 8002024:	2508      	movs	r5, #8
    // serialize and send one byte
    uint8_t     mask = 0x1;
 8002026:	2401      	movs	r4, #1

    for(int i=0; i<8; i++, mask <<= 1) {
        uint8_t h = (tx & mask) ? BIT1 : BIT0;
 8002028:	4226      	tst	r6, r4

        _send_byte(h);
 800202a:	bf14      	ite	ne
 800202c:	207f      	movne	r0, #127	; 0x7f
 800202e:	207d      	moveq	r0, #125	; 0x7d
 8002030:	f7ff ffe0 	bl	8001ff4 <_send_byte>
_send_bits(uint8_t tx)
{
    // serialize and send one byte
    uint8_t     mask = 0x1;

    for(int i=0; i<8; i++, mask <<= 1) {
 8002034:	0064      	lsls	r4, r4, #1
 8002036:	3d01      	subs	r5, #1
 8002038:	b2e4      	uxtb	r4, r4
 800203a:	d1f5      	bne.n	8002028 <_send_bits+0x8>
        uint8_t h = (tx & mask) ? BIT1 : BIT0;

        _send_byte(h);
    }
}
 800203c:	bd70      	pop	{r4, r5, r6, pc}

0800203e <_send_serialized>:

// _send_serialized()
//
    static void
_send_serialized(const uint8_t *buf, int len)
{
 800203e:	b570      	push	{r4, r5, r6, lr}
 8002040:	4605      	mov	r5, r0
 8002042:	460e      	mov	r6, r1
    for(int i=0; i<len; i++) {
 8002044:	4604      	mov	r4, r0
 8002046:	1b63      	subs	r3, r4, r5
 8002048:	429e      	cmp	r6, r3
 800204a:	dd04      	ble.n	8002056 <_send_serialized+0x18>
        _send_bits(buf[i]);
 800204c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002050:	f7ff ffe6 	bl	8002020 <_send_bits>
 8002054:	e7f7      	b.n	8002046 <_send_serialized+0x8>
    }
}
 8002056:	bd70      	pop	{r4, r5, r6, pc}

08002058 <_flush_rx>:
//
    static inline void
_flush_rx(void)
{
    // reset timeout timer (Systick)
    SysTick->VAL = 0;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <_flush_rx+0x34>)

    while(!(MY_UART->ISR & UART_FLAG_TC)) {
 800205a:	490d      	ldr	r1, [pc, #52]	; (8002090 <_flush_rx+0x38>)
//
    static inline void
_flush_rx(void)
{
    // reset timeout timer (Systick)
    SysTick->VAL = 0;
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]

    while(!(MY_UART->ISR & UART_FLAG_TC)) {
 8002060:	69ca      	ldr	r2, [r1, #28]
 8002062:	0652      	lsls	r2, r2, #25
 8002064:	d402      	bmi.n	800206c <_flush_rx+0x14>
        // wait for last bit(byte) to be serialized and sent

        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	03d0      	lsls	r0, r2, #15
 800206a:	d5f9      	bpl.n	8002060 <_flush_rx+0x8>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	bf00      	nop
 800207a:	bf00      	nop
    __NOP();
    __NOP();
    __NOP();

    // clear junk in rx buffer
    MY_UART->RQR = USART_RQR_RXFRQ;
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <_flush_rx+0x38>)
 800207e:	2208      	movs	r2, #8
 8002080:	831a      	strh	r2, [r3, #24]

    // clear overrun error
    // clear rx timeout flag
    // clear framing error
    MY_UART->ICR = USART_ICR_ORECF | USART_ICR_RTOCF | USART_ICR_FECF;
 8002082:	f640 020a 	movw	r2, #2058	; 0x80a
 8002086:	621a      	str	r2, [r3, #32]
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010
 8002090:	40004c00 	.word	0x40004c00

08002094 <crc16_chain>:
 * \param[in] data pointer to data for which CRC should be calculated
 * \param[out] crc pointer to 16-bit CRC
 */ 
	static void
crc16_chain(uint8_t length, const uint8_t *data, uint8_t crc[2])
{
 8002094:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;
    
    crc_register = (((uint16_t) crc[0]) & 0x00FF) | (((uint16_t) crc[1]) << 8);
 8002096:	7813      	ldrb	r3, [r2, #0]
 8002098:	7854      	ldrb	r4, [r2, #1]
    
    for (counter = 0; counter < length; counter++) {
 800209a:	460e      	mov	r6, r1
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;
    
    crc_register = (((uint16_t) crc[0]) & 0x00FF) | (((uint16_t) crc[1]) << 8);
 800209c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
    for (counter = 0; counter < length; counter++) {
 80020a0:	1a74      	subs	r4, r6, r1
 80020a2:	b2e4      	uxtb	r4, r4
 80020a4:	42a0      	cmp	r0, r4
 80020a6:	d91a      	bls.n	80020de <crc16_chain+0x4a>
      for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
         data_bit = (data[counter] & shift_register) ? 1 : 0;
 80020a8:	f816 7b01 	ldrb.w	r7, [r6], #1
 80020ac:	2508      	movs	r5, #8
 80020ae:	2401      	movs	r4, #1
         crc_bit = crc_register >> 15;

         // Shift CRC to the left by 1.
         crc_register <<= 1; 

         if ((data_bit ^ crc_bit) != 0)
 80020b0:	4227      	tst	r7, r4
    crc_register = (((uint16_t) crc[0]) & 0x00FF) | (((uint16_t) crc[1]) << 8);
    
    for (counter = 0; counter < length; counter++) {
      for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
         data_bit = (data[counter] & shift_register) ? 1 : 0;
         crc_bit = crc_register >> 15;
 80020b2:	ea4f 3ed3 	mov.w	lr, r3, lsr #15

         // Shift CRC to the left by 1.
         crc_register <<= 1; 

         if ((data_bit ^ crc_bit) != 0)
 80020b6:	bf18      	it	ne
 80020b8:	f04f 0c01 	movne.w	ip, #1
      for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
         data_bit = (data[counter] & shift_register) ? 1 : 0;
         crc_bit = crc_register >> 15;

         // Shift CRC to the left by 1.
         crc_register <<= 1; 
 80020bc:	ea4f 0343 	mov.w	r3, r3, lsl #1

         if ((data_bit ^ crc_bit) != 0)
 80020c0:	bf08      	it	eq
 80020c2:	f04f 0c00 	moveq.w	ip, #0
 80020c6:	45f4      	cmp	ip, lr
      for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
         data_bit = (data[counter] & shift_register) ? 1 : 0;
         crc_bit = crc_register >> 15;

         // Shift CRC to the left by 1.
         crc_register <<= 1; 
 80020c8:	b29b      	uxth	r3, r3

         if ((data_bit ^ crc_bit) != 0)
            crc_register ^= polynom;
 80020ca:	bf1c      	itt	ne
 80020cc:	f483 4300 	eorne.w	r3, r3, #32768	; 0x8000
 80020d0:	f083 0305 	eorne.w	r3, r3, #5
    uint8_t data_bit, crc_bit;
    
    crc_register = (((uint16_t) crc[0]) & 0x00FF) | (((uint16_t) crc[1]) << 8);
    
    for (counter = 0; counter < length; counter++) {
      for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
 80020d4:	0064      	lsls	r4, r4, #1
 80020d6:	3d01      	subs	r5, #1
 80020d8:	b2e4      	uxtb	r4, r4
 80020da:	d1e9      	bne.n	80020b0 <crc16_chain+0x1c>
 80020dc:	e7e0      	b.n	80020a0 <crc16_chain+0xc>
         if ((data_bit ^ crc_bit) != 0)
            crc_register ^= polynom;
      }  
    }
        
    crc[0] = (uint8_t) (crc_register & 0x00FF);
 80020de:	7013      	strb	r3, [r2, #0]
    crc[1] = (uint8_t) (crc_register >> 8);
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	7053      	strb	r3, [r2, #1]
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e6 <ae_check_crc>:

// ae_check_crc()
//
	static bool
ae_check_crc(const uint8_t *data, uint8_t length)
{
 80020e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t obs[2] = { 0, 0 };

	if(data[0] != length) {
 80020e8:	7805      	ldrb	r5, [r0, #0]
// ae_check_crc()
//
	static bool
ae_check_crc(const uint8_t *data, uint8_t length)
{
	uint8_t obs[2] = { 0, 0 };
 80020ea:	2400      	movs	r4, #0

	if(data[0] != length) {
 80020ec:	428d      	cmp	r5, r1

// ae_check_crc()
//
	static bool
ae_check_crc(const uint8_t *data, uint8_t length)
{
 80020ee:	4606      	mov	r6, r0
	uint8_t obs[2] = { 0, 0 };
 80020f0:	f88d 4004 	strb.w	r4, [sp, #4]
 80020f4:	f88d 4005 	strb.w	r4, [sp, #5]

	if(data[0] != length) {
 80020f8:	d113      	bne.n	8002122 <ae_check_crc+0x3c>
		// length is wrong
        STATS(crc_len_error++);
		return false;
	}

	crc16_chain(length-2, data, obs);
 80020fa:	1ea8      	subs	r0, r5, #2

	return (obs[0] == data[length-2] && obs[1] == data[length-1]);
 80020fc:	4435      	add	r5, r6
		// length is wrong
        STATS(crc_len_error++);
		return false;
	}

	crc16_chain(length-2, data, obs);
 80020fe:	aa01      	add	r2, sp, #4
 8002100:	4631      	mov	r1, r6
 8002102:	b2c0      	uxtb	r0, r0
 8002104:	f7ff ffc6 	bl	8002094 <crc16_chain>

	return (obs[0] == data[length-2] && obs[1] == data[length-1]);
 8002108:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800210c:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 8002110:	429a      	cmp	r2, r3
 8002112:	d106      	bne.n	8002122 <ae_check_crc+0x3c>
 8002114:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8002118:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800211c:	1b1b      	subs	r3, r3, r4
 800211e:	425c      	negs	r4, r3
 8002120:	415c      	adcs	r4, r3
	uint8_t obs[2] = { 0, 0 };

	if(data[0] != length) {
		// length is wrong
        STATS(crc_len_error++);
		return false;
 8002122:	4620      	mov	r0, r4
	}

	crc16_chain(length-2, data, obs);

	return (obs[0] == data[length-2] && obs[1] == data[length-1]);
}
 8002124:	b002      	add	sp, #8
 8002126:	bd70      	pop	{r4, r5, r6, pc}

08002128 <ae_wake>:
// Prior to First Command) as an error to any on-going/attempted operation.
//
//
    static void
ae_wake(void)
{
 8002128:	b508      	push	{r3, lr}
    // send zero (all low), delay 2.5ms
    _send_byte(0x00);
 800212a:	2000      	movs	r0, #0
 800212c:	f7ff ff62 	bl	8001ff4 <_send_byte>

    delay_us(2500);     // measured: ~2.9ms
 8002130:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002134:	f000 ffbe 	bl	80030b4 <delay_us>

    _flush_rx();
}
 8002138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // send zero (all low), delay 2.5ms
    _send_byte(0x00);

    delay_us(2500);     // measured: ~2.9ms

    _flush_rx();
 800213c:	f7ff bf8c 	b.w	8002058 <_flush_rx>

08002140 <ae_send_idle>:

// ae_send_idle()
//
	static void
ae_send_idle(void)
{
 8002140:	b508      	push	{r3, lr}
	// "The ATECC508A goes into the idle mode and ignores all subsequent
	// I/O transitions until the next wake flag. The contents of TempKey
	// and RNG Seed registers are retained."
    ae_wake();
 8002142:	f7ff fff1 	bl	8002128 <ae_wake>

    _send_bits(IOFLAG_IDLE);
 8002146:	20bb      	movs	r0, #187	; 0xbb
}
 8002148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// "The ATECC508A goes into the idle mode and ignores all subsequent
	// I/O transitions until the next wake flag. The contents of TempKey
	// and RNG Seed registers are retained."
    ae_wake();

    _send_bits(IOFLAG_IDLE);
 800214c:	f7ff bf68 	b.w	8002020 <_send_bits>

08002150 <ae_read_response>:
// We ignore extra bytes not expected, and always read until a timeout.
// Cmds to chip can be up to 155 bytes, but not clear what max len for responses.
//
    static int
ae_read_response(uint8_t *buf, int max_len)
{
 8002150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int max_expect = (max_len+1) * 8;
 8002154:	1c4c      	adds	r4, r1, #1
 8002156:	00e4      	lsls	r4, r4, #3
// We ignore extra bytes not expected, and always read until a timeout.
// Cmds to chip can be up to 155 bytes, but not clear what max len for responses.
//
    static int
ae_read_response(uint8_t *buf, int max_len)
{
 8002158:	af00      	add	r7, sp, #0
 800215a:	4605      	mov	r5, r0
    int max_expect = (max_len+1) * 8;
    uint8_t raw[max_expect];
 800215c:	ebad 0d04 	sub.w	sp, sp, r4

    // tell chip to write stuff to bus
    _send_bits(IOFLAG_TX);
 8002160:	2088      	movs	r0, #136	; 0x88
// We ignore extra bytes not expected, and always read until a timeout.
// Cmds to chip can be up to 155 bytes, but not clear what max len for responses.
//
    static int
ae_read_response(uint8_t *buf, int max_len)
{
 8002162:	460e      	mov	r6, r1
    int max_expect = (max_len+1) * 8;
    uint8_t raw[max_expect];

    // tell chip to write stuff to bus
    _send_bits(IOFLAG_TX);
 8002164:	f7ff ff5c 	bl	8002020 <_send_bits>

    // kill first byte which we expect to be IOFLAG_TX echo (0x88)
    _flush_rx();
 8002168:	f7ff ff76 	bl	8002058 <_flush_rx>
    uint32_t    ticks = 0;

    // reset timeout timer (Systick)
    SysTick->VAL = 0;

    while(!(MY_UART->ISR & UART_FLAG_RXNE) && !(MY_UART->ISR & UART_FLAG_RTOF)) {
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <ae_read_response+0xd8>)
_read_byte(void)
{
    uint32_t    ticks = 0;

    // reset timeout timer (Systick)
    SysTick->VAL = 0;
 800216e:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8002230 <ae_read_response+0xe0>

    // It takes between 64 and 131us (tTURNAROUND) for the chip to recover
    // and start sending bits to us. We're blocked on reading
    // them anyway, so no need to delay. Also a danger of overruns here.

    int actual = 0;
 8002172:	2000      	movs	r0, #0
//
    static int
ae_read_response(uint8_t *buf, int max_len)
{
    int max_expect = (max_len+1) * 8;
    uint8_t raw[max_expect];
 8002174:	46e8      	mov	r8, sp
    // It takes between 64 and 131us (tTURNAROUND) for the chip to recover
    // and start sending bits to us. We're blocked on reading
    // them anyway, so no need to delay. Also a danger of overruns here.

    int actual = 0;
    for(uint8_t *p = raw; ; actual++) {
 8002176:	466a      	mov	r2, sp
_read_byte(void)
{
    uint32_t    ticks = 0;

    // reset timeout timer (Systick)
    SysTick->VAL = 0;
 8002178:	4684      	mov	ip, r0
 800217a:	4699      	mov	r9, r3
 800217c:	f8ce c008 	str.w	ip, [lr, #8]
 8002180:	2105      	movs	r1, #5

    while(!(MY_UART->ISR & UART_FLAG_RXNE) && !(MY_UART->ISR & UART_FLAG_RTOF)) {
 8002182:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 8002186:	f01a 0f20 	tst.w	sl, #32
 800218a:	d10c      	bne.n	80021a6 <ae_read_response+0x56>
 800218c:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 8002190:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 8002194:	d107      	bne.n	80021a6 <ae_read_response+0x56>
        // busy-waiting

        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8002196:	f8de a000 	ldr.w	sl, [lr]
 800219a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
 800219e:	d0f0      	beq.n	8002182 <ae_read_response+0x32>
            ticks += 1;
            if(ticks >= 5) {
 80021a0:	3901      	subs	r1, #1
 80021a2:	d1ee      	bne.n	8002182 <ae_read_response+0x32>
 80021a4:	e019      	b.n	80021da <ae_read_response+0x8a>
                return -1;
            }
        }
    }

    if(MY_UART->ISR & UART_FLAG_RXNE) {
 80021a6:	f8d9 a01c 	ldr.w	sl, [r9, #28]
 80021aa:	491f      	ldr	r1, [pc, #124]	; (8002228 <ae_read_response+0xd8>)
 80021ac:	f01a 0f20 	tst.w	sl, #32
 80021b0:	d007      	beq.n	80021c2 <ae_read_response+0x72>
        return MY_UART->RDR & 0x7f;
 80021b2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
        int ch = _read_byte();
        if(ch < 0) {
            break;
        }

        if(actual < max_expect) {
 80021b4:	42a0      	cmp	r0, r4
 80021b6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80021ba:	da0c      	bge.n	80021d6 <ae_read_response+0x86>
            *(p++) = ch;
 80021bc:	7011      	strb	r1, [r2, #0]
 80021be:	3201      	adds	r2, #1
 80021c0:	e009      	b.n	80021d6 <ae_read_response+0x86>
    }

    if(MY_UART->ISR & UART_FLAG_RXNE) {
        return MY_UART->RDR & 0x7f;
    }
    if(MY_UART->ISR & UART_FLAG_RTOF) {
 80021c2:	69cb      	ldr	r3, [r1, #28]
 80021c4:	051b      	lsls	r3, r3, #20
 80021c6:	d503      	bpl.n	80021d0 <ae_read_response+0x80>
        // "fast" timeout reached, clear flag
        MY_UART->ICR = USART_ICR_RTOCF;
 80021c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021cc:	620b      	str	r3, [r1, #32]
 80021ce:	e004      	b.n	80021da <ae_read_response+0x8a>
        return -1;
    }
    INCONSISTENT("rxf");
 80021d0:	4816      	ldr	r0, [pc, #88]	; (800222c <ae_read_response+0xdc>)
 80021d2:	f7fe f8fd 	bl	80003d0 <fatal_error>
    // It takes between 64 and 131us (tTURNAROUND) for the chip to recover
    // and start sending bits to us. We're blocked on reading
    // them anyway, so no need to delay. Also a danger of overruns here.

    int actual = 0;
    for(uint8_t *p = raw; ; actual++) {
 80021d6:	3001      	adds	r0, #1
        }

        if(actual < max_expect) {
            *(p++) = ch;
        }
    }
 80021d8:	e7d0      	b.n	800217c <ae_read_response+0x2c>

    // Sometimes our framing is not perfect.
    // We might get a spurious bit at the leading edge (perhaps an echo
    // of part of the 0x88??) or junk at the end.
    actual &= ~7;
 80021da:	f020 0007 	bic.w	r0, r0, #7
 80021de:	1dc3      	adds	r3, r0, #7
 80021e0:	f108 0207 	add.w	r2, r8, #7
 80021e4:	eb08 0103 	add.w	r1, r8, r3
 80021e8:	462c      	mov	r4, r5
// Return a deserialized byte, or -1 for timeout.
//
    static void
deserialize(const uint8_t *from, int from_len, uint8_t *into, int max_into)
{
    while(from_len > 0) {
 80021ea:	428a      	cmp	r2, r1
 80021ec:	d017      	beq.n	800221e <ae_read_response+0xce>
 80021ee:	f1a2 0c08 	sub.w	ip, r2, #8
 80021f2:	2301      	movs	r3, #1
 80021f4:	f04f 0e00 	mov.w	lr, #0
        uint8_t rv = 0, mask = 0x1;

        for(int i=0; i<8; i++, mask <<= 1) {
            if(from[i] == BIT1) {
 80021f8:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
 80021fc:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
                rv |= mask;
 8002200:	bf08      	it	eq
 8002202:	ea4e 0e03 	orreq.w	lr, lr, r3
deserialize(const uint8_t *from, int from_len, uint8_t *into, int max_into)
{
    while(from_len > 0) {
        uint8_t rv = 0, mask = 0x1;

        for(int i=0; i<8; i++, mask <<= 1) {
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4594      	cmp	ip, r2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	d1f4      	bne.n	80021f8 <ae_read_response+0xa8>
            if(from[i] == BIT1) {
                rv |= mask;
            }
        }

        *(into++) = rv;
 800220e:	f804 eb01 	strb.w	lr, [r4], #1
 8002212:	1b33      	subs	r3, r6, r4
 8002214:	442b      	add	r3, r5
        from += 8;
        from_len -= 8;

        max_into --;
        if(max_into <= 0) break;
 8002216:	2b00      	cmp	r3, #0
 8002218:	f102 0208 	add.w	r2, r2, #8
 800221c:	dce5      	bgt.n	80021ea <ae_read_response+0x9a>
    // We might get a spurious bit at the leading edge (perhaps an echo
    // of part of the 0x88??) or junk at the end.
    actual &= ~7;
    deserialize(raw, actual, buf, max_len);

    return actual / 8;
 800221e:	10c0      	asrs	r0, r0, #3
}
 8002220:	46bd      	mov	sp, r7
 8002222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002226:	bf00      	nop
 8002228:	40004c00 	.word	0x40004c00
 800222c:	08006680 	.word	0x08006680
 8002230:	e000e010 	.word	0xe000e010

08002234 <ae_reset_chip>:
// ae_reset_chip()
//
    void
ae_reset_chip(void)
{
    if(ae_chip_is_setup == AE_CHIP_IS_SETUP) {
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <ae_reset_chip+0x14>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <ae_reset_chip+0x18>)
 800223a:	429a      	cmp	r2, r3
 800223c:	d102      	bne.n	8002244 <ae_reset_chip+0x10>
        // "The ATECC508A goes into the low power sleep mode and ignores all
        // subsequent I/O transitions until the next wake flag. The entire volatile
        // state of the device is reset"
        _send_bits(IOFLAG_SLEEP);
 800223e:	20cc      	movs	r0, #204	; 0xcc
 8002240:	f7ff beee 	b.w	8002020 <_send_bits>
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	100062c4 	.word	0x100062c4
 800224c:	35d25d63 	.word	0x35d25d63

08002250 <ae_setup>:
#ifdef DEV_STATS
    memset(&stats, 0, sizeof(stats));
#endif

    // enable clock to that part of chip
    __HAL_RCC_UART4_CLK_ENABLE();
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <ae_setup+0x54>)
//
// Configure pins. Do not attempt to talk to chip.
//
    void
ae_setup(void)
{
 8002252:	b507      	push	{r0, r1, r2, lr}
#ifdef DEV_STATS
    memset(&stats, 0, sizeof(stats));
#endif

    // enable clock to that part of chip
    __HAL_RCC_UART4_CLK_ENABLE();
 8002254:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002256:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800225a:	659a      	str	r2, [r3, #88]	; 0x58
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	9b01      	ldr	r3, [sp, #4]
    //
    // For max clock error insensitivity:
    // OVER8==0, ONEBIT=1

    // disable UART so some other bits can be set (only while disabled)
    MY_UART->CR1 = 0;
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <ae_setup+0x58>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
    MY_UART->CR1 = 0x1000002d & ~(0
 800226c:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <ae_setup+0x5c>)
 800226e:	601a      	str	r2, [r3, #0]
                                    | USART_CR1_RXNEIE
                                    | USART_CR1_IDLEIE
                                    | USART_CR1_OVER8
                                    | USART_CR1_UE);

    MY_UART->RTOR = 24;                  // timeout in bit periods: 3 chars or so
 8002270:	2218      	movs	r2, #24
 8002272:	615a      	str	r2, [r3, #20]
    MY_UART->CR2 = USART_CR2_RTOEN;      // rx timeout enable
 8002274:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002278:	605a      	str	r2, [r3, #4]
    MY_UART->CR3 = USART_CR3_HDSEL | USART_CR3_ONEBIT;
 800227a:	f640 0208 	movw	r2, #2056	; 0x808
 800227e:	609a      	str	r2, [r3, #8]
    MY_UART->BRR = 0x0000015b;          // 230400 bps 
 8002280:	f240 125b 	movw	r2, #347	; 0x15b
 8002284:	60da      	str	r2, [r3, #12]

    // clear rx timeout flag
    MY_UART->ICR = USART_ICR_RTOCF;
 8002286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800228a:	621a      	str	r2, [r3, #32]

    // finally enable UART
    MY_UART->CR1 |= USART_CR1_UE;
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]
    
    // configure pin A0 to be AF8_UART4, PULL_NONE
    gpio_setup();
 8002294:	f000 ff2c 	bl	80030f0 <gpio_setup>
    
    // mark it as ready
    ae_chip_is_setup = AE_CHIP_IS_SETUP;
 8002298:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <ae_setup+0x60>)
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <ae_setup+0x64>)
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	b003      	add	sp, #12
 80022a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40004c00 	.word	0x40004c00
 80022ac:	1000000c 	.word	0x1000000c
 80022b0:	35d25d63 	.word	0x35d25d63
 80022b4:	100062c4 	.word	0x100062c4

080022b8 <ae_keep_alive>:
//
	void
ae_keep_alive(void)
{
	// To reset the watchdog, (1) put it into idle mode, then (2) wake it.
	ae_send_idle();
 80022b8:	f7ff bf42 	b.w	8002140 <ae_send_idle>

080022bc <ae_read1>:
// Read a one-byte status/error code response from chip. It's wrapped as 4 bytes: 
//	(len=4) (value) (crc16) (crc16)
//
	int
ae_read1(void)
{
 80022bc:	b513      	push	{r0, r1, r4, lr}
 80022be:	2408      	movs	r4, #8
	uint8_t msg[4];

	for(int retry=7; retry >= 0; retry--) {
        // tell it we want to read a response, read it, and deserialize
        int rv = ae_read_response(msg, 4);
 80022c0:	2104      	movs	r1, #4
 80022c2:	eb0d 0001 	add.w	r0, sp, r1
 80022c6:	f7ff ff43 	bl	8002150 <ae_read_response>

        if(rv == 0) {
 80022ca:	4601      	mov	r1, r0
 80022cc:	b918      	cbnz	r0, 80022d6 <ae_read1+0x1a>
            // nothing heard, it's probably still processing
            ERR("not rdy");
            STATS(not_ready++);

            delay_ms(5);
 80022ce:	2005      	movs	r0, #5
 80022d0:	f000 fee2 	bl	8003098 <delay_ms>
            goto try_again;
 80022d4:	e008      	b.n	80022e8 <ae_read1+0x2c>
        }

        if(rv != 4) {
 80022d6:	2804      	cmp	r0, #4
 80022d8:	d106      	bne.n	80022e8 <ae_read1+0x2c>
            goto try_again;
        }

		// Check length and CRC bytes. we will retry a few times
		// if they are wrong.
		if(!ae_check_crc(msg, 4)) {
 80022da:	a801      	add	r0, sp, #4
 80022dc:	f7ff ff03 	bl	80020e6 <ae_check_crc>
 80022e0:	b110      	cbz	r0, 80022e8 <ae_read1+0x2c>
		}

        STATS(last_resp1 = msg[1]);

		// done, and it worked; return the one byte.
		return msg[1];
 80022e2:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80022e6:	e003      	b.n	80022f0 <ae_read1+0x34>
	int
ae_read1(void)
{
	uint8_t msg[4];

	for(int retry=7; retry >= 0; retry--) {
 80022e8:	3c01      	subs	r4, #1
 80022ea:	d1e9      	bne.n	80022c0 <ae_read1+0x4>
	try_again:
        STATS(l1_retry++);
	}

	// fail.
	return -1;
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80022f0:	b002      	add	sp, #8
 80022f2:	bd10      	pop	{r4, pc}

080022f4 <ae_read_n>:
//
// Read and check CRC over N bytes, wrapped in 3-bytes of framing overhead.
//
	int
ae_read_n(uint8_t len, uint8_t *body)
{
 80022f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t tmp[1+len+2];
 80022f8:	1cc6      	adds	r6, r0, #3
 80022fa:	300a      	adds	r0, #10
 80022fc:	f020 0007 	bic.w	r0, r0, #7
//
// Read and check CRC over N bytes, wrapped in 3-bytes of framing overhead.
//
	int
ae_read_n(uint8_t len, uint8_t *body)
{
 8002300:	af00      	add	r7, sp, #0
    uint8_t tmp[1+len+2];
 8002302:	ebad 0d00 	sub.w	sp, sp, r0
//
// Read and check CRC over N bytes, wrapped in 3-bytes of framing overhead.
//
	int
ae_read_n(uint8_t len, uint8_t *body)
{
 8002306:	4688      	mov	r8, r1
    uint8_t tmp[1+len+2];
 8002308:	466c      	mov	r4, sp
 800230a:	f04f 0908 	mov.w	r9, #8

	for(int retry=7; retry >= 0; retry--) {

        int actual = ae_read_response(tmp, len+3);
 800230e:	4631      	mov	r1, r6
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff ff1d 	bl	8002150 <ae_read_response>
        if(actual < 4) {
 8002316:	2803      	cmp	r0, #3
{
    uint8_t tmp[1+len+2];

	for(int retry=7; retry >= 0; retry--) {

        int actual = ae_read_response(tmp, len+3);
 8002318:	4605      	mov	r5, r0
        if(actual < 4) {
 800231a:	dc04      	bgt.n	8002326 <ae_read_n+0x32>

            if(actual == 0) {
 800231c:	b9b8      	cbnz	r0, 800234e <ae_read_n+0x5a>
                // nothing heard, it's probably still processing
                delay_ms(5);
 800231e:	2005      	movs	r0, #5
 8002320:	f000 feba 	bl	8003098 <delay_ms>
 8002324:	e013      	b.n	800234e <ae_read_n+0x5a>
                STATS(short_error++);
            }
            goto try_again;
        }

        uint8_t resp_len = tmp[0];
 8002326:	7823      	ldrb	r3, [r4, #0]
		if(resp_len != (len + 3)) {
 8002328:	429e      	cmp	r6, r3
 800232a:	d004      	beq.n	8002336 <ae_read_n+0x42>
            STATS(len_error++);
            if(resp_len == 4) {
 800232c:	2b04      	cmp	r3, #4
 800232e:	d10e      	bne.n	800234e <ae_read_n+0x5a>
				// Probably an unexpected error. But no way to return a short read, so
				// just print out debug info.
                ERRV(tmp[1], "ae errcode");
                STATS(last_resp1 = tmp[1]);

                return -1;
 8002330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002334:	e011      	b.n	800235a <ae_read_n+0x66>
            }
			ERRV(tmp[0], "wr len");		 // wrong length
			goto try_again;
		}

		if(!ae_check_crc(tmp, actual)) {
 8002336:	b2c1      	uxtb	r1, r0
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff fed4 	bl	80020e6 <ae_check_crc>
 800233e:	b130      	cbz	r0, 800234e <ae_read_n+0x5a>
            STATS(crc_error++);
			goto try_again;
		}

		// normal case: copy out body of message w/o framing
        memcpy(body, tmp+1, actual-3);
 8002340:	1eea      	subs	r2, r5, #3
 8002342:	1c61      	adds	r1, r4, #1
 8002344:	4640      	mov	r0, r8
 8002346:	f004 f940 	bl	80065ca <memcpy>
#ifdef DEV_STATS
        memcpy(stats.last_n_data, body, MIN(32, actual-3));
        stats.last_n_len =  actual-3;
#endif

		return 0;
 800234a:	2000      	movs	r0, #0
 800234c:	e005      	b.n	800235a <ae_read_n+0x66>

	try_again:
        STATS(ln_retry++);
        ae_wake();
 800234e:	f7ff feeb 	bl	8002128 <ae_wake>
	int
ae_read_n(uint8_t len, uint8_t *body)
{
    uint8_t tmp[1+len+2];

	for(int retry=7; retry >= 0; retry--) {
 8002352:	f1b9 0901 	subs.w	r9, r9, #1
 8002356:	d1da      	bne.n	800230e <ae_read_n+0x1a>
 8002358:	e7ea      	b.n	8002330 <ae_read_n+0x3c>
        STATS(ln_retry++);
        ae_wake();
	}

	return -1;
}
 800235a:	46bd      	mov	sp, r7
 800235c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002360 <ae_send_n>:

// ae_send_n()
//
	void
ae_send_n(aeopcode_t opcode, uint8_t p1, uint16_t p2, const uint8_t *data, uint8_t data_len) 
{
 8002360:	b530      	push	{r4, r5, lr}
 8002362:	b085      	sub	sp, #20
 8002364:	461d      	mov	r5, r3
 8002366:	f89d 4020 	ldrb.w	r4, [sp, #32]
		uint8_t	framed_len;
		uint8_t	op;
		uint8_t	p1;
		uint8_t	p2_lsb;
		uint8_t	p2_msb;
	} known = { 
 800236a:	f88d 200c 	strb.w	r2, [sp, #12]
 800236e:	2377      	movs	r3, #119	; 0x77
 8002370:	0a12      	lsrs	r2, r2, #8
 8002372:	f88d 3008 	strb.w	r3, [sp, #8]
 8002376:	1de3      	adds	r3, r4, #7
 8002378:	f88d 3009 	strb.w	r3, [sp, #9]
 800237c:	f88d 200d 	strb.w	r2, [sp, #13]
 8002380:	f88d 000a 	strb.w	r0, [sp, #10]
 8002384:	f88d 100b 	strb.w	r1, [sp, #11]
    STATS(last_op = opcode);
    STATS(last_p1 = p1);
    STATS(last_p2 = p2);

    // important to wake chip at this point.
    ae_wake();
 8002388:	f7ff fece 	bl	8002128 <ae_wake>

    _send_serialized((const uint8_t *)&known, sizeof(known));
 800238c:	2106      	movs	r1, #6
 800238e:	a802      	add	r0, sp, #8
 8002390:	f7ff fe55 	bl	800203e <_send_serialized>

	// CRC will start from frame_len onwards
	uint8_t crc[2] = {0, 0};
 8002394:	2300      	movs	r3, #0
	crc16_chain(sizeof(known)-1, &known.framed_len, crc);
 8002396:	aa01      	add	r2, sp, #4
 8002398:	f10d 0109 	add.w	r1, sp, #9
 800239c:	2005      	movs	r0, #5
    ae_wake();

    _send_serialized((const uint8_t *)&known, sizeof(known));

	// CRC will start from frame_len onwards
	uint8_t crc[2] = {0, 0};
 800239e:	f88d 3004 	strb.w	r3, [sp, #4]
 80023a2:	f88d 3005 	strb.w	r3, [sp, #5]
	crc16_chain(sizeof(known)-1, &known.framed_len, crc);
 80023a6:	f7ff fe75 	bl	8002094 <crc16_chain>

	// insert a variable-length body area (sometimes)
	if(data_len) {
 80023aa:	b144      	cbz	r4, 80023be <ae_send_n+0x5e>
        _send_serialized(data, data_len);
 80023ac:	4621      	mov	r1, r4
 80023ae:	4628      	mov	r0, r5
 80023b0:	f7ff fe45 	bl	800203e <_send_serialized>
		
		crc16_chain(data_len, data, crc);
 80023b4:	aa01      	add	r2, sp, #4
 80023b6:	4629      	mov	r1, r5
 80023b8:	4620      	mov	r0, r4
 80023ba:	f7ff fe6b 	bl	8002094 <crc16_chain>
	}

	// send final CRC bytes
    _send_serialized(crc, 2);
 80023be:	2102      	movs	r1, #2
 80023c0:	a801      	add	r0, sp, #4
 80023c2:	f7ff fe3c 	bl	800203e <_send_serialized>
}
 80023c6:	b005      	add	sp, #20
 80023c8:	bd30      	pop	{r4, r5, pc}

080023ca <ae_send>:

// ae_send()
//
	void
ae_send(aeopcode_t opcode, uint8_t p1, uint16_t p2) 
{
 80023ca:	b507      	push	{r0, r1, r2, lr}
	ae_send_n(opcode, p1, p2, NULL, 0);
 80023cc:	2300      	movs	r3, #0
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	f7ff ffc6 	bl	8002360 <ae_send_n>
}
 80023d4:	b003      	add	sp, #12
 80023d6:	f85d fb04 	ldr.w	pc, [sp], #4

080023da <ae_get_info>:
//
// Do Info(p1=2) command, and return result.
//
	uint16_t
ae_get_info(void)
{
 80023da:	b507      	push	{r0, r1, r2, lr}
	// not doing error checking here
	ae_send(OP_Info, 0x2, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2102      	movs	r1, #2
 80023e0:	2030      	movs	r0, #48	; 0x30
 80023e2:	f7ff fff2 	bl	80023ca <ae_send>

	ae_delay(OP_Info);

	// note: always returns 4 bytes, but most are garbage and unused.
	uint8_t tmp[4];
	ae_read_n(4, tmp);
 80023e6:	a901      	add	r1, sp, #4
 80023e8:	2004      	movs	r0, #4
 80023ea:	f7ff ff83 	bl	80022f4 <ae_read_n>

	return (tmp[0] << 8) | tmp[1];
 80023ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80023f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
 80023f6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80023fa:	b003      	add	sp, #12
 80023fc:	f85d fb04 	ldr.w	pc, [sp], #4

08002400 <ae_load_nonce>:
// Load Tempkey with a specific value. Resulting Tempkey cannot be
// used with many commands/keys, but is needed for signing.
//
	int
ae_load_nonce(const uint8_t nonce[32])
{
 8002400:	b507      	push	{r0, r1, r2, lr}
    // p1=3
	ae_send_n(OP_Nonce, 3, 0, nonce, 32);          // 608a ok
 8002402:	2320      	movs	r3, #32
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	4603      	mov	r3, r0
 800240a:	2103      	movs	r1, #3
 800240c:	2016      	movs	r0, #22
 800240e:	f7ff ffa7 	bl	8002360 <ae_send_n>

	ae_delay(OP_Nonce);

    return ae_read1();
}
 8002412:	b003      	add	sp, #12
 8002414:	f85d eb04 	ldr.w	lr, [sp], #4
    // p1=3
	ae_send_n(OP_Nonce, 3, 0, nonce, 32);          // 608a ok

	ae_delay(OP_Nonce);

    return ae_read1();
 8002418:	f7ff bf50 	b.w	80022bc <ae_read1>

0800241c <ae_pick_nonce>:
// Load Tempkey with a nonce value that we both know, but
// is random and we both know is random! Tricky!
//
	int
ae_pick_nonce(const uint8_t num_in[20], uint8_t tempkey[32])
{
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241e:	b0a9      	sub	sp, #164	; 0xa4
	// We provide some 20 bytes of randomness to chip
	// The chip must provide 32-bytes of random-ness,
	// so no choice in args to OP.Nonce here (due to ReqRandom).
	ae_send_n(OP_Nonce, 0, 0, num_in, 20);
 8002420:	2200      	movs	r2, #0
 8002422:	2614      	movs	r6, #20
 8002424:	4603      	mov	r3, r0
// Load Tempkey with a nonce value that we both know, but
// is random and we both know is random! Tricky!
//
	int
ae_pick_nonce(const uint8_t num_in[20], uint8_t tempkey[32])
{
 8002426:	4605      	mov	r5, r0
 8002428:	460f      	mov	r7, r1
	// We provide some 20 bytes of randomness to chip
	// The chip must provide 32-bytes of random-ness,
	// so no choice in args to OP.Nonce here (due to ReqRandom).
	ae_send_n(OP_Nonce, 0, 0, num_in, 20);
 800242a:	2016      	movs	r0, #22
 800242c:	4611      	mov	r1, r2
 800242e:	9600      	str	r6, [sp, #0]
 8002430:	f7ff ff96 	bl	8002360 <ae_send_n>

	ae_delay(OP_Nonce);

	// Nonce command returns the RNG result, but not contents of TempKey
	uint8_t randout[32];
	int rv = ae_read_n(32, randout);
 8002434:	a904      	add	r1, sp, #16
 8002436:	2020      	movs	r0, #32
 8002438:	f7ff ff5c 	bl	80022f4 <ae_read_n>
	RET_IF_BAD(rv);
 800243c:	4604      	mov	r4, r0
 800243e:	b9e0      	cbnz	r0, 800247a <ae_pick_nonce+0x5e>
	//
	//		return sha256(rndout + num_in + b'\x16\0\0').digest()
	//
	SHA256_CTX ctx;

    sha256_init(&ctx);
 8002440:	a80c      	add	r0, sp, #48	; 0x30
 8002442:	f003 f999 	bl	8005778 <sha256_init>
    sha256_update(&ctx, randout, 32);
 8002446:	2220      	movs	r2, #32
 8002448:	a904      	add	r1, sp, #16
 800244a:	a80c      	add	r0, sp, #48	; 0x30
 800244c:	f003 f9be 	bl	80057cc <sha256_update>
    sha256_update(&ctx, num_in, 20);
 8002450:	4632      	mov	r2, r6
 8002452:	4629      	mov	r1, r5
 8002454:	a80c      	add	r0, sp, #48	; 0x30
 8002456:	f003 f9b9 	bl	80057cc <sha256_update>
	const uint8_t fixed[3] = { 0x16, 0, 0 };
 800245a:	2316      	movs	r3, #22
    sha256_update(&ctx, fixed, 3);
 800245c:	a903      	add	r1, sp, #12
 800245e:	a80c      	add	r0, sp, #48	; 0x30
 8002460:	2203      	movs	r2, #3
	SHA256_CTX ctx;

    sha256_init(&ctx);
    sha256_update(&ctx, randout, 32);
    sha256_update(&ctx, num_in, 20);
	const uint8_t fixed[3] = { 0x16, 0, 0 };
 8002462:	f88d 300c 	strb.w	r3, [sp, #12]
 8002466:	f88d 400d 	strb.w	r4, [sp, #13]
 800246a:	f88d 400e 	strb.w	r4, [sp, #14]
    sha256_update(&ctx, fixed, 3);
 800246e:	f003 f9ad 	bl	80057cc <sha256_update>

    sha256_final(&ctx, tempkey);
 8002472:	4639      	mov	r1, r7
 8002474:	a80c      	add	r0, sp, #48	; 0x30
 8002476:	f003 f9c7 	bl	8005808 <sha256_final>

	return 0;
}
 800247a:	4620      	mov	r0, r4
 800247c:	b029      	add	sp, #164	; 0xa4
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002480 <ae_is_correct_tempkey>:
// Check that TempKey is holding what we think it does. Uses the MAC
// command over contents of Tempkey and our shared secret.
//
    bool
ae_is_correct_tempkey(const uint8_t expected_tempkey[32])
{
 8002480:	b570      	push	{r4, r5, r6, lr}
    const uint8_t mode =   (1<<6)     // include full serial number
                         | (0<<2)     // TempKey.SourceFlag == 0 == 'rand'
                         | (0<<1)     // first 32 bytes are the shared secret
                         | (1<<0);    // second 32 bytes are tempkey

	ae_send(OP_MAC, mode, KEYNUM_pairing);
 8002482:	2141      	movs	r1, #65	; 0x41
// Check that TempKey is holding what we think it does. Uses the MAC
// command over contents of Tempkey and our shared secret.
//
    bool
ae_is_correct_tempkey(const uint8_t expected_tempkey[32])
{
 8002484:	b0b0      	sub	sp, #192	; 0xc0
 8002486:	4604      	mov	r4, r0
    const uint8_t mode =   (1<<6)     // include full serial number
                         | (0<<2)     // TempKey.SourceFlag == 0 == 'rand'
                         | (0<<1)     // first 32 bytes are the shared secret
                         | (1<<0);    // second 32 bytes are tempkey

	ae_send(OP_MAC, mode, KEYNUM_pairing);
 8002488:	2201      	movs	r2, #1
 800248a:	2008      	movs	r0, #8
 800248c:	f7ff ff9d 	bl	80023ca <ae_send>

	ae_delay(OP_MAC);

    // read chip's answer
	uint8_t resp[32];
	int rv = ae_read_n(32, resp);
 8002490:	a904      	add	r1, sp, #16
 8002492:	2020      	movs	r0, #32
 8002494:	f7ff ff2e 	bl	80022f4 <ae_read_n>
    if(rv) return false;
 8002498:	2800      	cmp	r0, #0
 800249a:	d134      	bne.n	8002506 <ae_is_correct_tempkey+0x86>
//
	void
ae_keep_alive(void)
{
	// To reset the watchdog, (1) put it into idle mode, then (2) wake it.
	ae_send_idle();
 800249c:	f7ff fe50 	bl	8002140 <ae_send_idle>
    ae_keep_alive();

    // Duplicate the hash process, and then compare.
	SHA256_CTX ctx;

    sha256_init(&ctx);
 80024a0:	a814      	add	r0, sp, #80	; 0x50
 80024a2:	f003 f969 	bl	8005778 <sha256_init>
    sha256_update(&ctx, rom_secrets->pairing_secret, 32);
 80024a6:	2220      	movs	r2, #32
 80024a8:	4918      	ldr	r1, [pc, #96]	; (800250c <ae_is_correct_tempkey+0x8c>)
 80024aa:	a814      	add	r0, sp, #80	; 0x50
 80024ac:	f003 f98e 	bl	80057cc <sha256_update>
    sha256_update(&ctx, expected_tempkey, 32);
 80024b0:	2220      	movs	r2, #32
 80024b2:	4621      	mov	r1, r4
 80024b4:	a814      	add	r0, sp, #80	; 0x50
 80024b6:	f003 f989 	bl	80057cc <sha256_update>

	const uint8_t fixed[16] = { OP_MAC, mode, KEYNUM_pairing, 0x0,
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <ae_is_correct_tempkey+0x90>)
 80024bc:	466a      	mov	r2, sp
 80024be:	f103 0610 	add.w	r6, r3, #16
 80024c2:	466d      	mov	r5, sp
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	4614      	mov	r4, r2
 80024ca:	c403      	stmia	r4!, {r0, r1}
 80024cc:	3308      	adds	r3, #8
 80024ce:	42b3      	cmp	r3, r6
 80024d0:	4622      	mov	r2, r4
 80024d2:	d1f7      	bne.n	80024c4 <ae_is_correct_tempkey+0x44>
                                    0,0,0,0, 0,0,0,0,       // eight zeros
                                    0,0,0,                  // three zeros
                                    0xEE };
    sha256_update(&ctx, fixed, sizeof(fixed));
 80024d4:	4629      	mov	r1, r5
 80024d6:	a814      	add	r0, sp, #80	; 0x50
 80024d8:	2210      	movs	r2, #16
 80024da:	f003 f977 	bl	80057cc <sha256_update>

    sha256_update(&ctx, ((const uint8_t *)rom_secrets->ae_serial_number)+4, 4);
 80024de:	a814      	add	r0, sp, #80	; 0x50
 80024e0:	2204      	movs	r2, #4
 80024e2:	490c      	ldr	r1, [pc, #48]	; (8002514 <ae_is_correct_tempkey+0x94>)
 80024e4:	f003 f972 	bl	80057cc <sha256_update>
    sha256_update(&ctx, ((const uint8_t *)rom_secrets->ae_serial_number)+0, 4);
 80024e8:	2204      	movs	r2, #4
 80024ea:	a814      	add	r0, sp, #80	; 0x50
 80024ec:	490a      	ldr	r1, [pc, #40]	; (8002518 <ae_is_correct_tempkey+0x98>)
 80024ee:	f003 f96d 	bl	80057cc <sha256_update>
	// this verifies no problem.
	ASSERT(ctx.datalen + (ctx.bitlen/8) == 32+32+1+1+2+8+3+1+4+2+2);        // == 88
#endif

    uint8_t         actual[32];
    sha256_final(&ctx, actual);
 80024f2:	a90c      	add	r1, sp, #48	; 0x30
 80024f4:	a814      	add	r0, sp, #80	; 0x50
 80024f6:	f003 f987 	bl	8005808 <sha256_final>

    return check_equal(actual, resp, 32);
 80024fa:	2220      	movs	r2, #32
 80024fc:	a904      	add	r1, sp, #16
 80024fe:	a80c      	add	r0, sp, #48	; 0x30
 8002500:	f7ff fd10 	bl	8001f24 <check_equal>
 8002504:	e000      	b.n	8002508 <ae_is_correct_tempkey+0x88>
	ae_delay(OP_MAC);

    // read chip's answer
	uint8_t resp[32];
	int rv = ae_read_n(32, resp);
    if(rv) return false;
 8002506:	2000      	movs	r0, #0

    uint8_t         actual[32];
    sha256_final(&ctx, actual);

    return check_equal(actual, resp, 32);
}
 8002508:	b030      	add	sp, #192	; 0xc0
 800250a:	bd70      	pop	{r4, r5, r6, pc}
 800250c:	08007800 	.word	0x08007800
 8002510:	08006eaf 	.word	0x08006eaf
 8002514:	08007844 	.word	0x08007844
 8002518:	08007840 	.word	0x08007840

0800251c <ae_checkmac>:
// inside the 508a/608a, like use of a specific key, but not for us to
// authenticate the 508a/608a or its contents/state.
//
    int
ae_checkmac(uint8_t keynum, const uint8_t secret[32])
{
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	b0cd      	sub	sp, #308	; 0x134

	// Since this is part of the hash, we want random bytes
	// for our "other data". Also a number for "numin" of nonce
	uint8_t od[32], numin[20];

	rng_buffer(od, sizeof(od));
 8002520:	ad0c      	add	r5, sp, #48	; 0x30
// inside the 508a/608a, like use of a specific key, but not for us to
// authenticate the 508a/608a or its contents/state.
//
    int
ae_checkmac(uint8_t keynum, const uint8_t secret[32])
{
 8002522:	4606      	mov	r6, r0
 8002524:	460c      	mov	r4, r1

	// Since this is part of the hash, we want random bytes
	// for our "other data". Also a number for "numin" of nonce
	uint8_t od[32], numin[20];

	rng_buffer(od, sizeof(od));
 8002526:	4628      	mov	r0, r5
 8002528:	2120      	movs	r1, #32
 800252a:	f7ff fd4b 	bl	8001fc4 <rng_buffer>
	rng_buffer(numin, sizeof(numin));
 800252e:	2114      	movs	r1, #20
 8002530:	a807      	add	r0, sp, #28
 8002532:	f7ff fd47 	bl	8001fc4 <rng_buffer>
//
	void
ae_keep_alive(void)
{
	// To reset the watchdog, (1) put it into idle mode, then (2) wake it.
	ae_send_idle();
 8002536:	f7ff fe03 	bl	8002140 <ae_send_idle>

    // need this one, want to reset watchdog to this point.
	ae_keep_alive();

	// - load tempkey with a known nonce value
	uint8_t zeros[8] = {0};
 800253a:	2300      	movs	r3, #0
	uint8_t tempkey[32];
	rv = ae_pick_nonce(numin, tempkey);
 800253c:	a914      	add	r1, sp, #80	; 0x50
 800253e:	a807      	add	r0, sp, #28

    // need this one, want to reset watchdog to this point.
	ae_keep_alive();

	// - load tempkey with a known nonce value
	uint8_t zeros[8] = {0};
 8002540:	9305      	str	r3, [sp, #20]
 8002542:	9306      	str	r3, [sp, #24]
	uint8_t tempkey[32];
	rv = ae_pick_nonce(numin, tempkey);
 8002544:	f7ff ff6a 	bl	800241c <ae_pick_nonce>
	RET_IF_BAD(rv);
 8002548:	2800      	cmp	r0, #0
 800254a:	d161      	bne.n	8002610 <ae_checkmac+0xf4>

	// - hash nonce and lots of other bits together
	SHA256_CTX ctx;
    sha256_init(&ctx);
 800254c:	a830      	add	r0, sp, #192	; 0xc0
 800254e:	f003 f913 	bl	8005778 <sha256_init>

    // shared secret is 32 bytes from flash
    sha256_update(&ctx, secret, 32);
 8002552:	2220      	movs	r2, #32
 8002554:	4621      	mov	r1, r4
 8002556:	a830      	add	r0, sp, #192	; 0xc0
 8002558:	f003 f938 	bl	80057cc <sha256_update>

    sha256_update(&ctx, tempkey, 32);
 800255c:	2220      	movs	r2, #32
 800255e:	a914      	add	r1, sp, #80	; 0x50
 8002560:	a830      	add	r0, sp, #192	; 0xc0
 8002562:	f003 f933 	bl	80057cc <sha256_update>
    sha256_update(&ctx, &od[0], 4);
 8002566:	2204      	movs	r2, #4
 8002568:	4629      	mov	r1, r5
 800256a:	a830      	add	r0, sp, #192	; 0xc0
 800256c:	f003 f92e 	bl	80057cc <sha256_update>

    sha256_update(&ctx, zeros, 8);
 8002570:	2208      	movs	r2, #8
 8002572:	a905      	add	r1, sp, #20
 8002574:	a830      	add	r0, sp, #192	; 0xc0
 8002576:	f003 f929 	bl	80057cc <sha256_update>

    sha256_update(&ctx, &od[4], 3);
 800257a:	2203      	movs	r2, #3
 800257c:	a90d      	add	r1, sp, #52	; 0x34
 800257e:	a830      	add	r0, sp, #192	; 0xc0
 8002580:	f003 f924 	bl	80057cc <sha256_update>

	uint8_t ee = 0xEE;
 8002584:	23ee      	movs	r3, #238	; 0xee
    sha256_update(&ctx, &ee, 1);
 8002586:	2201      	movs	r2, #1
 8002588:	f10d 010f 	add.w	r1, sp, #15
 800258c:	a830      	add	r0, sp, #192	; 0xc0

    sha256_update(&ctx, zeros, 8);

    sha256_update(&ctx, &od[4], 3);

	uint8_t ee = 0xEE;
 800258e:	f88d 300f 	strb.w	r3, [sp, #15]
    sha256_update(&ctx, &ee, 1);
 8002592:	f003 f91b 	bl	80057cc <sha256_update>
    sha256_update(&ctx, &od[7], 4);
 8002596:	2204      	movs	r2, #4
 8002598:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 800259c:	a830      	add	r0, sp, #192	; 0xc0
 800259e:	f003 f915 	bl	80057cc <sha256_update>

	uint8_t snp[2] = { 0x01, 0x23 };
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <ae_checkmac+0xf8>)
    sha256_update(&ctx, snp, 2);
 80025a4:	2202      	movs	r2, #2

	uint8_t ee = 0xEE;
    sha256_update(&ctx, &ee, 1);
    sha256_update(&ctx, &od[7], 4);

	uint8_t snp[2] = { 0x01, 0x23 };
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	f8ad 3010 	strh.w	r3, [sp, #16]
    sha256_update(&ctx, snp, 2);
 80025ac:	a904      	add	r1, sp, #16
 80025ae:	a830      	add	r0, sp, #192	; 0xc0
 80025b0:	f003 f90c 	bl	80057cc <sha256_update>
    sha256_update(&ctx, &od[11], 2);
 80025b4:	2202      	movs	r2, #2
 80025b6:	f10d 013b 	add.w	r1, sp, #59	; 0x3b
 80025ba:	a830      	add	r0, sp, #192	; 0xc0
 80025bc:	f003 f906 	bl	80057cc <sha256_update>
		uint8_t		resp[32];
		uint8_t		od[13];
	} req;

    // content doesn't matter, but nice and visible:
    memcpy(req.ch3, copyright_msg, 32);
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <ae_checkmac+0xfc>)
 80025c2:	aa1c      	add	r2, sp, #112	; 0x70
 80025c4:	f103 0e20 	add.w	lr, r3, #32
 80025c8:	4617      	mov	r7, r2
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	4614      	mov	r4, r2
 80025d0:	c403      	stmia	r4!, {r0, r1}
 80025d2:	3308      	adds	r3, #8
 80025d4:	4573      	cmp	r3, lr
 80025d6:	4622      	mov	r2, r4
 80025d8:	d1f7      	bne.n	80025ca <ae_checkmac+0xae>
	// this verifies no problem.
	int l = (ctx.blocks * 64) + ctx.npartial;
	ASSERT(l == 32+32+4+8+3+1+4+2+2);			// == 88
#endif

    sha256_final(&ctx, req.resp);
 80025da:	a924      	add	r1, sp, #144	; 0x90
 80025dc:	a830      	add	r0, sp, #192	; 0xc0
 80025de:	f003 f913 	bl	8005808 <sha256_final>
	memcpy(req.od, od, 13);
 80025e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80025e8:	c407      	stmia	r4!, {r0, r1, r2}
 80025ea:	7023      	strb	r3, [r4, #0]

	STATIC_ASSERT(sizeof(req) == 32 + 32 + 13);

	// Give our answer to the chip.
	ae_send_n(OP_CheckMac, 0x01, keynum, (uint8_t *)&req, sizeof(req));
 80025ec:	234d      	movs	r3, #77	; 0x4d
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	4632      	mov	r2, r6
 80025f2:	463b      	mov	r3, r7
 80025f4:	2101      	movs	r1, #1
 80025f6:	2028      	movs	r0, #40	; 0x28
 80025f8:	f7ff feb2 	bl	8002360 <ae_send_n>

	ae_delay(OP_CheckMac);

	rv = ae_read1();
 80025fc:	f7ff fe5e 	bl	80022bc <ae_read1>
	if(rv != 0) {
 8002600:	4604      	mov	r4, r0
 8002602:	b918      	cbnz	r0, 800260c <ae_checkmac+0xf0>
//
	void
ae_keep_alive(void)
{
	// To reset the watchdog, (1) put it into idle mode, then (2) wake it.
	ae_send_idle();
 8002604:	f7ff fd9c 	bl	8002140 <ae_send_idle>
#endif

	// just in case ... always restart watchdog timer.
	ae_keep_alive();

	return 0;
 8002608:	4620      	mov	r0, r4
 800260a:	e001      	b.n	8002610 <ae_checkmac+0xf4>
		if(rv == AE_CHECKMAC_FAIL) {
			ERR("CM fail");				// typical case: our hashs don't match
		} else {
			ERRV(rv, "CheckMac");
		}
		return -1;
 800260c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	// just in case ... always restart watchdog timer.
	ae_keep_alive();

	return 0;
}
 8002610:	b04d      	add	sp, #308	; 0x134
 8002612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002614:	08006ebf 	.word	0x08006ebf
 8002618:	08006ec1 	.word	0x08006ec1

0800261c <ae_pair_unlock>:
// Purpose is to show we are a pair of chips that belong together.
//
	int
ae_pair_unlock()
{
    return ae_checkmac(KEYNUM_pairing, rom_secrets->pairing_secret);
 800261c:	4901      	ldr	r1, [pc, #4]	; (8002624 <ae_pair_unlock+0x8>)
 800261e:	2001      	movs	r0, #1
 8002620:	f7ff bf7c 	b.w	800251c <ae_checkmac>
 8002624:	08007800 	.word	0x08007800

08002628 <ae_sign>:
//
// Sign a message (already digested)
//
	int
ae_sign(uint8_t keynum, uint8_t msg_hash[32], uint8_t signature[64])
{
 8002628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800262a:	4605      	mov	r5, r0
	int rv = ae_load_nonce(msg_hash);
 800262c:	4608      	mov	r0, r1
//
// Sign a message (already digested)
//
	int
ae_sign(uint8_t keynum, uint8_t msg_hash[32], uint8_t signature[64])
{
 800262e:	4614      	mov	r4, r2
	int rv = ae_load_nonce(msg_hash);
 8002630:	f7ff fee6 	bl	8002400 <ae_load_nonce>
	RET_IF_BAD(rv);
 8002634:	4603      	mov	r3, r0
 8002636:	b960      	cbnz	r0, 8002652 <ae_sign+0x2a>

	ae_send_n(OP_Sign, 0x80, keynum, NULL, 0);
 8002638:	9000      	str	r0, [sp, #0]
 800263a:	462a      	mov	r2, r5
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	2041      	movs	r0, #65	; 0x41
 8002640:	f7ff fe8e 	bl	8002360 <ae_send_n>

	ae_delay(OP_Sign);

	rv = ae_read_n(64, signature);
 8002644:	4621      	mov	r1, r4
 8002646:	2040      	movs	r0, #64	; 0x40
	RET_IF_BAD(rv);

	return 0;
}
 8002648:	b003      	add	sp, #12
 800264a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	ae_send_n(OP_Sign, 0x80, keynum, NULL, 0);

	ae_delay(OP_Sign);

	rv = ae_read_n(64, signature);
 800264e:	f7ff be51 	b.w	80022f4 <ae_read_n>
	RET_IF_BAD(rv);

	return 0;
}
 8002652:	b003      	add	sp, #12
 8002654:	bd30      	pop	{r4, r5, pc}

08002656 <ae_hmac32>:
// 508a: Different opcode, OP_HMAC does exactly 32 bytes w/ less steps.
// 608a: Use old SHA256 command, but with new flags.
//
    int
ae_hmac32(uint8_t keynum, const uint8_t msg[32], uint8_t digest[32])
{
 8002656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002658:	460e      	mov	r6, r1
 800265a:	4615      	mov	r5, r2
    return ae_read_n(32, digest);
#endif

#if FOR_608
    // Start SHA w/ HMAC setup
	ae_send(OP_SHA, 4, keynum);        // 4 = HMAC_Init
 800265c:	2104      	movs	r1, #4
 800265e:	4602      	mov	r2, r0
 8002660:	2047      	movs	r0, #71	; 0x47
 8002662:	f7ff feb2 	bl	80023ca <ae_send>

    // expect zero, meaning "ready"
	ae_delay(OP_SHA);
    int rv = ae_read1();
 8002666:	f7ff fe29 	bl	80022bc <ae_read1>
    RET_IF_BAD(rv);
 800266a:	b970      	cbnz	r0, 800268a <ae_hmac32+0x34>

    // send the contents to be hashed
	ae_send_n(OP_SHA, (3<<6) | 2, 32, msg, 32); // 2 = Finalize, 3=Place output
 800266c:	2420      	movs	r4, #32
 800266e:	9400      	str	r4, [sp, #0]
 8002670:	4633      	mov	r3, r6
 8002672:	4622      	mov	r2, r4
 8002674:	21c2      	movs	r1, #194	; 0xc2
 8002676:	2047      	movs	r0, #71	; 0x47
 8002678:	f7ff fe72 	bl	8002360 <ae_send_n>

	ae_delay(OP_SHA);
    
    // read result
    return ae_read_n(32, digest);
 800267c:	4629      	mov	r1, r5
 800267e:	4620      	mov	r0, r4
#endif
}
 8002680:	b002      	add	sp, #8
 8002682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ae_send_n(OP_SHA, (3<<6) | 2, 32, msg, 32); // 2 = Finalize, 3=Place output

	ae_delay(OP_SHA);
    
    // read result
    return ae_read_n(32, digest);
 8002686:	f7ff be35 	b.w	80022f4 <ae_read_n>
#endif
}
 800268a:	b002      	add	sp, #8
 800268c:	bd70      	pop	{r4, r5, r6, pc}

0800268e <ae_get_serial>:
//
// Return the serial number: it's 9 bytes, altho 3 are fixed.
//
	int
ae_get_serial(uint8_t serial[6])
{
 800268e:	b510      	push	{r4, lr}
	ae_send(OP_Read, 0x80, 0x0);
 8002690:	2200      	movs	r2, #0
//
// Return the serial number: it's 9 bytes, altho 3 are fixed.
//
	int
ae_get_serial(uint8_t serial[6])
{
 8002692:	b08c      	sub	sp, #48	; 0x30
	ae_send(OP_Read, 0x80, 0x0);
 8002694:	2180      	movs	r1, #128	; 0x80
//
// Return the serial number: it's 9 bytes, altho 3 are fixed.
//
	int
ae_get_serial(uint8_t serial[6])
{
 8002696:	4604      	mov	r4, r0
	ae_send(OP_Read, 0x80, 0x0);
 8002698:	2002      	movs	r0, #2
 800269a:	f7ff fe96 	bl	80023ca <ae_send>

	ae_delay(OP_Read);

	uint8_t temp[32];
	int rv = ae_read_n(32, temp);
 800269e:	a904      	add	r1, sp, #16
 80026a0:	2020      	movs	r0, #32
 80026a2:	f7ff fe27 	bl	80022f4 <ae_read_n>
	RET_IF_BAD(rv);
 80026a6:	4602      	mov	r2, r0
 80026a8:	b9b0      	cbnz	r0, 80026d8 <ae_get_serial+0x4a>

    // reformat to 9 bytes.
    uint8_t ts[9];
	memcpy(ts, &temp[0], 4);
	memcpy(&ts[4], &temp[8], 5);
 80026aa:	a906      	add	r1, sp, #24
 80026ac:	c903      	ldmia	r1, {r0, r1}
	int rv = ae_read_n(32, temp);
	RET_IF_BAD(rv);

    // reformat to 9 bytes.
    uint8_t ts[9];
	memcpy(ts, &temp[0], 4);
 80026ae:	9b04      	ldr	r3, [sp, #16]
	memcpy(&ts[4], &temp[8], 5);
 80026b0:	9002      	str	r0, [sp, #8]

    // check the hard-coded values
    if((ts[0] != 0x01) || (ts[1] != 0x23) || (ts[8] != 0xEE)) return 1;
 80026b2:	b2d8      	uxtb	r0, r3
 80026b4:	2801      	cmp	r0, #1
	int rv = ae_read_n(32, temp);
	RET_IF_BAD(rv);

    // reformat to 9 bytes.
    uint8_t ts[9];
	memcpy(ts, &temp[0], 4);
 80026b6:	9301      	str	r3, [sp, #4]
	memcpy(&ts[4], &temp[8], 5);
 80026b8:	f88d 100c 	strb.w	r1, [sp, #12]

    // check the hard-coded values
    if((ts[0] != 0x01) || (ts[1] != 0x23) || (ts[8] != 0xEE)) return 1;
 80026bc:	d10e      	bne.n	80026dc <ae_get_serial+0x4e>
 80026be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80026c2:	2b23      	cmp	r3, #35	; 0x23
 80026c4:	d10b      	bne.n	80026de <ae_get_serial+0x50>
 80026c6:	b2cb      	uxtb	r3, r1
 80026c8:	2bee      	cmp	r3, #238	; 0xee
 80026ca:	d108      	bne.n	80026de <ae_get_serial+0x50>

    // save only the unique bits.
    memcpy(serial, ts+2, 6);
 80026cc:	ab0c      	add	r3, sp, #48	; 0x30
 80026ce:	f853 1d2a 	ldr.w	r1, [r3, #-42]!
 80026d2:	6021      	str	r1, [r4, #0]
 80026d4:	889b      	ldrh	r3, [r3, #4]
 80026d6:	80a3      	strh	r3, [r4, #4]
 80026d8:	4610      	mov	r0, r2
 80026da:	e000      	b.n	80026de <ae_get_serial+0x50>
    uint8_t ts[9];
	memcpy(ts, &temp[0], 4);
	memcpy(&ts[4], &temp[8], 5);

    // check the hard-coded values
    if((ts[0] != 0x01) || (ts[1] != 0x23) || (ts[8] != 0xEE)) return 1;
 80026dc:	2001      	movs	r0, #1

    // save only the unique bits.
    memcpy(serial, ts+2, 6);

	return 0;
}
 80026de:	b00c      	add	sp, #48	; 0x30
 80026e0:	bd10      	pop	{r4, pc}
	...

080026e4 <ae_probe>:

// ae_probe()
//
	const char *
ae_probe(void)
{
 80026e4:	b513      	push	{r0, r1, r4, lr}
ae_send_sleep(void)
{
	// "The ATECC508A goes into the low power sleep mode and ignores all
	// subsequent I/O transitions until the next wake flag. The entire volatile
	// state of the device is reset"
    ae_wake();
 80026e6:	f7ff fd1f 	bl	8002128 <ae_wake>

    _send_bits(IOFLAG_SLEEP);
 80026ea:	20cc      	movs	r0, #204	; 0xcc
 80026ec:	f7ff fc98 	bl	8002020 <_send_bits>
{
    // Make it sleep / wake it up.
	ae_send_sleep();

    // Wake it again (to reset state)
    ae_wake();
 80026f0:	f7ff fd1a 	bl	8002128 <ae_wake>

	// do a real read w/ CRC
	// with no command happening, expect 0x11: "After Wake, prior to first command"
    ae_read1();
 80026f4:	f7ff fde2 	bl	80022bc <ae_read1>

	uint8_t chk = ae_read1();
 80026f8:	f7ff fde0 	bl	80022bc <ae_read1>
	if(chk != AE_AFTER_WAKE) return "wk fl";
 80026fc:	b2c0      	uxtb	r0, r0
 80026fe:	2811      	cmp	r0, #17
 8002700:	d10b      	bne.n	800271a <ae_probe+0x36>

    // read the serial number one time
    uint8_t serial[6];
	if(ae_get_serial(serial)) return "no ser";
 8002702:	4668      	mov	r0, sp
 8002704:	f7ff ffc3 	bl	800268e <ae_get_serial>
 8002708:	4604      	mov	r4, r0
 800270a:	b940      	cbnz	r0, 800271e <ae_probe+0x3a>
ae_send_sleep(void)
{
	// "The ATECC508A goes into the low power sleep mode and ignores all
	// subsequent I/O transitions until the next wake flag. The entire volatile
	// state of the device is reset"
    ae_wake();
 800270c:	f7ff fd0c 	bl	8002128 <ae_wake>

    _send_bits(IOFLAG_SLEEP);
 8002710:	20cc      	movs	r0, #204	; 0xcc
 8002712:	f7ff fc85 	bl	8002020 <_send_bits>
	if(ae_get_serial(serial)) return "no ser";

	// put into a low-power mode, might be a bit before we come back
	ae_send_sleep();

	return NULL;
 8002716:	4620      	mov	r0, r4
 8002718:	e002      	b.n	8002720 <ae_probe+0x3c>
	// do a real read w/ CRC
	// with no command happening, expect 0x11: "After Wake, prior to first command"
    ae_read1();

	uint8_t chk = ae_read1();
	if(chk != AE_AFTER_WAKE) return "wk fl";
 800271a:	4802      	ldr	r0, [pc, #8]	; (8002724 <ae_probe+0x40>)
 800271c:	e000      	b.n	8002720 <ae_probe+0x3c>

    // read the serial number one time
    uint8_t serial[6];
	if(ae_get_serial(serial)) return "no ser";
 800271e:	4802      	ldr	r0, [pc, #8]	; (8002728 <ae_probe+0x44>)

	// put into a low-power mode, might be a bit before we come back
	ae_send_sleep();

	return NULL;
}
 8002720:	b002      	add	sp, #8
 8002722:	bd10      	pop	{r4, pc}
 8002724:	08006ee2 	.word	0x08006ee2
 8002728:	08006ee8 	.word	0x08006ee8

0800272c <ae_write_data_slot>:
//
// -- can also lock it.
//
    int
ae_write_data_slot(int slot_num, const uint8_t *data, int len, bool lock_it)
{
 800272c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002730:	461c      	mov	r4, r3
    ASSERT(len >= 32);
 8002732:	f1a2 0320 	sub.w	r3, r2, #32
//
// -- can also lock it.
//
    int
ae_write_data_slot(int slot_num, const uint8_t *data, int len, bool lock_it)
{
 8002736:	b085      	sub	sp, #20
    ASSERT(len >= 32);
 8002738:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
//
// -- can also lock it.
//
    int
ae_write_data_slot(int slot_num, const uint8_t *data, int len, bool lock_it)
{
 800273c:	4605      	mov	r5, r0
 800273e:	af02      	add	r7, sp, #8
 8002740:	460e      	mov	r6, r1
 8002742:	4691      	mov	r9, r2
    ASSERT(len >= 32);
 8002744:	d902      	bls.n	800274c <ae_write_data_slot+0x20>
 8002746:	4830      	ldr	r0, [pc, #192]	; (8002808 <ae_write_data_slot+0xdc>)
 8002748:	f7fd fe42 	bl	80003d0 <fatal_error>
 800274c:	1e53      	subs	r3, r2, #1
    ASSERT(len <= 416);

    for(int blk=0, xlen=len; xlen>0; blk++, xlen-=32) {
        // have to write each "block" of 32-bytes, separately
        // zone => data
        ae_send_n(OP_Write, 0x80|2, (blk<<8) | (slot_num<<3), data+(blk*32), 32);
 800274e:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	fa1f fa8a 	uxth.w	sl, sl
 8002758:	f103 0b01 	add.w	fp, r3, #1
 800275c:	f04f 0800 	mov.w	r8, #0
 8002760:	2320      	movs	r3, #32
 8002762:	ea4a 2208 	orr.w	r2, sl, r8, lsl #8
 8002766:	b292      	uxth	r2, r2
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2182      	movs	r1, #130	; 0x82
 800276c:	eb06 1348 	add.w	r3, r6, r8, lsl #5
 8002770:	2012      	movs	r0, #18
 8002772:	f7ff fdf5 	bl	8002360 <ae_send_n>

        ae_delay(OP_Write);

        int rv = ae_read1();
 8002776:	f7ff fda1 	bl	80022bc <ae_read1>
        RET_IF_BAD(rv);
 800277a:	2800      	cmp	r0, #0
 800277c:	d13f      	bne.n	80027fe <ae_write_data_slot+0xd2>
ae_write_data_slot(int slot_num, const uint8_t *data, int len, bool lock_it)
{
    ASSERT(len >= 32);
    ASSERT(len <= 416);

    for(int blk=0, xlen=len; xlen>0; blk++, xlen-=32) {
 800277e:	f108 0801 	add.w	r8, r8, #1
 8002782:	45c3      	cmp	fp, r8
 8002784:	d1ec      	bne.n	8002760 <ae_write_data_slot+0x34>

        int rv = ae_read1();
        RET_IF_BAD(rv);
    }

    if(lock_it) {
 8002786:	b3cc      	cbz	r4, 80027fc <ae_write_data_slot+0xd0>
        ASSERT(slot_num != 8);          // no support for mega slot 8
 8002788:	2d08      	cmp	r5, #8

        int rv = ae_read1();
        RET_IF_BAD(rv);
    }

    if(lock_it) {
 800278a:	466c      	mov	r4, sp
        ASSERT(slot_num != 8);          // no support for mega slot 8
 800278c:	d0db      	beq.n	8002746 <ae_write_data_slot+0x1a>
        ASSERT(len == 32);              // probably not a limitation here
 800278e:	f1b9 0f20 	cmp.w	r9, #32
 8002792:	d1d8      	bne.n	8002746 <ae_write_data_slot+0x1a>

        // Assume 36/72-byte long slot, which will be partially written, and rest
        // should be ones.
        const int slot_len = (slot_num <= 7) ? 36 : 72;
 8002794:	2d08      	cmp	r5, #8
 8002796:	bfb4      	ite	lt
 8002798:	f04f 0824 	movlt.w	r8, #36	; 0x24
 800279c:	f04f 0848 	movge.w	r8, #72	; 0x48
        uint8_t copy[slot_len];
 80027a0:	f108 0307 	add.w	r3, r8, #7
 80027a4:	f023 0307 	bic.w	r3, r3, #7
 80027a8:	ebad 0d03 	sub.w	sp, sp, r3
 80027ac:	ab02      	add	r3, sp, #8

        memset(copy, 0xff, slot_len);
 80027ae:	4642      	mov	r2, r8
 80027b0:	21ff      	movs	r1, #255	; 0xff
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 ff2f 	bl	8006616 <memset>
        memcpy(copy, data, len);
 80027b8:	f106 0120 	add.w	r1, r6, #32
        // Assume 36/72-byte long slot, which will be partially written, and rest
        // should be ones.
        const int slot_len = (slot_num <= 7) ? 36 : 72;
        uint8_t copy[slot_len];

        memset(copy, 0xff, slot_len);
 80027bc:	4603      	mov	r3, r0
        memcpy(copy, data, len);
 80027be:	4602      	mov	r2, r0
 80027c0:	f856 0b04 	ldr.w	r0, [r6], #4
 80027c4:	f842 0b04 	str.w	r0, [r2], #4
 80027c8:	428e      	cmp	r6, r1
 80027ca:	d1f9      	bne.n	80027c0 <ae_write_data_slot+0x94>

        // calc expected CRC
        uint8_t crc[2] = {0, 0};
 80027cc:	2200      	movs	r2, #0
        crc16_chain(slot_len, copy, crc);
 80027ce:	4619      	mov	r1, r3

        memset(copy, 0xff, slot_len);
        memcpy(copy, data, len);

        // calc expected CRC
        uint8_t crc[2] = {0, 0};
 80027d0:	713a      	strb	r2, [r7, #4]
 80027d2:	717a      	strb	r2, [r7, #5]
        crc16_chain(slot_len, copy, crc);
 80027d4:	4640      	mov	r0, r8
 80027d6:	1d3a      	adds	r2, r7, #4
 80027d8:	f7ff fc5c 	bl	8002094 <crc16_chain>

        // do the lock
        ae_send(OP_Lock, 2 | (slot_num << 2), (crc[1]<<8) | crc[0]);
 80027dc:	793b      	ldrb	r3, [r7, #4]
 80027de:	797a      	ldrb	r2, [r7, #5]
 80027e0:	00a9      	lsls	r1, r5, #2
 80027e2:	f041 0102 	orr.w	r1, r1, #2
 80027e6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80027ea:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80027ee:	2017      	movs	r0, #23
 80027f0:	f7ff fdeb 	bl	80023ca <ae_send>

        ae_delay(OP_Lock);

        int rv = ae_read1();
 80027f4:	f7ff fd62 	bl	80022bc <ae_read1>
 80027f8:	46a5      	mov	sp, r4
 80027fa:	e000      	b.n	80027fe <ae_write_data_slot+0xd2>
        RET_IF_BAD(rv);
    }

    return 0;
 80027fc:	4620      	mov	r0, r4
}
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002806:	bf00      	nop
 8002808:	08006686 	.word	0x08006686

0800280c <ae_gendig_slot>:

// ae_gendig_slot()
//
    int
ae_gendig_slot(int slot_num, const uint8_t slot_contents[32], uint8_t digest[32])
{
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	b0b3      	sub	sp, #204	; 0xcc
 8002810:	4605      	mov	r5, r0
 8002812:	460f      	mov	r7, r1
    // Construct a digest on the device (and here) that depends on the secret
    // contents of a specific slot.
    uint8_t num_in[20], tempkey[32];

	rng_buffer(num_in, sizeof(num_in));
 8002814:	a802      	add	r0, sp, #8
 8002816:	2114      	movs	r1, #20

// ae_gendig_slot()
//
    int
ae_gendig_slot(int slot_num, const uint8_t slot_contents[32], uint8_t digest[32])
{
 8002818:	4616      	mov	r6, r2
    // Construct a digest on the device (and here) that depends on the secret
    // contents of a specific slot.
    uint8_t num_in[20], tempkey[32];

	rng_buffer(num_in, sizeof(num_in));
 800281a:	f7ff fbd3 	bl	8001fc4 <rng_buffer>
	int rv = ae_pick_nonce(num_in, tempkey);
 800281e:	a90e      	add	r1, sp, #56	; 0x38
 8002820:	a802      	add	r0, sp, #8
 8002822:	f7ff fdfb 	bl	800241c <ae_pick_nonce>
    RET_IF_BAD(rv);
 8002826:	2800      	cmp	r0, #0
 8002828:	d13e      	bne.n	80028a8 <ae_gendig_slot+0x9c>

    //using Zone=2="Data" => "KeyID specifies a slot in the Data zone"
    ae_send(OP_GenDig, 0x2, slot_num);
 800282a:	b2aa      	uxth	r2, r5
 800282c:	2102      	movs	r1, #2
 800282e:	2015      	movs	r0, #21
 8002830:	f7ff fdcb 	bl	80023ca <ae_send>

    ae_delay(OP_GenDig);

    rv = ae_read1();
 8002834:	f7ff fd42 	bl	80022bc <ae_read1>
    RET_IF_BAD(rv);
 8002838:	4604      	mov	r4, r0
 800283a:	bba0      	cbnz	r0, 80028a6 <ae_gendig_slot+0x9a>
//
	void
ae_keep_alive(void)
{
	// To reset the watchdog, (1) put it into idle mode, then (2) wake it.
	ae_send_idle();
 800283c:	f7ff fc80 	bl	8002140 <ae_send_idle>
    //   msg = hkey + b'\x15\x02' + ustruct.pack("<H", slot_num)
    //   msg += b'\xee\x01\x23' + (b'\0'*25) + challenge
    //   assert len(msg) == 32+1+1+2+1+2+25+32
    //
	SHA256_CTX ctx;
    sha256_init(&ctx);
 8002840:	a816      	add	r0, sp, #88	; 0x58
 8002842:	f002 ff99 	bl	8005778 <sha256_init>

	uint8_t args[7] = { OP_GenDig, 2, slot_num, 0, 0xEE, 0x01, 0x23 };
 8002846:	2315      	movs	r3, #21
 8002848:	f88d 3000 	strb.w	r3, [sp]
 800284c:	2302      	movs	r3, #2
 800284e:	f88d 3001 	strb.w	r3, [sp, #1]
 8002852:	23ee      	movs	r3, #238	; 0xee
 8002854:	f88d 3004 	strb.w	r3, [sp, #4]
 8002858:	2301      	movs	r3, #1
 800285a:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8_t zeros[25] = { 0 };
 800285e:	2219      	movs	r2, #25
    //   assert len(msg) == 32+1+1+2+1+2+25+32
    //
	SHA256_CTX ctx;
    sha256_init(&ctx);

	uint8_t args[7] = { OP_GenDig, 2, slot_num, 0, 0xEE, 0x01, 0x23 };
 8002860:	2323      	movs	r3, #35	; 0x23
    uint8_t zeros[25] = { 0 };
 8002862:	4621      	mov	r1, r4
 8002864:	a807      	add	r0, sp, #28
    //   assert len(msg) == 32+1+1+2+1+2+25+32
    //
	SHA256_CTX ctx;
    sha256_init(&ctx);

	uint8_t args[7] = { OP_GenDig, 2, slot_num, 0, 0xEE, 0x01, 0x23 };
 8002866:	f88d 3006 	strb.w	r3, [sp, #6]
 800286a:	f88d 5002 	strb.w	r5, [sp, #2]
 800286e:	f88d 4003 	strb.w	r4, [sp, #3]
    uint8_t zeros[25] = { 0 };
 8002872:	f003 fed0 	bl	8006616 <memset>

    sha256_update(&ctx, slot_contents, 32);
 8002876:	2220      	movs	r2, #32
 8002878:	4639      	mov	r1, r7
 800287a:	a816      	add	r0, sp, #88	; 0x58
 800287c:	f002 ffa6 	bl	80057cc <sha256_update>
    sha256_update(&ctx, args, sizeof(args));
 8002880:	2207      	movs	r2, #7
 8002882:	4669      	mov	r1, sp
 8002884:	a816      	add	r0, sp, #88	; 0x58
 8002886:	f002 ffa1 	bl	80057cc <sha256_update>
    sha256_update(&ctx, zeros, sizeof(zeros));
 800288a:	2219      	movs	r2, #25
 800288c:	a907      	add	r1, sp, #28
 800288e:	a816      	add	r0, sp, #88	; 0x58
 8002890:	f002 ff9c 	bl	80057cc <sha256_update>
    sha256_update(&ctx, tempkey, 32);
 8002894:	a90e      	add	r1, sp, #56	; 0x38
 8002896:	a816      	add	r0, sp, #88	; 0x58
 8002898:	2220      	movs	r2, #32
 800289a:	f002 ff97 	bl	80057cc <sha256_update>

    sha256_final(&ctx, digest);
 800289e:	4631      	mov	r1, r6
 80028a0:	a816      	add	r0, sp, #88	; 0x58
 80028a2:	f002 ffb1 	bl	8005808 <sha256_final>
 80028a6:	4620      	mov	r0, r4

    return 0;
}
 80028a8:	b033      	add	sp, #204	; 0xcc
 80028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ac <ae_checkmac_hard>:
// meaning that we both know the shared secret and the state of stuff in
// the 508a is what we expect.
//
    int
ae_checkmac_hard(uint8_t keynum, const uint8_t secret[32])
{
 80028ac:	b500      	push	{lr}
 80028ae:	b089      	sub	sp, #36	; 0x24
    uint8_t     digest[32];

    int rv = ae_gendig_slot(keynum, secret, digest);
 80028b0:	466a      	mov	r2, sp
 80028b2:	f7ff ffab 	bl	800280c <ae_gendig_slot>
    RET_IF_BAD(rv);
 80028b6:	b938      	cbnz	r0, 80028c8 <ae_checkmac_hard+0x1c>

    // NOTE: we use this sometimes when we know the value is wrong, like
    // checking for blank pin codes... so not a huge error/security issue
    // if wrong here.
    if(!ae_is_correct_tempkey(digest)) return -2;
 80028b8:	4668      	mov	r0, sp
 80028ba:	f7ff fde1 	bl	8002480 <ae_is_correct_tempkey>
 80028be:	2800      	cmp	r0, #0

    // worked.
    return 0;
 80028c0:	bf0c      	ite	eq
 80028c2:	f06f 0001 	mvneq.w	r0, #1
 80028c6:	2000      	movne	r0, #0
}
 80028c8:	b009      	add	sp, #36	; 0x24
 80028ca:	f85d fb04 	ldr.w	pc, [sp], #4

080028ce <ae_gendig_counter>:
// the digest should be, and ask the chip to do the same. Verify we match
// using MAC command (done elsewhere).
//
    int
ae_gendig_counter(int counter_num, const uint32_t expected_value, uint8_t digest[32])
{
 80028ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d0:	b0b7      	sub	sp, #220	; 0xdc
 80028d2:	4606      	mov	r6, r0
 80028d4:	9101      	str	r1, [sp, #4]
    uint8_t num_in[20], tempkey[32];

	rng_buffer(num_in, sizeof(num_in));
 80028d6:	2114      	movs	r1, #20
 80028d8:	eb0d 0001 	add.w	r0, sp, r1
// the digest should be, and ask the chip to do the same. Verify we match
// using MAC command (done elsewhere).
//
    int
ae_gendig_counter(int counter_num, const uint32_t expected_value, uint8_t digest[32])
{
 80028dc:	4617      	mov	r7, r2
    uint8_t num_in[20], tempkey[32];

	rng_buffer(num_in, sizeof(num_in));
 80028de:	f7ff fb71 	bl	8001fc4 <rng_buffer>
	int rv = ae_pick_nonce(num_in, tempkey);
 80028e2:	a90a      	add	r1, sp, #40	; 0x28
 80028e4:	a805      	add	r0, sp, #20
 80028e6:	f7ff fd99 	bl	800241c <ae_pick_nonce>
    RET_IF_BAD(rv);
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d147      	bne.n	800297e <ae_gendig_counter+0xb0>

    //using Zone=4="Counter" => "KeyID specifies the monotonic counter ID"
    ae_send(OP_GenDig, 0x4, counter_num);
 80028ee:	b2b2      	uxth	r2, r6
 80028f0:	2104      	movs	r1, #4
 80028f2:	2015      	movs	r0, #21
 80028f4:	f7ff fd69 	bl	80023ca <ae_send>

    ae_delay(OP_GenDig);

    rv = ae_read1();
 80028f8:	f7ff fce0 	bl	80022bc <ae_read1>
    RET_IF_BAD(rv);
 80028fc:	4604      	mov	r4, r0
 80028fe:	2800      	cmp	r0, #0
 8002900:	d13c      	bne.n	800297c <ae_gendig_counter+0xae>
//
	void
ae_keep_alive(void)
{
	// To reset the watchdog, (1) put it into idle mode, then (2) wake it.
	ae_send_idle();
 8002902:	f7ff fc1d 	bl	8002140 <ae_send_idle>
    //   msg = hkey + b'\x15\x02' + ustruct.pack("<H", slot_num)
    //   msg += b'\xee\x01\x23' + (b'\0'*25) + challenge
    //   assert len(msg) == 32+1+1+2+1+2+25+32
    //
	SHA256_CTX ctx;
    sha256_init(&ctx);
 8002906:	a81a      	add	r0, sp, #104	; 0x68
 8002908:	f002 ff36 	bl	8005778 <sha256_init>

    uint8_t zeros[32] = { 0 };
 800290c:	2220      	movs	r2, #32
 800290e:	4621      	mov	r1, r4
 8002910:	a812      	add	r0, sp, #72	; 0x48
 8002912:	f003 fe80 	bl	8006616 <memset>
	uint8_t args[8] = { OP_GenDig, 0x4, counter_num, 0,  0xEE, 0x01, 0x23, 0x0 };
 8002916:	2315      	movs	r3, #21
 8002918:	f88d 300c 	strb.w	r3, [sp, #12]
 800291c:	23ee      	movs	r3, #238	; 0xee
 800291e:	f88d 3010 	strb.w	r3, [sp, #16]
 8002922:	2301      	movs	r3, #1
 8002924:	2504      	movs	r5, #4
 8002926:	f88d 3011 	strb.w	r3, [sp, #17]

    sha256_update(&ctx, zeros, 32);
 800292a:	2220      	movs	r2, #32
    //
	SHA256_CTX ctx;
    sha256_init(&ctx);

    uint8_t zeros[32] = { 0 };
	uint8_t args[8] = { OP_GenDig, 0x4, counter_num, 0,  0xEE, 0x01, 0x23, 0x0 };
 800292c:	2323      	movs	r3, #35	; 0x23

    sha256_update(&ctx, zeros, 32);
 800292e:	a912      	add	r1, sp, #72	; 0x48
 8002930:	a81a      	add	r0, sp, #104	; 0x68
    //
	SHA256_CTX ctx;
    sha256_init(&ctx);

    uint8_t zeros[32] = { 0 };
	uint8_t args[8] = { OP_GenDig, 0x4, counter_num, 0,  0xEE, 0x01, 0x23, 0x0 };
 8002932:	f88d 3012 	strb.w	r3, [sp, #18]
 8002936:	f88d 500d 	strb.w	r5, [sp, #13]
 800293a:	f88d 600e 	strb.w	r6, [sp, #14]
 800293e:	f88d 400f 	strb.w	r4, [sp, #15]
 8002942:	f88d 4013 	strb.w	r4, [sp, #19]

    sha256_update(&ctx, zeros, 32);
 8002946:	f002 ff41 	bl	80057cc <sha256_update>
    sha256_update(&ctx, args, sizeof(args));
 800294a:	2208      	movs	r2, #8
 800294c:	a903      	add	r1, sp, #12
 800294e:	a81a      	add	r0, sp, #104	; 0x68
 8002950:	f002 ff3c 	bl	80057cc <sha256_update>
    sha256_update(&ctx, (const uint8_t *)&expected_value, 4);
 8002954:	462a      	mov	r2, r5
 8002956:	eb0d 0105 	add.w	r1, sp, r5
 800295a:	a81a      	add	r0, sp, #104	; 0x68
 800295c:	f002 ff36 	bl	80057cc <sha256_update>
    sha256_update(&ctx, zeros, 20);
 8002960:	2214      	movs	r2, #20
 8002962:	a912      	add	r1, sp, #72	; 0x48
 8002964:	a81a      	add	r0, sp, #104	; 0x68
 8002966:	f002 ff31 	bl	80057cc <sha256_update>
    sha256_update(&ctx, tempkey, 32);
 800296a:	a90a      	add	r1, sp, #40	; 0x28
 800296c:	a81a      	add	r0, sp, #104	; 0x68
 800296e:	2220      	movs	r2, #32
 8002970:	f002 ff2c 	bl	80057cc <sha256_update>

    sha256_final(&ctx, digest);
 8002974:	4639      	mov	r1, r7
 8002976:	a81a      	add	r0, sp, #104	; 0x68
 8002978:	f002 ff46 	bl	8005808 <sha256_final>
 800297c:	4620      	mov	r0, r4

    return 0;
}
 800297e:	b037      	add	sp, #220	; 0xdc
 8002980:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002982 <ae_get_counter>:
//
// Just read a one-way counter.
//
	int
ae_get_counter(uint32_t *result, uint8_t counter_number)
{
 8002982:	b530      	push	{r4, r5, lr}
    ae_send(OP_Counter, 0x0, counter_number);
 8002984:	460a      	mov	r2, r1
//
// Just read a one-way counter.
//
	int
ae_get_counter(uint32_t *result, uint8_t counter_number)
{
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	4605      	mov	r5, r0
 800298a:	460c      	mov	r4, r1
    ae_send(OP_Counter, 0x0, counter_number);
 800298c:	2024      	movs	r0, #36	; 0x24
 800298e:	2100      	movs	r1, #0
 8002990:	f7ff fd1b 	bl	80023ca <ae_send>
    ae_delay(OP_Counter);

    int rv = ae_read_n(4, (uint8_t *)result);
 8002994:	4629      	mov	r1, r5
 8002996:	2004      	movs	r0, #4
 8002998:	f7ff fcac 	bl	80022f4 <ae_read_n>
    RET_IF_BAD(rv);
 800299c:	b968      	cbnz	r0, 80029ba <ae_get_counter+0x38>
    // IMPORTANT: Always verify the counter's value because otherwise
    // nothing prevents an active MitM changing the value that we think
    // we just read.

    uint8_t     digest[32];
    rv = ae_gendig_counter(counter_number, *result, digest);
 800299e:	4620      	mov	r0, r4
 80029a0:	466a      	mov	r2, sp
 80029a2:	6829      	ldr	r1, [r5, #0]
 80029a4:	f7ff ff93 	bl	80028ce <ae_gendig_counter>
	RET_IF_BAD(rv);
 80029a8:	4604      	mov	r4, r0
 80029aa:	b928      	cbnz	r0, 80029b8 <ae_get_counter+0x36>

    if(!ae_is_correct_tempkey(digest)) {
 80029ac:	4668      	mov	r0, sp
 80029ae:	f7ff fd67 	bl	8002480 <ae_is_correct_tempkey>
 80029b2:	b908      	cbnz	r0, 80029b8 <ae_get_counter+0x36>
        // no legit way for this to happen, so just die.
        fatal_mitm();
 80029b4:	f7fd fd5a 	bl	800046c <fatal_mitm>
    }

    return 0;
 80029b8:	4620      	mov	r0, r4
}
 80029ba:	b009      	add	sp, #36	; 0x24
 80029bc:	bd30      	pop	{r4, r5, pc}

080029be <ae_add_counter>:
// Add-to and return a one-way counter's value. Have to go up in
// single-unit steps, but can we loop.
//
	int
ae_add_counter(uint32_t *result, uint8_t counter_number, int incr)
{
 80029be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c2:	4606      	mov	r6, r0
 80029c4:	b088      	sub	sp, #32
 80029c6:	460d      	mov	r5, r1
 80029c8:	4617      	mov	r7, r2
    for(int i=0; i<incr; i++) {
 80029ca:	2400      	movs	r4, #0
        ae_send(OP_Counter, 0x1, counter_number);
 80029cc:	fa1f f881 	uxth.w	r8, r1
// single-unit steps, but can we loop.
//
	int
ae_add_counter(uint32_t *result, uint8_t counter_number, int incr)
{
    for(int i=0; i<incr; i++) {
 80029d0:	42bc      	cmp	r4, r7
 80029d2:	da0b      	bge.n	80029ec <ae_add_counter+0x2e>
        ae_send(OP_Counter, 0x1, counter_number);
 80029d4:	2101      	movs	r1, #1
 80029d6:	2024      	movs	r0, #36	; 0x24
 80029d8:	4642      	mov	r2, r8
 80029da:	f7ff fcf6 	bl	80023ca <ae_send>
        ae_delay(OP_Counter);
        int rv = ae_read_n(4, (uint8_t *)result);
 80029de:	4631      	mov	r1, r6
 80029e0:	2004      	movs	r0, #4
 80029e2:	f7ff fc87 	bl	80022f4 <ae_read_n>
        RET_IF_BAD(rv);
 80029e6:	b978      	cbnz	r0, 8002a08 <ae_add_counter+0x4a>
// single-unit steps, but can we loop.
//
	int
ae_add_counter(uint32_t *result, uint8_t counter_number, int incr)
{
    for(int i=0; i<incr; i++) {
 80029e8:	3401      	adds	r4, #1
 80029ea:	e7f1      	b.n	80029d0 <ae_add_counter+0x12>
    // IMPORTANT: Always verify the counter's value because otherwise
    // nothing prevents an active MitM changing the value that we think
    // we just read. They could also stop us increamenting the counter.

    uint8_t     digest[32];
    int rv = ae_gendig_counter(counter_number, *result, digest);
 80029ec:	466a      	mov	r2, sp
 80029ee:	6831      	ldr	r1, [r6, #0]
 80029f0:	4628      	mov	r0, r5
 80029f2:	f7ff ff6c 	bl	80028ce <ae_gendig_counter>
	RET_IF_BAD(rv);
 80029f6:	4604      	mov	r4, r0
 80029f8:	b928      	cbnz	r0, 8002a06 <ae_add_counter+0x48>

    if(!ae_is_correct_tempkey(digest)) {
 80029fa:	4668      	mov	r0, sp
 80029fc:	f7ff fd40 	bl	8002480 <ae_is_correct_tempkey>
 8002a00:	b908      	cbnz	r0, 8002a06 <ae_add_counter+0x48>
        // no legit way for this to happen, so just die.
        fatal_mitm();
 8002a02:	f7fd fd33 	bl	800046c <fatal_mitm>
    }

    return 0;
 8002a06:	4620      	mov	r0, r4
}
 8002a08:	b008      	add	sp, #32
 8002a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a0e <ae_encrypted_read32>:
// ae_encrypted_read32()
//
    int
ae_encrypted_read32(int data_slot, int blk,
                    int read_kn, const uint8_t read_key[32], uint8_t data[32])
{
 8002a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	4617      	mov	r7, r2
 8002a16:	4698      	mov	r8, r3
 8002a18:	460e      	mov	r6, r1
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    uint8_t     digest[32];

    ae_pair_unlock();
 8002a1e:	f7ff fdfd 	bl	800261c <ae_pair_unlock>

    int rv = ae_gendig_slot(read_kn, read_key, digest);
 8002a22:	466a      	mov	r2, sp
 8002a24:	4641      	mov	r1, r8
 8002a26:	4638      	mov	r0, r7
 8002a28:	f7ff fef0 	bl	800280c <ae_gendig_slot>
    RET_IF_BAD(rv);
 8002a2c:	b9b0      	cbnz	r0, 8002a5c <ae_encrypted_read32+0x4e>

    // read nth 32-byte "block"
    ae_send(OP_Read, 0x82, (blk << 8) | (data_slot<<3));
 8002a2e:	00e2      	lsls	r2, r4, #3
 8002a30:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8002a34:	2182      	movs	r1, #130	; 0x82
 8002a36:	2002      	movs	r0, #2
 8002a38:	b292      	uxth	r2, r2
 8002a3a:	f7ff fcc6 	bl	80023ca <ae_send>

    ae_delay(OP_Read);

    rv = ae_read_n(32, data);
 8002a3e:	4629      	mov	r1, r5
 8002a40:	2020      	movs	r0, #32
 8002a42:	f7ff fc57 	bl	80022f4 <ae_read_n>
    RET_IF_BAD(rv);
 8002a46:	b948      	cbnz	r0, 8002a5c <ae_encrypted_read32+0x4e>
		*(acc) ^= *(more);
 8002a48:	782a      	ldrb	r2, [r5, #0]
 8002a4a:	f81d 3000 	ldrb.w	r3, [sp, r0]
 8002a4e:	3001      	adds	r0, #1
 8002a50:	4053      	eors	r3, r2
bool check_equal(const void *aV, const void *bV, int len);

// XOR-mixin more bytes; acc = acc XOR more for each byte
void static inline xor_mixin(uint8_t *acc, const uint8_t *more, int len)
{
	for(; len; len--, more++, acc++) {
 8002a52:	2820      	cmp	r0, #32
		*(acc) ^= *(more);
 8002a54:	f805 3b01 	strb.w	r3, [r5], #1
bool check_equal(const void *aV, const void *bV, int len);

// XOR-mixin more bytes; acc = acc XOR more for each byte
void static inline xor_mixin(uint8_t *acc, const uint8_t *more, int len)
{
	for(; len; len--, more++, acc++) {
 8002a58:	d1f6      	bne.n	8002a48 <ae_encrypted_read32+0x3a>

    xor_mixin(data, digest, 32);

    return 0;
 8002a5a:	2000      	movs	r0, #0
}
 8002a5c:	b008      	add	sp, #32
 8002a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002a64 <ae_encrypted_read>:

// ae_encrypted_read()
//
    int
ae_encrypted_read(int data_slot, int read_kn, const uint8_t read_key[32], uint8_t *data, int len)
{
 8002a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a68:	b08a      	sub	sp, #40	; 0x28
 8002a6a:	4606      	mov	r6, r0
 8002a6c:	9c10      	ldr	r4, [sp, #64]	; 0x40
    // not clear if chip supports 4-byte encrypted reads 
    ASSERT((len == 32) || (len == 72));
 8002a6e:	2c20      	cmp	r4, #32

// ae_encrypted_read()
//
    int
ae_encrypted_read(int data_slot, int read_kn, const uint8_t read_key[32], uint8_t *data, int len)
{
 8002a70:	460f      	mov	r7, r1
 8002a72:	4690      	mov	r8, r2
 8002a74:	461d      	mov	r5, r3
    // not clear if chip supports 4-byte encrypted reads 
    ASSERT((len == 32) || (len == 72));
 8002a76:	d004      	beq.n	8002a82 <ae_encrypted_read+0x1e>
 8002a78:	2c48      	cmp	r4, #72	; 0x48
 8002a7a:	d002      	beq.n	8002a82 <ae_encrypted_read+0x1e>
 8002a7c:	4814      	ldr	r0, [pc, #80]	; (8002ad0 <ae_encrypted_read+0x6c>)
 8002a7e:	f7fd fca7 	bl	80003d0 <fatal_error>

    int rv = ae_encrypted_read32(data_slot, 0, read_kn, read_key, data);
 8002a82:	9500      	str	r5, [sp, #0]
 8002a84:	4643      	mov	r3, r8
 8002a86:	463a      	mov	r2, r7
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	f7ff ffbf 	bl	8002a0e <ae_encrypted_read32>
    RET_IF_BAD(rv);
 8002a90:	b9d0      	cbnz	r0, 8002ac8 <ae_encrypted_read+0x64>

    if(len == 32) return 0;
 8002a92:	2c20      	cmp	r4, #32
 8002a94:	d018      	beq.n	8002ac8 <ae_encrypted_read+0x64>

    rv = ae_encrypted_read32(data_slot, 1, read_kn, read_key, data+32);
 8002a96:	f105 0320 	add.w	r3, r5, #32
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	463a      	mov	r2, r7
 8002a9e:	4643      	mov	r3, r8
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f7ff ffb3 	bl	8002a0e <ae_encrypted_read32>
    RET_IF_BAD(rv);
 8002aa8:	b970      	cbnz	r0, 8002ac8 <ae_encrypted_read+0x64>

    uint8_t tmp[32];
    rv = ae_encrypted_read32(data_slot, 2, read_kn, read_key, tmp);
 8002aaa:	ac02      	add	r4, sp, #8
 8002aac:	4643      	mov	r3, r8
 8002aae:	9400      	str	r4, [sp, #0]
 8002ab0:	463a      	mov	r2, r7
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	f7ff ffaa 	bl	8002a0e <ae_encrypted_read32>
    RET_IF_BAD(rv);
 8002aba:	4603      	mov	r3, r0
 8002abc:	b918      	cbnz	r0, 8002ac6 <ae_encrypted_read+0x62>

    memcpy(data+64, tmp, 72-64);
 8002abe:	4622      	mov	r2, r4
 8002ac0:	ca03      	ldmia	r2!, {r0, r1}
 8002ac2:	6428      	str	r0, [r5, #64]	; 0x40
 8002ac4:	6469      	str	r1, [r5, #68]	; 0x44
 8002ac6:	4618      	mov	r0, r3

    return 0;
}
 8002ac8:	b00a      	add	sp, #40	; 0x28
 8002aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ace:	bf00      	nop
 8002ad0:	08006686 	.word	0x08006686

08002ad4 <ae_encrypted_write32>:
// ae_encrypted_write()
//
    int
ae_encrypted_write32(int data_slot, int blk, int write_kn,
                        const uint8_t write_key[32], const uint8_t data[32])
{
 8002ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad8:	b0c1      	sub	sp, #260	; 0x104
 8002ada:	4614      	mov	r4, r2
 8002adc:	461f      	mov	r7, r3
    uint8_t digest[32];

    ae_pair_unlock();

    // generate a hash over shared secret and rng
    int rv = ae_gendig_slot(write_kn, write_key, digest);
 8002ade:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
// ae_encrypted_write()
//
    int
ae_encrypted_write32(int data_slot, int blk, int write_kn,
                        const uint8_t write_key[32], const uint8_t data[32])
{
 8002ae2:	460e      	mov	r6, r1
 8002ae4:	4605      	mov	r5, r0
 8002ae6:	f8dd a128 	ldr.w	sl, [sp, #296]	; 0x128
    uint8_t digest[32];

    ae_pair_unlock();
 8002aea:	f7ff fd97 	bl	800261c <ae_pair_unlock>

    // generate a hash over shared secret and rng
    int rv = ae_gendig_slot(write_kn, write_key, digest);
 8002aee:	465a      	mov	r2, fp
 8002af0:	4639      	mov	r1, r7
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff fe8a 	bl	800280c <ae_gendig_slot>
    RET_IF_BAD(rv);
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d14f      	bne.n	8002b9c <ae_encrypted_write32+0xc8>
 8002afc:	4604      	mov	r4, r0

    // encrypt the data to be written, and append an authenticating MAC
    uint8_t body[32 + 32];

    for(int i=0; i<32; i++) {
        body[i] = data[i] ^ digest[i];
 8002afe:	f81a 2004 	ldrb.w	r2, [sl, r4]
 8002b02:	f81b 3004 	ldrb.w	r3, [fp, r4]
 8002b06:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8002b0a:	4053      	eors	r3, r2
 8002b0c:	f804 3009 	strb.w	r3, [r4, r9]
    RET_IF_BAD(rv);

    // encrypt the data to be written, and append an authenticating MAC
    uint8_t body[32 + 32];

    for(int i=0; i<32; i++) {
 8002b10:	3401      	adds	r4, #1
 8002b12:	2c20      	cmp	r4, #32
 8002b14:	d1f3      	bne.n	8002afe <ae_encrypted_write32+0x2a>
	//	    + (b'\0'*25)
	//	    + new_value)
	//	assert len(msg) == 32+1+1+2+1+2+25+32
	//		
	SHA256_CTX ctx;
    sha256_init(&ctx);
 8002b16:	a824      	add	r0, sp, #144	; 0x90
 8002b18:	f002 fe2e 	bl	8005778 <sha256_init>

    uint8_t p1 = 0x80|2;        // 32 bytes into a data slot
    uint8_t p2_lsb = (data_slot << 3); 
    uint8_t p2_msb = blk;

	uint8_t args[7] = { OP_Write, p1, p2_lsb, p2_msb, 0xEE, 0x01, 0x23 };
 8002b1c:	23ee      	movs	r3, #238	; 0xee
 8002b1e:	f88d 3010 	strb.w	r3, [sp, #16]
	//		
	SHA256_CTX ctx;
    sha256_init(&ctx);

    uint8_t p1 = 0x80|2;        // 32 bytes into a data slot
    uint8_t p2_lsb = (data_slot << 3); 
 8002b22:	00ed      	lsls	r5, r5, #3
    uint8_t p2_msb = blk;

	uint8_t args[7] = { OP_Write, p1, p2_lsb, p2_msb, 0xEE, 0x01, 0x23 };
 8002b24:	2301      	movs	r3, #1
	//		
	SHA256_CTX ctx;
    sha256_init(&ctx);

    uint8_t p1 = 0x80|2;        // 32 bytes into a data slot
    uint8_t p2_lsb = (data_slot << 3); 
 8002b26:	b2ed      	uxtb	r5, r5
    uint8_t p2_msb = blk;

	uint8_t args[7] = { OP_Write, p1, p2_lsb, p2_msb, 0xEE, 0x01, 0x23 };
 8002b28:	2712      	movs	r7, #18
 8002b2a:	f04f 0882 	mov.w	r8, #130	; 0x82
 8002b2e:	f88d 3011 	strb.w	r3, [sp, #17]
    uint8_t zeros[25] = { 0 };
 8002b32:	2219      	movs	r2, #25

    uint8_t p1 = 0x80|2;        // 32 bytes into a data slot
    uint8_t p2_lsb = (data_slot << 3); 
    uint8_t p2_msb = blk;

	uint8_t args[7] = { OP_Write, p1, p2_lsb, p2_msb, 0xEE, 0x01, 0x23 };
 8002b34:	2323      	movs	r3, #35	; 0x23
    uint8_t zeros[25] = { 0 };
 8002b36:	2100      	movs	r1, #0
 8002b38:	a805      	add	r0, sp, #20

    uint8_t p1 = 0x80|2;        // 32 bytes into a data slot
    uint8_t p2_lsb = (data_slot << 3); 
    uint8_t p2_msb = blk;

	uint8_t args[7] = { OP_Write, p1, p2_lsb, p2_msb, 0xEE, 0x01, 0x23 };
 8002b3a:	f88d 3012 	strb.w	r3, [sp, #18]
 8002b3e:	f88d 700c 	strb.w	r7, [sp, #12]
 8002b42:	f88d 800d 	strb.w	r8, [sp, #13]
 8002b46:	f88d 500e 	strb.w	r5, [sp, #14]
 8002b4a:	f88d 600f 	strb.w	r6, [sp, #15]
    uint8_t zeros[25] = { 0 };
 8002b4e:	f003 fd62 	bl	8006616 <memset>

    sha256_update(&ctx, digest, 32);
 8002b52:	4622      	mov	r2, r4
 8002b54:	4659      	mov	r1, fp
 8002b56:	a824      	add	r0, sp, #144	; 0x90
 8002b58:	f002 fe38 	bl	80057cc <sha256_update>
    sha256_update(&ctx, args, sizeof(args));
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	a903      	add	r1, sp, #12
 8002b60:	a824      	add	r0, sp, #144	; 0x90
 8002b62:	f002 fe33 	bl	80057cc <sha256_update>
    sha256_update(&ctx, zeros, sizeof(zeros));
 8002b66:	2219      	movs	r2, #25
 8002b68:	a905      	add	r1, sp, #20
 8002b6a:	a824      	add	r0, sp, #144	; 0x90
 8002b6c:	f002 fe2e 	bl	80057cc <sha256_update>
    sha256_update(&ctx, data, 32);
 8002b70:	4622      	mov	r2, r4
 8002b72:	4651      	mov	r1, sl
 8002b74:	a824      	add	r0, sp, #144	; 0x90
 8002b76:	f002 fe29 	bl	80057cc <sha256_update>

    sha256_final(&ctx, &body[32]);
 8002b7a:	a91c      	add	r1, sp, #112	; 0x70
 8002b7c:	a824      	add	r0, sp, #144	; 0x90
 8002b7e:	f002 fe43 	bl	8005808 <sha256_final>

    ae_send_n(OP_Write, p1, (p2_msb << 8) | p2_lsb, body, sizeof(body));
 8002b82:	0232      	lsls	r2, r6, #8
 8002b84:	2340      	movs	r3, #64	; 0x40
 8002b86:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	432a      	orrs	r2, r5
 8002b8e:	464b      	mov	r3, r9
 8002b90:	4641      	mov	r1, r8
 8002b92:	4638      	mov	r0, r7
 8002b94:	f7ff fbe4 	bl	8002360 <ae_send_n>

    ae_delay(OP_Write);

    return ae_read1();
 8002b98:	f7ff fb90 	bl	80022bc <ae_read1>
}
 8002b9c:	b041      	add	sp, #260	; 0x104
 8002b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002ba4 <ae_encrypted_write>:
// ae_encrypted_write()
//
    int
ae_encrypted_write(int data_slot, int write_kn, const uint8_t write_key[32],
                        const uint8_t *data, int len)
{
 8002ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba8:	b08a      	sub	sp, #40	; 0x28
    ASSERT(data_slot >= 0);
    ASSERT(data_slot <= 15);
 8002baa:	280f      	cmp	r0, #15
// ae_encrypted_write()
//
    int
ae_encrypted_write(int data_slot, int write_kn, const uint8_t write_key[32],
                        const uint8_t *data, int len)
{
 8002bac:	4607      	mov	r7, r0
 8002bae:	4688      	mov	r8, r1
 8002bb0:	4691      	mov	r9, r2
 8002bb2:	469a      	mov	sl, r3
 8002bb4:	9d12      	ldr	r5, [sp, #72]	; 0x48
    ASSERT(data_slot >= 0);
    ASSERT(data_slot <= 15);
 8002bb6:	d902      	bls.n	8002bbe <ae_encrypted_write+0x1a>
//
    int
ae_encrypted_write(int data_slot, int write_kn, const uint8_t write_key[32],
                        const uint8_t *data, int len)
{
    ASSERT(data_slot >= 0);
 8002bb8:	4812      	ldr	r0, [pc, #72]	; (8002c04 <ae_encrypted_write+0x60>)
 8002bba:	f7fd fc09 	bl	80003d0 <fatal_error>
 8002bbe:	2400      	movs	r4, #0

    for(int blk=0; blk<3 && len>0; blk++, len-=32) {
        int here = MIN(32, len);

        // be nice and don't read past end of input buffer
        uint8_t     tmp[32] = { 0 };
 8002bc0:	ae02      	add	r6, sp, #8
                        const uint8_t *data, int len)
{
    ASSERT(data_slot >= 0);
    ASSERT(data_slot <= 15);

    for(int blk=0; blk<3 && len>0; blk++, len-=32) {
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	dd1a      	ble.n	8002bfc <ae_encrypted_write+0x58>
        int here = MIN(32, len);

        // be nice and don't read past end of input buffer
        uint8_t     tmp[32] = { 0 };
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4630      	mov	r0, r6
 8002bcc:	f003 fd23 	bl	8006616 <memset>
        memcpy(tmp, data+(32*blk), here);
 8002bd0:	2d20      	cmp	r5, #32
 8002bd2:	462a      	mov	r2, r5
 8002bd4:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
 8002bd8:	bfa8      	it	ge
 8002bda:	2220      	movge	r2, #32
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f003 fcf4 	bl	80065ca <memcpy>

        int rv = ae_encrypted_write32(data_slot, blk, write_kn, write_key, tmp);
 8002be2:	9600      	str	r6, [sp, #0]
 8002be4:	464b      	mov	r3, r9
 8002be6:	4642      	mov	r2, r8
 8002be8:	4621      	mov	r1, r4
 8002bea:	4638      	mov	r0, r7
 8002bec:	f7ff ff72 	bl	8002ad4 <ae_encrypted_write32>
        RET_IF_BAD(rv);
 8002bf0:	b928      	cbnz	r0, 8002bfe <ae_encrypted_write+0x5a>
                        const uint8_t *data, int len)
{
    ASSERT(data_slot >= 0);
    ASSERT(data_slot <= 15);

    for(int blk=0; blk<3 && len>0; blk++, len-=32) {
 8002bf2:	3401      	adds	r4, #1
 8002bf4:	2c03      	cmp	r4, #3
 8002bf6:	f1a5 0520 	sub.w	r5, r5, #32
 8002bfa:	d1e2      	bne.n	8002bc2 <ae_encrypted_write+0x1e>

        int rv = ae_encrypted_write32(data_slot, blk, write_kn, write_key, tmp);
        RET_IF_BAD(rv);
    }

    return 0;
 8002bfc:	2000      	movs	r0, #0
}
 8002bfe:	b00a      	add	sp, #40	; 0x28
 8002c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c04:	08006686 	.word	0x08006686

08002c08 <ae_read_data_slot>:

// ae_read_data_slot()
//
    int
ae_read_data_slot(int slot_num, uint8_t *data, int len)
{
 8002c08:	b570      	push	{r4, r5, r6, lr}
    ASSERT((len == 4) || (len == 32) || (len == 72));
 8002c0a:	2a04      	cmp	r2, #4

// ae_read_data_slot()
//
    int
ae_read_data_slot(int slot_num, uint8_t *data, int len)
{
 8002c0c:	b088      	sub	sp, #32
 8002c0e:	460d      	mov	r5, r1
 8002c10:	4616      	mov	r6, r2
    ASSERT((len == 4) || (len == 32) || (len == 72));
 8002c12:	d006      	beq.n	8002c22 <ae_read_data_slot+0x1a>
 8002c14:	2a20      	cmp	r2, #32
 8002c16:	d006      	beq.n	8002c26 <ae_read_data_slot+0x1e>
 8002c18:	2a48      	cmp	r2, #72	; 0x48
 8002c1a:	d004      	beq.n	8002c26 <ae_read_data_slot+0x1e>
 8002c1c:	481a      	ldr	r0, [pc, #104]	; (8002c88 <ae_read_data_slot+0x80>)
 8002c1e:	f7fd fbd7 	bl	80003d0 <fatal_error>

    // zone => data
    // only reading first block of 32 bytes. ignore the rest
    ae_send(OP_Read, (len == 4 ? 0x00 : 0x80) | 2, (slot_num<<3));
 8002c22:	2102      	movs	r1, #2
 8002c24:	e000      	b.n	8002c28 <ae_read_data_slot+0x20>
 8002c26:	2182      	movs	r1, #130	; 0x82
 8002c28:	00c0      	lsls	r0, r0, #3
 8002c2a:	b284      	uxth	r4, r0
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	2002      	movs	r0, #2
 8002c30:	f7ff fbcb 	bl	80023ca <ae_send>

    ae_delay(OP_Read);

    int rv = ae_read_n((len == 4) ? 4 : 32, data);
 8002c34:	2e04      	cmp	r6, #4
 8002c36:	bf0c      	ite	eq
 8002c38:	2004      	moveq	r0, #4
 8002c3a:	2020      	movne	r0, #32
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	f7ff fb59 	bl	80022f4 <ae_read_n>
    RET_IF_BAD(rv);
 8002c42:	b9f0      	cbnz	r0, 8002c82 <ae_read_data_slot+0x7a>

    if(len == 72) {
 8002c44:	2e48      	cmp	r6, #72	; 0x48
 8002c46:	d11c      	bne.n	8002c82 <ae_read_data_slot+0x7a>
        // read second block
        ae_send(OP_Read, 0x82, (1<<8) | (slot_num<<3));
 8002c48:	2182      	movs	r1, #130	; 0x82
 8002c4a:	2002      	movs	r0, #2
 8002c4c:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 8002c50:	f7ff fbbb 	bl	80023ca <ae_send>

        ae_delay(OP_Read);

        int rv = ae_read_n(32, data+32);
 8002c54:	f105 0120 	add.w	r1, r5, #32
 8002c58:	2020      	movs	r0, #32
 8002c5a:	f7ff fb4b 	bl	80022f4 <ae_read_n>
        RET_IF_BAD(rv);
 8002c5e:	b980      	cbnz	r0, 8002c82 <ae_read_data_slot+0x7a>

        // read third block, but only using part of it
        uint8_t     tmp[32];
        ae_send(OP_Read, 0x82, (2<<8) | (slot_num<<3));
 8002c60:	f444 7200 	orr.w	r2, r4, #512	; 0x200
 8002c64:	2182      	movs	r1, #130	; 0x82
 8002c66:	2002      	movs	r0, #2
 8002c68:	f7ff fbaf 	bl	80023ca <ae_send>

        ae_delay(OP_Read);

        rv = ae_read_n(32, tmp);
 8002c6c:	4669      	mov	r1, sp
 8002c6e:	2020      	movs	r0, #32
 8002c70:	f7ff fb40 	bl	80022f4 <ae_read_n>
        RET_IF_BAD(rv);
 8002c74:	4603      	mov	r3, r0
 8002c76:	b918      	cbnz	r0, 8002c80 <ae_read_data_slot+0x78>

        memcpy(data+64, tmp, 72-64);
 8002c78:	466a      	mov	r2, sp
 8002c7a:	ca03      	ldmia	r2!, {r0, r1}
 8002c7c:	6428      	str	r0, [r5, #64]	; 0x40
 8002c7e:	6469      	str	r1, [r5, #68]	; 0x44
 8002c80:	4618      	mov	r0, r3
    }

    return 0;
}
 8002c82:	b008      	add	sp, #32
 8002c84:	bd70      	pop	{r4, r5, r6, pc}
 8002c86:	bf00      	nop
 8002c88:	08006686 	.word	0x08006686

08002c8c <ae_set_gpio>:

// ae_set_gpio()
//
    int
ae_set_gpio(int state)
{
 8002c8c:	b513      	push	{r0, r1, r4, lr}
    // 1=turn on green, 0=red light (if not yet configured to be secure)
    ae_send(OP_Info, 3, 2 | (!!state));
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2203      	movne	r2, #3
 8002c94:	2202      	moveq	r2, #2
 8002c96:	2103      	movs	r1, #3
 8002c98:	4604      	mov	r4, r0
 8002c9a:	2030      	movs	r0, #48	; 0x30
 8002c9c:	f7ff fb95 	bl	80023ca <ae_send>

    // "Always return the current state in the first byte followed by three bytes of 0x00"
    // - simple 1/0, in LSB.
    uint8_t resp[4];

    int rv = ae_read_n(4, resp);
 8002ca0:	a901      	add	r1, sp, #4
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f7ff fb26 	bl	80022f4 <ae_read_n>
	RET_IF_BAD(rv);
 8002ca8:	b928      	cbnz	r0, 8002cb6 <ae_set_gpio+0x2a>

    return (resp[0] != state) ? -1 : 0;
 8002caa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002cae:	1b00      	subs	r0, r0, r4
 8002cb0:	bf18      	it	ne
 8002cb2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
}
 8002cb6:	b002      	add	sp, #8
 8002cb8:	bd10      	pop	{r4, pc}

08002cba <ae_set_gpio_secure>:
//
// Set the GPIO using secure hash generated somehow already.
//
    int
ae_set_gpio_secure(uint8_t digest[32])
{
 8002cba:	b538      	push	{r3, r4, r5, lr}
 8002cbc:	4605      	mov	r5, r0
    ae_pair_unlock();
 8002cbe:	f7ff fcad 	bl	800261c <ae_pair_unlock>
    ae_checkmac(KEYNUM_firmware, digest);
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	200e      	movs	r0, #14
 8002cc6:	f7ff fc29 	bl	800251c <ae_checkmac>

    int rv = ae_set_gpio(1);
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7ff ffde 	bl	8002c8c <ae_set_gpio>

    if(rv == 0) {
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	b940      	cbnz	r0, 8002ce6 <ae_set_gpio_secure+0x2c>
        // trust that readback, and so do a verify that the chip has 
        // the digest we think it does. If MitM wanted to turn off the output,
        // they can do that anytime regardless. We just don't want them to be
        // able to fake it being set, and therefore bypass the
        // "unsigned firmware" delay and warning.
        ae_pair_unlock();
 8002cd4:	f7ff fca2 	bl	800261c <ae_pair_unlock>

        if(ae_checkmac_hard(KEYNUM_firmware, digest) != 0) {
 8002cd8:	4629      	mov	r1, r5
 8002cda:	200e      	movs	r0, #14
 8002cdc:	f7ff fde6 	bl	80028ac <ae_checkmac_hard>
 8002ce0:	b108      	cbz	r0, 8002ce6 <ae_set_gpio_secure+0x2c>
            fatal_mitm();
 8002ce2:	f7fd fbc3 	bl	800046c <fatal_mitm>
        }
    }

    return rv;
}
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	bd38      	pop	{r3, r4, r5, pc}

08002cea <ae_get_gpio>:
//
// IMPORTANT: do not trust this result, could be MitM'ed.
//
	uint8_t
ae_get_gpio(void)
{
 8002cea:	b507      	push	{r0, r1, r2, lr}
	// not doing error checking here
	ae_send(OP_Info, 0x3, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2103      	movs	r1, #3
 8002cf0:	2030      	movs	r0, #48	; 0x30
 8002cf2:	f7ff fb6a 	bl	80023ca <ae_send>

	ae_delay(OP_Info);

	// note: always returns 4 bytes, but most are garbage and unused.
	uint8_t tmp[4];
	ae_read_n(4, tmp);
 8002cf6:	a901      	add	r1, sp, #4
 8002cf8:	2004      	movs	r0, #4
 8002cfa:	f7ff fafb 	bl	80022f4 <ae_read_n>

	return tmp[0];
}
 8002cfe:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002d02:	b003      	add	sp, #12
 8002d04:	f85d fb04 	ldr.w	pc, [sp], #4

08002d08 <ae_read_config_word>:
//
// Read a 4-byte area from config area, or -1 if fail.
//
    int
ae_read_config_word(int offset, uint8_t *dest)
{
 8002d08:	b510      	push	{r4, lr}
    offset &= 0x7f;

    // read 32 bits (aligned)
    ae_send(OP_Read, 0x00, offset/4);
 8002d0a:	f3c0 0284 	ubfx	r2, r0, #2, #5
//
// Read a 4-byte area from config area, or -1 if fail.
//
    int
ae_read_config_word(int offset, uint8_t *dest)
{
 8002d0e:	460c      	mov	r4, r1
    offset &= 0x7f;

    // read 32 bits (aligned)
    ae_send(OP_Read, 0x00, offset/4);
 8002d10:	2002      	movs	r0, #2
 8002d12:	2100      	movs	r1, #0
 8002d14:	f7ff fb59 	bl	80023ca <ae_send>

	ae_delay(OP_Read);

	int rv = ae_read_n(4, dest);
 8002d18:	4621      	mov	r1, r4
 8002d1a:	2004      	movs	r0, #4
 8002d1c:	f7ff faea 	bl	80022f4 <ae_read_n>
 8002d20:	3000      	adds	r0, #0
 8002d22:	bf18      	it	ne
 8002d24:	2001      	movne	r0, #1
    if(rv) return -1;

    return 0;
}
 8002d26:	4240      	negs	r0, r0
 8002d28:	bd10      	pop	{r4, pc}
	...

08002d2c <ae_read_config_byte>:
//
// Read a byte from config area.
//
    int
ae_read_config_byte(int offset)
{
 8002d2c:	b513      	push	{r0, r1, r4, lr}
	uint8_t tmp[4];

    ae_read_config_word(offset, tmp);
 8002d2e:	a901      	add	r1, sp, #4
//
// Read a byte from config area.
//
    int
ae_read_config_byte(int offset)
{
 8002d30:	4604      	mov	r4, r0
	uint8_t tmp[4];

    ae_read_config_word(offset, tmp);
 8002d32:	f7ff ffe9 	bl	8002d08 <ae_read_config_word>

	return tmp[offset % 4];
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <ae_read_config_byte+0x28>)
 8002d38:	4023      	ands	r3, r4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bfbe      	ittt	lt
 8002d3e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8002d42:	f063 0303 	ornlt	r3, r3, #3
 8002d46:	3301      	addlt	r3, #1
 8002d48:	aa02      	add	r2, sp, #8
 8002d4a:	4413      	add	r3, r2
}
 8002d4c:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8002d50:	b002      	add	sp, #8
 8002d52:	bd10      	pop	{r4, pc}
 8002d54:	80000003 	.word	0x80000003

08002d58 <ae_destroy_key>:

// ae_destroy_key()
//
    int
ae_destroy_key(int keynum)
{
 8002d58:	b510      	push	{r4, lr}
 8002d5a:	b090      	sub	sp, #64	; 0x40
	uint8_t numin[20];

	// Load tempkey with a known (random) nonce value
	rng_buffer(numin, sizeof(numin));
 8002d5c:	2114      	movs	r1, #20

// ae_destroy_key()
//
    int
ae_destroy_key(int keynum)
{
 8002d5e:	4604      	mov	r4, r0
	uint8_t numin[20];

	// Load tempkey with a known (random) nonce value
	rng_buffer(numin, sizeof(numin));
 8002d60:	a803      	add	r0, sp, #12
 8002d62:	f7ff f92f 	bl	8001fc4 <rng_buffer>
    ae_send_n(OP_Nonce, 0, 0, numin, 20);
 8002d66:	2314      	movs	r3, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	2016      	movs	r0, #22
 8002d70:	ab03      	add	r3, sp, #12
 8002d72:	f7ff faf5 	bl	8002360 <ae_send_n>
	ae_delay(OP_Nonce);

	// Nonce command returns the RNG result, not contents of TempKey,
    // but since we are destroying, no need to calculate what it is.
	uint8_t randout[32];
	int rv = ae_read_n(32, randout);
 8002d76:	a908      	add	r1, sp, #32
 8002d78:	2020      	movs	r0, #32
 8002d7a:	f7ff fabb 	bl	80022f4 <ae_read_n>
	RET_IF_BAD(rv);
 8002d7e:	b930      	cbnz	r0, 8002d8e <ae_destroy_key+0x36>

    // do a "DeriveKey" operation, based on that!
	ae_send(OP_DeriveKey, 0x00, keynum);
 8002d80:	4601      	mov	r1, r0
 8002d82:	b2a2      	uxth	r2, r4
 8002d84:	201c      	movs	r0, #28
 8002d86:	f7ff fb20 	bl	80023ca <ae_send>

	ae_delay(OP_DeriveKey);

    return ae_read1();
 8002d8a:	f7ff fa97 	bl	80022bc <ae_read1>
}
 8002d8e:	b010      	add	sp, #64	; 0x40
 8002d90:	bd10      	pop	{r4, pc}

08002d92 <ae_config_read>:

// ae_config_read()
//
    int 
ae_config_read(uint8_t config[128])
{
 8002d92:	b538      	push	{r3, r4, r5, lr}
 8002d94:	4605      	mov	r5, r0
    for(int blk=0; blk<4; blk++) {
 8002d96:	2400      	movs	r4, #0
        // read 32 bytes (aligned) from config "zone"
        ae_send(OP_Read, 0x80, blk<<3);
 8002d98:	00e2      	lsls	r2, r4, #3
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	2002      	movs	r0, #2
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	f7ff fb13 	bl	80023ca <ae_send>

        ae_delay(OP_Read);

        int rv = ae_read_n(32, &config[32*blk]);
 8002da4:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8002da8:	2020      	movs	r0, #32
 8002daa:	f7ff faa3 	bl	80022f4 <ae_read_n>
        if(rv) return EIO;
 8002dae:	b918      	cbnz	r0, 8002db8 <ae_config_read+0x26>
// ae_config_read()
//
    int 
ae_config_read(uint8_t config[128])
{
    for(int blk=0; blk<4; blk++) {
 8002db0:	3401      	adds	r4, #1
 8002db2:	2c04      	cmp	r4, #4
 8002db4:	d1f0      	bne.n	8002d98 <ae_config_read+0x6>
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
        ae_send(OP_Read, 0x80, blk<<3);

        ae_delay(OP_Read);

        int rv = ae_read_n(32, &config[32*blk]);
        if(rv) return EIO;
 8002db8:	2005      	movs	r0, #5
    }

    return 0;
}
 8002dba:	bd38      	pop	{r3, r4, r5, pc}

08002dbc <ae_setup_config>:
// us to write the (existing) pairing secret into, they would see the pairing
// secret in cleartext. They could then restore original chip and access freely.
//
    int
ae_setup_config(void)
{
 8002dbc:	b570      	push	{r4, r5, r6, lr}
    // Is data zone is locked?
    // Allow rest of function to happen if it's not.

    //  0x55 = unlocked; 0x00 = locked
    bool data_locked = (ae_read_config_byte(86) != 0x55);
 8002dbe:	2056      	movs	r0, #86	; 0x56
// us to write the (existing) pairing secret into, they would see the pairing
// secret in cleartext. They could then restore original chip and access freely.
//
    int
ae_setup_config(void)
{
 8002dc0:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
    // Is data zone is locked?
    // Allow rest of function to happen if it's not.

    //  0x55 = unlocked; 0x00 = locked
    bool data_locked = (ae_read_config_byte(86) != 0x55);
 8002dc4:	f7ff ffb2 	bl	8002d2c <ae_read_config_byte>
    if(data_locked) return 0;       // basically success
 8002dc8:	2855      	cmp	r0, #85	; 0x55
 8002dca:	f040 80e5 	bne.w	8002f98 <ae_setup_config+0x1dc>

    // To lock, we need a CRC over whole thing, but we
    // only set a few values... plus the serial number is
    // in there, so start with some readout.
    uint8_t config[128];
    int rv = ae_config_read(config);
 8002dce:	a828      	add	r0, sp, #160	; 0xa0
 8002dd0:	f7ff ffdf 	bl	8002d92 <ae_config_read>
    if(rv) return rv;
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	f040 80e2 	bne.w	8002f9e <ae_setup_config+0x1e2>

    // verify some fixed values
    ASSERT(config[0] == 0x01);
 8002dda:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d001      	beq.n	8002de6 <ae_setup_config+0x2a>
 8002de2:	4870      	ldr	r0, [pc, #448]	; (8002fa4 <ae_setup_config+0x1e8>)
 8002de4:	e050      	b.n	8002e88 <ae_setup_config+0xcc>
    ASSERT(config[1] == 0x23);
 8002de6:	f89d 30a1 	ldrb.w	r3, [sp, #161]	; 0xa1
 8002dea:	2b23      	cmp	r3, #35	; 0x23
 8002dec:	d1f9      	bne.n	8002de2 <ae_setup_config+0x26>
    ASSERT(config[12] == 0xee);
 8002dee:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8002df2:	2bee      	cmp	r3, #238	; 0xee
 8002df4:	d1f5      	bne.n	8002de2 <ae_setup_config+0x26>

    // guess part number
    int8_t partno = ((config[6]>>4)&0xf);
    ASSERT(partno == 6);
 8002df6:	f89d 30a6 	ldrb.w	r3, [sp, #166]	; 0xa6
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	2b06      	cmp	r3, #6
 8002dfe:	d1f0      	bne.n	8002de2 <ae_setup_config+0x26>

    uint8_t serial[9];
	memcpy(serial, &config[0], 4);
 8002e00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002e02:	9303      	str	r3, [sp, #12]
	memcpy(&serial[4], &config[8], 5);
 8002e04:	ab2a      	add	r3, sp, #168	; 0xa8
 8002e06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e0a:	9004      	str	r0, [sp, #16]
 8002e0c:	f88d 1014 	strb.w	r1, [sp, #20]

    if(check_all_ones(rom_secrets->ae_serial_number, 9)) {
 8002e10:	4865      	ldr	r0, [pc, #404]	; (8002fa8 <ae_setup_config+0x1ec>)
 8002e12:	2109      	movs	r1, #9
 8002e14:	f7ff f86e 	bl	8001ef4 <check_all_ones>
 8002e18:	b110      	cbz	r0, 8002e20 <ae_setup_config+0x64>
        // flash is empty; remember this serial number
        flash_save_ae_serial(serial);
 8002e1a:	a803      	add	r0, sp, #12
 8002e1c:	f7fe ff62 	bl	8001ce4 <flash_save_ae_serial>
    }

    if(!check_equal(rom_secrets->ae_serial_number, serial, 9)) {
 8002e20:	2209      	movs	r2, #9
 8002e22:	a903      	add	r1, sp, #12
 8002e24:	4860      	ldr	r0, [pc, #384]	; (8002fa8 <ae_setup_config+0x1ec>)
 8002e26:	f7ff f87d 	bl	8001f24 <check_equal>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	f000 80b6 	beq.w	8002f9c <ae_setup_config+0x1e0>
    // - pick RNG value for words secret (and forget it)
    // - set all PIN values to known value (zeros)
    // - set all money secrets to knonw value (zeros)
    // - lock the data zone

    if(config[87] == 0x55) {
 8002e30:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
 8002e34:	2b55      	cmp	r3, #85	; 0x55
 8002e36:	d143      	bne.n	8002ec0 <ae_setup_config+0x104>
        static const uint8_t    config_2[] = AE_CHIP_CONFIG_2;

        STATIC_ASSERT(sizeof(config_1) == 84-16);
        STATIC_ASSERT(sizeof(config_2) == 128-90);

        memcpy(&config[16], config_1, sizeof(config_1));
 8002e38:	2244      	movs	r2, #68	; 0x44
 8002e3a:	495c      	ldr	r1, [pc, #368]	; (8002fac <ae_setup_config+0x1f0>)
 8002e3c:	a82c      	add	r0, sp, #176	; 0xb0
 8002e3e:	f003 fbc4 	bl	80065ca <memcpy>
        memcpy(&config[90], config_2, sizeof(config_2));
 8002e42:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <ae_setup_config+0x1f4>)
 8002e44:	f10d 02fa 	add.w	r2, sp, #250	; 0xfa
 8002e48:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002e4c:	f853 0b04 	ldr.w	r0, [r3], #4
 8002e50:	f842 0b04 	str.w	r0, [r2], #4
 8002e54:	428b      	cmp	r3, r1
 8002e56:	d1f9      	bne.n	8002e4c <ae_setup_config+0x90>
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	8013      	strh	r3, [r2, #0]
//
    static int
ae_config_write(const uint8_t config[128])
{
    // send all 128 bytes, less some that can't be written.
    for(int n=16; n<128; n+= 4) {
 8002e5c:	2410      	movs	r4, #16
        if(n == 84) continue;       // that word not writable

        // Must work on words, since can't write to most of the complete blocks.
        //  args = write_params(block=n//32, offset=n//4, is_config=True)
        //  p2 = (block << 3) | offset
        ae_send_n(OP_Write, 0, n/4, &config[n], 4);
 8002e5e:	2504      	movs	r5, #4
    static int
ae_config_write(const uint8_t config[128])
{
    // send all 128 bytes, less some that can't be written.
    for(int n=16; n<128; n+= 4) {
        if(n == 84) continue;       // that word not writable
 8002e60:	2c54      	cmp	r4, #84	; 0x54
 8002e62:	d103      	bne.n	8002e6c <ae_setup_config+0xb0>
//
    static int
ae_config_write(const uint8_t config[128])
{
    // send all 128 bytes, less some that can't be written.
    for(int n=16; n<128; n+= 4) {
 8002e64:	3404      	adds	r4, #4
 8002e66:	2c80      	cmp	r4, #128	; 0x80
 8002e68:	d1fa      	bne.n	8002e60 <ae_setup_config+0xa4>
 8002e6a:	e00f      	b.n	8002e8c <ae_setup_config+0xd0>
        if(n == 84) continue;       // that word not writable

        // Must work on words, since can't write to most of the complete blocks.
        //  args = write_params(block=n//32, offset=n//4, is_config=True)
        //  p2 = (block << 3) | offset
        ae_send_n(OP_Write, 0, n/4, &config[n], 4);
 8002e6c:	ab28      	add	r3, sp, #160	; 0xa0
 8002e6e:	4423      	add	r3, r4
 8002e70:	f3c4 028f 	ubfx	r2, r4, #2, #16
 8002e74:	2100      	movs	r1, #0
 8002e76:	2012      	movs	r0, #18
 8002e78:	9500      	str	r5, [sp, #0]
 8002e7a:	f7ff fa71 	bl	8002360 <ae_send_n>

        ae_delay(OP_Write);
    
		int rv = ae_read1();
 8002e7e:	f7ff fa1d 	bl	80022bc <ae_read1>
        if(rv) return rv;
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d0ee      	beq.n	8002e64 <ae_setup_config+0xa8>

        ae_keep_alive();

        // lock config zone
        if(ae_lock_config_zone(config)) {
            INCONSISTENT("conf lock");
 8002e86:	484b      	ldr	r0, [pc, #300]	; (8002fb4 <ae_setup_config+0x1f8>)
 8002e88:	f7fd faa2 	bl	80003d0 <fatal_error>
//
	void
ae_keep_alive(void)
{
	// To reset the watchdog, (1) put it into idle mode, then (2) wake it.
	ae_send_idle();
 8002e8c:	f7ff f958 	bl	8002140 <ae_send_idle>
//
    static int
ae_lock_config_zone(const uint8_t config[128])
{
    // calc expected CRC
    uint8_t crc[2] = {0, 0};
 8002e90:	2500      	movs	r5, #0

    crc16_chain(128, config, crc);
 8002e92:	aa48      	add	r2, sp, #288	; 0x120
 8002e94:	a928      	add	r1, sp, #160	; 0xa0
 8002e96:	4620      	mov	r0, r4
//
    static int
ae_lock_config_zone(const uint8_t config[128])
{
    // calc expected CRC
    uint8_t crc[2] = {0, 0};
 8002e98:	f88d 5120 	strb.w	r5, [sp, #288]	; 0x120
 8002e9c:	f88d 5121 	strb.w	r5, [sp, #289]	; 0x121

    crc16_chain(128, config, crc);
 8002ea0:	f7ff f8f8 	bl	8002094 <crc16_chain>

    // do the lock: mode=0
    ae_send(OP_Lock, 0x0, (crc[1]<<8) | crc[0]);
 8002ea4:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8002ea8:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8002eac:	4629      	mov	r1, r5
 8002eae:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8002eb2:	2017      	movs	r0, #23
 8002eb4:	f7ff fa89 	bl	80023ca <ae_send>

    ae_delay(OP_Lock);

    return ae_read1();
 8002eb8:	f7ff fa00 	bl	80022bc <ae_read1>
        }

        ae_keep_alive();

        // lock config zone
        if(ae_lock_config_zone(config)) {
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d1e2      	bne.n	8002e86 <ae_setup_config+0xca>
    // Load data zone with some known values.
    // The datazone still unlocked, so no encryption needed (nor possible).
    
    // will use zeros for all PIN codes, and customer-defined-secret starting values
    uint8_t     zeros[72];
    memset(zeros, 0, sizeof(zeros));
 8002ec0:	2248      	movs	r2, #72	; 0x48
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	a816      	add	r0, sp, #88	; 0x58
 8002ec6:	f003 fba6 	bl	8006616 <memset>

    // slots can already locked, if we re-run any of this code... can't overwrite in
    // that case.
    uint16_t unlocked = config[88] | (((uint8_t)config[89])<<8);
 8002eca:	f89d 50f9 	ldrb.w	r5, [sp, #249]	; 0xf9
 8002ece:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8

    for(int kn=0; kn<16; kn++) {
 8002ed2:	2400      	movs	r4, #0
    uint8_t     zeros[72];
    memset(zeros, 0, sizeof(zeros));

    // slots can already locked, if we re-run any of this code... can't overwrite in
    // that case.
    uint16_t unlocked = config[88] | (((uint8_t)config[89])<<8);
 8002ed4:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
//
	void
ae_keep_alive(void)
{
	// To reset the watchdog, (1) put it into idle mode, then (2) wake it.
	ae_send_idle();
 8002ed8:	f7ff f932 	bl	8002140 <ae_send_idle>
    uint16_t unlocked = config[88] | (((uint8_t)config[89])<<8);

    for(int kn=0; kn<16; kn++) {
        ae_keep_alive();

        if(!(unlocked & (1<<kn))) {
 8002edc:	fa45 f304 	asr.w	r3, r5, r4
 8002ee0:	f013 0f01 	tst.w	r3, #1
 8002ee4:	f104 0601 	add.w	r6, r4, #1
 8002ee8:	d047      	beq.n	8002f7a <ae_setup_config+0x1be>
            STATS(was_locked |= (1<<kn));
            continue;
        }

        switch(kn) {
 8002eea:	2c0e      	cmp	r4, #14
 8002eec:	d845      	bhi.n	8002f7a <ae_setup_config+0x1be>
 8002eee:	e8df f004 	tbb	[pc, r4]
 8002ef2:	083a      	.short	0x083a
 8002ef4:	150d150d 	.word	0x150d150d
 8002ef8:	1a1d1529 	.word	0x1a1d1529
 8002efc:	1544151a 	.word	0x1544151a
 8002f00:	15          	.byte	0x15
 8002f01:	00          	.byte	0x00
            default:
            case 12: break;
            case 15: break;

            case KEYNUM_pairing:
                if(ae_write_data_slot(kn, rom_secrets->pairing_secret, 32, false)) {
 8002f02:	2300      	movs	r3, #0
 8002f04:	2220      	movs	r2, #32
 8002f06:	492c      	ldr	r1, [pc, #176]	; (8002fb8 <ae_setup_config+0x1fc>)
 8002f08:	2001      	movs	r0, #1
 8002f0a:	e030      	b.n	8002f6e <ae_setup_config+0x1b2>
                    // - each pin attempt (limited by counter0)
                    // - stretching pin/words attempts (iterated may times)
                    // See mathcheck.py for details.
                    uint8_t     tmp[32];

                    rng_buffer(tmp, sizeof(tmp));
 8002f0c:	2120      	movs	r1, #32
 8002f0e:	a806      	add	r0, sp, #24
 8002f10:	f7ff f858 	bl	8001fc4 <rng_buffer>
                    //#warning "fixed secrets"
                    //memset(tmp, 0x41+kn, 32);

                    if(ae_write_data_slot(kn, tmp, 32, true)) {
 8002f14:	2301      	movs	r3, #1
 8002f16:	2220      	movs	r2, #32
 8002f18:	a906      	add	r1, sp, #24
 8002f1a:	e002      	b.n	8002f22 <ae_setup_config+0x166>
            case KEYNUM_lastgood:
            case KEYNUM_duress_pin:
            case KEYNUM_duress_lastgood:
            case KEYNUM_brickme:
            case KEYNUM_firmware:
                if(ae_write_data_slot(kn, zeros, 32, false)) {
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2220      	movs	r2, #32
 8002f20:	a916      	add	r1, sp, #88	; 0x58
 8002f22:	4620      	mov	r0, r4
 8002f24:	e01b      	b.n	8002f5e <ae_setup_config+0x1a2>
                }
                break;

            case KEYNUM_secret:
            case KEYNUM_duress_secret:
                if(ae_write_data_slot(kn, zeros, 72, false)) {
 8002f26:	2300      	movs	r3, #0
 8002f28:	2248      	movs	r2, #72	; 0x48
 8002f2a:	e7f9      	b.n	8002f20 <ae_setup_config+0x164>
                    INCONSISTENT("wr blk 72");
                }
                break;

            case KEYNUM_long_secret: {            // 416 bytes
                uint8_t long_zeros[416] = {0};
 8002f2c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002f30:	2100      	movs	r1, #0
 8002f32:	a848      	add	r0, sp, #288	; 0x120
 8002f34:	f003 fb6f 	bl	8006616 <memset>
                if(ae_write_data_slot(kn, long_zeros, 416, false)) {
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002f3e:	a948      	add	r1, sp, #288	; 0x120
 8002f40:	2008      	movs	r0, #8
 8002f42:	e00c      	b.n	8002f5e <ae_setup_config+0x1a2>
                }
                break;
            }

            case KEYNUM_match_count: {
                uint32_t     buf[32/4] = { 1024, 1024 };
 8002f44:	2220      	movs	r2, #32
 8002f46:	2100      	movs	r1, #0
 8002f48:	a80e      	add	r0, sp, #56	; 0x38
 8002f4a:	f003 fb64 	bl	8006616 <memset>
 8002f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f52:	930e      	str	r3, [sp, #56]	; 0x38
 8002f54:	930f      	str	r3, [sp, #60]	; 0x3c
                if(ae_write_data_slot(KEYNUM_match_count, (const uint8_t *)buf,sizeof(buf),false)) {
 8002f56:	2220      	movs	r2, #32
 8002f58:	2300      	movs	r3, #0
 8002f5a:	a90e      	add	r1, sp, #56	; 0x38
 8002f5c:	2006      	movs	r0, #6
 8002f5e:	f7ff fbe5 	bl	800272c <ae_write_data_slot>
 8002f62:	b150      	cbz	r0, 8002f7a <ae_setup_config+0x1be>
 8002f64:	e78f      	b.n	8002e86 <ae_setup_config+0xca>
                }
                break;
            }

            case 0:
                if(ae_write_data_slot(kn, (const uint8_t *)copyright_msg, 32, true)) {
 8002f66:	4915      	ldr	r1, [pc, #84]	; (8002fbc <ae_setup_config+0x200>)
 8002f68:	2301      	movs	r3, #1
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7ff fbdd 	bl	800272c <ae_write_data_slot>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d187      	bne.n	8002e86 <ae_setup_config+0xca>

    // slots can already locked, if we re-run any of this code... can't overwrite in
    // that case.
    uint16_t unlocked = config[88] | (((uint8_t)config[89])<<8);

    for(int kn=0; kn<16; kn++) {
 8002f76:	4634      	mov	r4, r6
 8002f78:	e7ae      	b.n	8002ed8 <ae_setup_config+0x11c>
 8002f7a:	2e10      	cmp	r6, #16
 8002f7c:	4634      	mov	r4, r6
 8002f7e:	d1ab      	bne.n	8002ed8 <ae_setup_config+0x11c>
//
	void
ae_keep_alive(void)
{
	// To reset the watchdog, (1) put it into idle mode, then (2) wake it.
	ae_send_idle();
 8002f80:	f7ff f8de 	bl	8002140 <ae_send_idle>
ae_lock_data_zone(void)
{
    // NOTE: I haven't been able to calc CRC right, so not using it.

    // do the lock: mode=1 (datazone) + 0x80 (no CRC check)
    ae_send(OP_Lock, 0x81, 0x0000);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2181      	movs	r1, #129	; 0x81
 8002f88:	2017      	movs	r0, #23
 8002f8a:	f7ff fa1e 	bl	80023ca <ae_send>

    ae_delay(OP_Lock);

    return ae_read1();
 8002f8e:	f7ff f995 	bl	80022bc <ae_read1>
        }
    }

    // lock the data zone and effectively enter normal operation.
    ae_keep_alive();
    if(ae_lock_data_zone()) {
 8002f92:	2800      	cmp	r0, #0
 8002f94:	f47f af77 	bne.w	8002e86 <ae_setup_config+0xca>
    // Is data zone is locked?
    // Allow rest of function to happen if it's not.

    //  0x55 = unlocked; 0x00 = locked
    bool data_locked = (ae_read_config_byte(86) != 0x55);
    if(data_locked) return 0;       // basically success
 8002f98:	2000      	movs	r0, #0
 8002f9a:	e000      	b.n	8002f9e <ae_setup_config+0x1e2>
    }

    if(!check_equal(rom_secrets->ae_serial_number, serial, 9)) {
        // write failed?
        // we're already linked to a different chip? Write failed?
        return EPERM;
 8002f9c:	2001      	movs	r0, #1
    if(ae_lock_data_zone()) {
        INCONSISTENT("data lock");
    }

    return 0;
}
 8002f9e:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	08006686 	.word	0x08006686
 8002fa8:	08007840 	.word	0x08007840
 8002fac:	08006f15 	.word	0x08006f15
 8002fb0:	08006eef 	.word	0x08006eef
 8002fb4:	08006680 	.word	0x08006680
 8002fb8:	08007800 	.word	0x08007800
 8002fbc:	08006ec1 	.word	0x08006ec1

08002fc0 <ae_stretch_iter>:
// - but our time to do each iteration is limited by software SHA256 in ae_pair_unlock
//
    int
ae_stretch_iter(const uint8_t start[32], uint8_t end[32], int iterations)
{
    ASSERT(start != end);           // we can't work inplace
 8002fc0:	4288      	cmp	r0, r1
// - cost of each iteration, approximately: 8ms
// - but our time to do each iteration is limited by software SHA256 in ae_pair_unlock
//
    int
ae_stretch_iter(const uint8_t start[32], uint8_t end[32], int iterations)
{
 8002fc2:	b570      	push	{r4, r5, r6, lr}
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	4616      	mov	r6, r2
    ASSERT(start != end);           // we can't work inplace
 8002fc8:	d102      	bne.n	8002fd0 <ae_stretch_iter+0x10>
 8002fca:	480f      	ldr	r0, [pc, #60]	; (8003008 <ae_stretch_iter+0x48>)
 8002fcc:	f7fd fa00 	bl	80003d0 <fatal_error>
    memcpy(end, start, 32);
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	f100 0220 	add.w	r2, r0, #32
 8002fd6:	f850 1b04 	ldr.w	r1, [r0], #4
 8002fda:	f843 1b04 	str.w	r1, [r3], #4
 8002fde:	4290      	cmp	r0, r2
 8002fe0:	d1f9      	bne.n	8002fd6 <ae_stretch_iter+0x16>

    for(int i=0; i<iterations; i++) {
 8002fe2:	2500      	movs	r5, #0
 8002fe4:	42b5      	cmp	r5, r6
 8002fe6:	da0a      	bge.n	8002ffe <ae_stretch_iter+0x3e>
        // must unlock again, because pin_stretch is an auth'd key
        if(ae_pair_unlock()) return -2;
 8002fe8:	f7ff fb18 	bl	800261c <ae_pair_unlock>
 8002fec:	b948      	cbnz	r0, 8003002 <ae_stretch_iter+0x42>

        int rv = ae_hmac32(KEYNUM_pin_stretch, end, end);
 8002fee:	4622      	mov	r2, r4
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	2002      	movs	r0, #2
 8002ff4:	f7ff fb2f 	bl	8002656 <ae_hmac32>
        RET_IF_BAD(rv);
 8002ff8:	b928      	cbnz	r0, 8003006 <ae_stretch_iter+0x46>
ae_stretch_iter(const uint8_t start[32], uint8_t end[32], int iterations)
{
    ASSERT(start != end);           // we can't work inplace
    memcpy(end, start, 32);

    for(int i=0; i<iterations; i++) {
 8002ffa:	3501      	adds	r5, #1
 8002ffc:	e7f2      	b.n	8002fe4 <ae_stretch_iter+0x24>

        int rv = ae_hmac32(KEYNUM_pin_stretch, end, end);
        RET_IF_BAD(rv);
    }

    return 0;
 8002ffe:	2000      	movs	r0, #0
 8003000:	bd70      	pop	{r4, r5, r6, pc}
    ASSERT(start != end);           // we can't work inplace
    memcpy(end, start, 32);

    for(int i=0; i<iterations; i++) {
        // must unlock again, because pin_stretch is an auth'd key
        if(ae_pair_unlock()) return -2;
 8003002:	f06f 0001 	mvn.w	r0, #1
        int rv = ae_hmac32(KEYNUM_pin_stretch, end, end);
        RET_IF_BAD(rv);
    }

    return 0;
}
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	08006686 	.word	0x08006686

0800300c <ae_mixin_key>:
// Apply HMAC using secret in chip as a HMAC key, then encrypt
// the result a little because read in clear over bus.
//
    int
ae_mixin_key(uint8_t keynum, const uint8_t start[32], uint8_t end[32])
{
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	b09e      	sub	sp, #120	; 0x78
    ASSERT(start != end);           // we can't work inplace
 8003010:	4291      	cmp	r1, r2
// Apply HMAC using secret in chip as a HMAC key, then encrypt
// the result a little because read in clear over bus.
//
    int
ae_mixin_key(uint8_t keynum, const uint8_t start[32], uint8_t end[32])
{
 8003012:	460e      	mov	r6, r1
 8003014:	4615      	mov	r5, r2
 8003016:	f88d 0007 	strb.w	r0, [sp, #7]
    ASSERT(start != end);           // we can't work inplace
 800301a:	d102      	bne.n	8003022 <ae_mixin_key+0x16>
 800301c:	481c      	ldr	r0, [pc, #112]	; (8003090 <ae_mixin_key+0x84>)
 800301e:	f7fd f9d7 	bl	80003d0 <fatal_error>

    if(ae_pair_unlock()) return -1;
 8003022:	f7ff fafb 	bl	800261c <ae_pair_unlock>
 8003026:	4604      	mov	r4, r0
 8003028:	bb50      	cbnz	r0, 8003080 <ae_mixin_key+0x74>

    if(keynum != 0) {
 800302a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800302e:	b128      	cbz	r0, 800303c <ae_mixin_key+0x30>
        int rv = ae_hmac32(keynum, start, end);
 8003030:	462a      	mov	r2, r5
 8003032:	4631      	mov	r1, r6
 8003034:	f7ff fb0f 	bl	8002656 <ae_hmac32>
        RET_IF_BAD(rv);
 8003038:	b128      	cbz	r0, 8003046 <ae_mixin_key+0x3a>
 800303a:	e024      	b.n	8003086 <ae_mixin_key+0x7a>
    } else {
        memset(end, 0, 32);
 800303c:	2220      	movs	r2, #32
 800303e:	4621      	mov	r1, r4
 8003040:	4628      	mov	r0, r5
 8003042:	f003 fae8 	bl	8006616 <memset>
    // use the value provided in cleartext[sic--it's not] write back shortly (to test it).
    // Solution: one more SHA256, and to be safe, mixin lots of values!

	SHA256_CTX ctx;

    sha256_init(&ctx);
 8003046:	a802      	add	r0, sp, #8
 8003048:	f002 fb96 	bl	8005778 <sha256_init>
    sha256_update(&ctx, rom_secrets->pairing_secret, 32);
 800304c:	a802      	add	r0, sp, #8
 800304e:	2220      	movs	r2, #32
 8003050:	4910      	ldr	r1, [pc, #64]	; (8003094 <ae_mixin_key+0x88>)
 8003052:	f002 fbbb 	bl	80057cc <sha256_update>
    sha256_update(&ctx, start, 32);
 8003056:	4631      	mov	r1, r6
 8003058:	a802      	add	r0, sp, #8
 800305a:	2220      	movs	r2, #32
 800305c:	f002 fbb6 	bl	80057cc <sha256_update>
    sha256_update(&ctx, &keynum, 1);
 8003060:	f10d 0107 	add.w	r1, sp, #7
 8003064:	a802      	add	r0, sp, #8
 8003066:	2201      	movs	r2, #1
 8003068:	f002 fbb0 	bl	80057cc <sha256_update>
    sha256_update(&ctx, end, 32);
 800306c:	4629      	mov	r1, r5
 800306e:	a802      	add	r0, sp, #8
 8003070:	2220      	movs	r2, #32
 8003072:	f002 fbab 	bl	80057cc <sha256_update>
    sha256_final(&ctx, end);
 8003076:	4629      	mov	r1, r5
 8003078:	a802      	add	r0, sp, #8
 800307a:	f002 fbc5 	bl	8005808 <sha256_final>

    return 0;
 800307e:	e003      	b.n	8003088 <ae_mixin_key+0x7c>
    int
ae_mixin_key(uint8_t keynum, const uint8_t start[32], uint8_t end[32])
{
    ASSERT(start != end);           // we can't work inplace

    if(ae_pair_unlock()) return -1;
 8003080:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003084:	e000      	b.n	8003088 <ae_mixin_key+0x7c>
 8003086:	4604      	mov	r4, r0
    sha256_update(&ctx, &keynum, 1);
    sha256_update(&ctx, end, 32);
    sha256_final(&ctx, end);

    return 0;
}
 8003088:	4620      	mov	r0, r4
 800308a:	b01e      	add	sp, #120	; 0x78
 800308c:	bd70      	pop	{r4, r5, r6, pc}
 800308e:	bf00      	nop
 8003090:	08006686 	.word	0x08006686
 8003094:	08007800 	.word	0x08007800

08003098 <delay_ms>:
//
    void
delay_ms(int ms)
{
    // Clear the COUNTFLAG and reset value to zero
    SysTick->VAL = 0;
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <delay_ms+0x18>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
    //SysTick->CTRL;  

    // Wait for ticks to happen
    while(ms > 0) {
 800309e:	2800      	cmp	r0, #0
 80030a0:	dd05      	ble.n	80030ae <delay_ms+0x16>
        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	03d2      	lsls	r2, r2, #15
            ms--;
 80030a6:	bf48      	it	mi
 80030a8:	f100 30ff 	addmi.w	r0, r0, #4294967295	; 0xffffffff
 80030ac:	e7f7      	b.n	800309e <delay_ms+0x6>
        }
    }
}
 80030ae:	4770      	bx	lr
 80030b0:	e000e010 	.word	0xe000e010

080030b4 <delay_us>:
// delay_us()
//
    void
delay_us(int us)
{
    if(us > 1000) {
 80030b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8

// delay_us()
//
    void
delay_us(int us)
{
 80030b8:	b507      	push	{r0, r1, r2, lr}
    if(us > 1000) {
 80030ba:	dd08      	ble.n	80030ce <delay_us+0x1a>
        // big round up
        delay_ms((us + 500) / 1000);
 80030bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c0:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 80030c4:	fb90 f0f3 	sdiv	r0, r0, r3
 80030c8:	f7ff ffe6 	bl	8003098 <delay_ms>
 80030cc:	e00c      	b.n	80030e8 <delay_us+0x34>

    } else {
        // XXX calibrate this
        for(volatile int i=0; i<(10000*us); i++) {
 80030ce:	2300      	movs	r3, #0
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80030d6:	4358      	muls	r0, r3
 80030d8:	9b01      	ldr	r3, [sp, #4]
 80030da:	4298      	cmp	r0, r3
 80030dc:	dd04      	ble.n	80030e8 <delay_us+0x34>
 80030de:	bf00      	nop
 80030e0:	9b01      	ldr	r3, [sp, #4]
 80030e2:	3301      	adds	r3, #1
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	e7f7      	b.n	80030d8 <delay_us+0x24>
            __NOP();
        }
    }
}
 80030e8:	b003      	add	sp, #12
 80030ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080030f0 <gpio_setup>:
    // NOTES:
    // - try not to limit PCB changes for future revs; leave unused unchanged.
    // - oled_setup() uses pins on PA6 thru PA8

    // enable clock to that part of chip
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <gpio_setup+0x5c>)
            .Pull = GPIO_NOPULL,
            .Speed = GPIO_SPEED_FREQ_LOW,
            .Alternate = 0,
        };

        HAL_GPIO_Init(DFU_BTN_PORT, &setup);
 80030f2:	4817      	ldr	r0, [pc, #92]	; (8003150 <gpio_setup+0x60>)
    // NOTES:
    // - try not to limit PCB changes for future revs; leave unused unchanged.
    // - oled_setup() uses pins on PA6 thru PA8

    // enable clock to that part of chip
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
//
// set directions, lock critical ones, etc.
//
    void
gpio_setup(void)
{
 80030f6:	b530      	push	{r4, r5, lr}
    // NOTES:
    // - try not to limit PCB changes for future revs; leave unused unchanged.
    // - oled_setup() uses pins on PA6 thru PA8

    // enable clock to that part of chip
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80030fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c

        HAL_GPIO_Init(DFU_BTN_PORT, &setup);
    }

    {   // Onewire bus pin used for ATECC508A comms
        GPIO_InitTypeDef setup = {
 8003100:	4d14      	ldr	r5, [pc, #80]	; (8003154 <gpio_setup+0x64>)
//
// set directions, lock critical ones, etc.
//
    void
gpio_setup(void)
{
 8003102:	b089      	sub	sp, #36	; 0x24
    // NOTES:
    // - try not to limit PCB changes for future revs; leave unused unchanged.
    // - oled_setup() uses pins on PA6 thru PA8

    // enable clock to that part of chip
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003104:	f002 0201 	and.w	r2, r2, #1
 8003108:	9201      	str	r2, [sp, #4]
 800310a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800310e:	f042 0202 	orr.w	r2, r2, #2
 8003112:	64da      	str	r2, [r3, #76]	; 0x4c
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	9302      	str	r3, [sp, #8]
 800311c:	9b02      	ldr	r3, [sp, #8]

    {   // DFU button
        GPIO_InitTypeDef setup = {
 800311e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003122:	9303      	str	r3, [sp, #12]
            .Pull = GPIO_NOPULL,
            .Speed = GPIO_SPEED_FREQ_LOW,
            .Alternate = 0,
        };

        HAL_GPIO_Init(DFU_BTN_PORT, &setup);
 8003124:	a903      	add	r1, sp, #12
    // enable clock to that part of chip
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    {   // DFU button
        GPIO_InitTypeDef setup = {
 8003126:	2300      	movs	r3, #0
 8003128:	9304      	str	r3, [sp, #16]
 800312a:	9305      	str	r3, [sp, #20]
 800312c:	9306      	str	r3, [sp, #24]
 800312e:	9307      	str	r3, [sp, #28]
            .Pull = GPIO_NOPULL,
            .Speed = GPIO_SPEED_FREQ_LOW,
            .Alternate = 0,
        };

        HAL_GPIO_Init(DFU_BTN_PORT, &setup);
 8003130:	f7fd fe9e 	bl	8000e70 <HAL_GPIO_Init>
    }

    {   // Onewire bus pin used for ATECC508A comms
        GPIO_InitTypeDef setup = {
 8003134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003136:	ac03      	add	r4, sp, #12
 8003138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800313a:	682b      	ldr	r3, [r5, #0]
 800313c:	6023      	str	r3, [r4, #0]
            .Pull = GPIO_NOPULL,
            .Speed = GPIO_SPEED_FREQ_MEDIUM,
            .Alternate = GPIO_AF8_UART4,
        };

        HAL_GPIO_Init(ONEWIRE_PORT, &setup);
 800313e:	a903      	add	r1, sp, #12
 8003140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003144:	f7fd fe94 	bl	8000e70 <HAL_GPIO_Init>

    // elsewhere...
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
#endif
}
 8003148:	b009      	add	sp, #36	; 0x24
 800314a:	bd30      	pop	{r4, r5, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	48000400 	.word	0x48000400
 8003154:	08006f5c 	.word	0x08006f5c

08003158 <dfu_button_pressed>:
//
// sample the DFU button
//
    bool
dfu_button_pressed(void)
{
 8003158:	b508      	push	{r3, lr}
    return (HAL_GPIO_ReadPin(DFU_BTN_PORT, DFU_BTN_PIN) == GPIO_PIN_SET);
 800315a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800315e:	4803      	ldr	r0, [pc, #12]	; (800316c <dfu_button_pressed+0x14>)
 8003160:	f7fd fffe 	bl	8001160 <HAL_GPIO_ReadPin>
}
 8003164:	1e43      	subs	r3, r0, #1
 8003166:	4258      	negs	r0, r3
 8003168:	4158      	adcs	r0, r3
 800316a:	bd08      	pop	{r3, pc}
 800316c:	48000400 	.word	0x48000400

08003170 <xor_mixin>:
// Equality check.
bool check_equal(const void *aV, const void *bV, int len);

// XOR-mixin more bytes; acc = acc XOR more for each byte
void static inline xor_mixin(uint8_t *acc, const uint8_t *more, int len)
{
 8003170:	b510      	push	{r4, lr}
 8003172:	3901      	subs	r1, #1
 8003174:	4402      	add	r2, r0
	for(; len; len--, more++, acc++) {
 8003176:	4290      	cmp	r0, r2
 8003178:	d006      	beq.n	8003188 <xor_mixin+0x18>
		*(acc) ^= *(more);
 800317a:	7804      	ldrb	r4, [r0, #0]
 800317c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003180:	4063      	eors	r3, r4
 8003182:	f800 3b01 	strb.w	r3, [r0], #1
 8003186:	e7f6      	b.n	8003176 <xor_mixin+0x6>
	}
}
 8003188:	bd10      	pop	{r4, pc}
	...

0800318c <_hmac_attempt>:
//
// Maybe should be proper HMAC from fips std? Can be changed later.
//
    static void
_hmac_attempt(const pinAttempt_t *args, uint8_t result[32])
{
 800318c:	b530      	push	{r4, r5, lr}
 800318e:	b09d      	sub	sp, #116	; 0x74
 8003190:	4605      	mov	r5, r0

	SHA256_CTX ctx;

    sha256_init(&ctx);
 8003192:	4668      	mov	r0, sp
//
// Maybe should be proper HMAC from fips std? Can be changed later.
//
    static void
_hmac_attempt(const pinAttempt_t *args, uint8_t result[32])
{
 8003194:	460c      	mov	r4, r1

	SHA256_CTX ctx;

    sha256_init(&ctx);
 8003196:	f002 faef 	bl	8005778 <sha256_init>
    sha256_update(&ctx, rom_secrets->pairing_secret, 32);
 800319a:	2220      	movs	r2, #32
 800319c:	4914      	ldr	r1, [pc, #80]	; (80031f0 <_hmac_attempt+0x64>)
 800319e:	4668      	mov	r0, sp
 80031a0:	f002 fb14 	bl	80057cc <sha256_update>
    sha256_update(&ctx, reboot_seed_base, 32);
 80031a4:	2220      	movs	r2, #32
 80031a6:	4913      	ldr	r1, [pc, #76]	; (80031f4 <_hmac_attempt+0x68>)
 80031a8:	4668      	mov	r0, sp
 80031aa:	f002 fb0f 	bl	80057cc <sha256_update>
    sha256_update(&ctx, (uint8_t *)args, offsetof(pinAttempt_t, hmac));
 80031ae:	2244      	movs	r2, #68	; 0x44
 80031b0:	4629      	mov	r1, r5
 80031b2:	4668      	mov	r0, sp
 80031b4:	f002 fb0a 	bl	80057cc <sha256_update>

    if(args->magic_value == PA_MAGIC_V2) {
 80031b8:	682a      	ldr	r2, [r5, #0]
 80031ba:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <_hmac_attempt+0x6c>)
 80031bc:	429a      	cmp	r2, r3
 80031be:	d105      	bne.n	80031cc <_hmac_attempt+0x40>
        sha256_update(&ctx, (uint8_t *)args->cached_main_pin,
 80031c0:	2220      	movs	r2, #32
 80031c2:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
 80031c6:	4668      	mov	r0, sp
 80031c8:	f002 fb00 	bl	80057cc <sha256_update>
                                msizeof(pinAttempt_t, cached_main_pin));
    }

    sha256_final(&ctx, result);
 80031cc:	4621      	mov	r1, r4
 80031ce:	4668      	mov	r0, sp
 80031d0:	f002 fb1a 	bl	8005808 <sha256_final>

    // and a second-sha256 on that, just in case.
    sha256_init(&ctx);
 80031d4:	4668      	mov	r0, sp
 80031d6:	f002 facf 	bl	8005778 <sha256_init>
    sha256_update(&ctx, result, 32);
 80031da:	2220      	movs	r2, #32
 80031dc:	4621      	mov	r1, r4
 80031de:	4668      	mov	r0, sp
 80031e0:	f002 faf4 	bl	80057cc <sha256_update>
    sha256_final(&ctx, result);
 80031e4:	4621      	mov	r1, r4
 80031e6:	4668      	mov	r0, sp
 80031e8:	f002 fb0e 	bl	8005808 <sha256_final>
}
 80031ec:	b01d      	add	sp, #116	; 0x74
 80031ee:	bd30      	pop	{r4, r5, pc}
 80031f0:	08007800 	.word	0x08007800
 80031f4:	10007c00 	.word	0x10007c00
 80031f8:	2eaf6312 	.word	0x2eaf6312

080031fc <pin_hash>:
//
// Hash up a string of digits in 32-byte goodness.
//
    static void
pin_hash(const char *pin, int pin_len, uint8_t result[32], uint32_t purpose)
{
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	b09e      	sub	sp, #120	; 0x78
    ASSERT(pin_len <= MAX_PIN_LEN);
 8003200:	2920      	cmp	r1, #32
//
// Hash up a string of digits in 32-byte goodness.
//
    static void
pin_hash(const char *pin, int pin_len, uint8_t result[32], uint32_t purpose)
{
 8003202:	4606      	mov	r6, r0
 8003204:	460d      	mov	r5, r1
 8003206:	4614      	mov	r4, r2
 8003208:	9301      	str	r3, [sp, #4]
    ASSERT(pin_len <= MAX_PIN_LEN);
 800320a:	dd02      	ble.n	8003212 <pin_hash+0x16>
 800320c:	4819      	ldr	r0, [pc, #100]	; (8003274 <pin_hash+0x78>)
 800320e:	f7fd f8df 	bl	80003d0 <fatal_error>

    if(pin_len == 0) {
 8003212:	b921      	cbnz	r1, 800321e <pin_hash+0x22>
        // zero-length PIN is considered the "blank" one: all zero
        memset(result, 0, 32);
 8003214:	2220      	movs	r2, #32
 8003216:	4620      	mov	r0, r4
 8003218:	f003 f9fd 	bl	8006616 <memset>
 800321c:	e027      	b.n	800326e <pin_hash+0x72>

        return;
    }

	SHA256_CTX ctx;
    sha256_init(&ctx);
 800321e:	a802      	add	r0, sp, #8
 8003220:	f002 faaa 	bl	8005778 <sha256_init>

    sha256_update(&ctx, rom_secrets->pairing_secret, 32);
 8003224:	2220      	movs	r2, #32
 8003226:	4914      	ldr	r1, [pc, #80]	; (8003278 <pin_hash+0x7c>)
 8003228:	a802      	add	r0, sp, #8
 800322a:	f002 facf 	bl	80057cc <sha256_update>
    sha256_update(&ctx, (uint8_t *)&purpose, 4);
 800322e:	2204      	movs	r2, #4
 8003230:	eb0d 0102 	add.w	r1, sp, r2
 8003234:	a802      	add	r0, sp, #8
 8003236:	f002 fac9 	bl	80057cc <sha256_update>
    sha256_update(&ctx, (uint8_t *)pin, pin_len);
 800323a:	462a      	mov	r2, r5
 800323c:	4631      	mov	r1, r6
 800323e:	a802      	add	r0, sp, #8
 8003240:	f002 fac4 	bl	80057cc <sha256_update>
    sha256_update(&ctx, rom_secrets->otp_key, 32);
 8003244:	2220      	movs	r2, #32
 8003246:	490d      	ldr	r1, [pc, #52]	; (800327c <pin_hash+0x80>)
 8003248:	a802      	add	r0, sp, #8
 800324a:	f002 fabf 	bl	80057cc <sha256_update>

    sha256_final(&ctx, result);
 800324e:	4621      	mov	r1, r4
 8003250:	a802      	add	r0, sp, #8
 8003252:	f002 fad9 	bl	8005808 <sha256_final>

    // and a second-sha256 on that, just in case.
    sha256_init(&ctx);
 8003256:	a802      	add	r0, sp, #8
 8003258:	f002 fa8e 	bl	8005778 <sha256_init>
    sha256_update(&ctx, result, 32);
 800325c:	4621      	mov	r1, r4
 800325e:	a802      	add	r0, sp, #8
 8003260:	2220      	movs	r2, #32
 8003262:	f002 fab3 	bl	80057cc <sha256_update>
    sha256_final(&ctx, result);
 8003266:	4621      	mov	r1, r4
 8003268:	a802      	add	r0, sp, #8
 800326a:	f002 facd 	bl	8005808 <sha256_final>
}
 800326e:	b01e      	add	sp, #120	; 0x78
 8003270:	bd70      	pop	{r4, r5, r6, pc}
 8003272:	bf00      	nop
 8003274:	08006686 	.word	0x08006686
 8003278:	08007800 	.word	0x08007800
 800327c:	08007870 	.word	0x08007870

08003280 <_validate_attempt>:

// _validate_attempt()
//
    static int
_validate_attempt(pinAttempt_t *args, bool first_time)
{
 8003280:	b510      	push	{r4, lr}
 8003282:	4604      	mov	r4, r0
 8003284:	b088      	sub	sp, #32
    if(first_time) {
 8003286:	b961      	cbnz	r1, 80032a2 <_validate_attempt+0x22>
        // no hmac needed for setup call
    } else {
        // if hmac is defined, better be right.
        uint8_t     actual[32];

        _hmac_attempt(args, actual);
 8003288:	4669      	mov	r1, sp
 800328a:	f7ff ff7f 	bl	800318c <_hmac_attempt>

        if(!check_equal(actual, args->hmac, 32)) {
 800328e:	2220      	movs	r2, #32
 8003290:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8003294:	4668      	mov	r0, sp
 8003296:	f7fe fe45 	bl	8001f24 <check_equal>
 800329a:	b910      	cbnz	r0, 80032a2 <_validate_attempt+0x22>
            // hmac is wrong?
            return EPIN_HMAC_FAIL;
 800329c:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80032a0:	e021      	b.n	80032e6 <_validate_attempt+0x66>
        }
    }

    // check fields.
    if(args->magic_value == PA_MAGIC_V2) {
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <_validate_attempt+0x6c>)
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d118      	bne.n	80032dc <_validate_attempt+0x5c>
    } else {
        return EPIN_BAD_MAGIC;
    }

    // check fields
    if(args->pin_len > MAX_PIN_LEN) return EPIN_RANGE_ERR;
 80032aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	dc18      	bgt.n	80032e2 <_validate_attempt+0x62>
    if(args->old_pin_len > MAX_PIN_LEN) return EPIN_RANGE_ERR;
 80032b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	dc14      	bgt.n	80032e2 <_validate_attempt+0x62>
    if(args->new_pin_len > MAX_PIN_LEN) return EPIN_RANGE_ERR;
 80032b8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80032bc:	2b20      	cmp	r3, #32
 80032be:	dc10      	bgt.n	80032e2 <_validate_attempt+0x62>
    if((args->change_flags & CHANGE__MASK) != args->change_flags) return EPIN_RANGE_ERR;
 80032c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032c2:	f640 733f 	movw	r3, #3903	; 0xf3f
 80032c6:	4013      	ands	r3, r2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d10a      	bne.n	80032e2 <_validate_attempt+0x62>

    if((args->is_secondary & 0x1) != args->is_secondary) return EPIN_RANGE_ERR;
 80032cc:	6863      	ldr	r3, [r4, #4]
 80032ce:	f033 0301 	bics.w	r3, r3, #1
        
    return 0;
 80032d2:	bf14      	ite	ne
 80032d4:	f06f 0066 	mvnne.w	r0, #102	; 0x66
 80032d8:	2000      	moveq	r0, #0
 80032da:	e004      	b.n	80032e6 <_validate_attempt+0x66>

    // check fields.
    if(args->magic_value == PA_MAGIC_V2) {
        // ok
    } else {
        return EPIN_BAD_MAGIC;
 80032dc:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80032e0:	e001      	b.n	80032e6 <_validate_attempt+0x66>
    }

    // check fields
    if(args->pin_len > MAX_PIN_LEN) return EPIN_RANGE_ERR;
 80032e2:	f06f 0066 	mvn.w	r0, #102	; 0x66
    if((args->change_flags & CHANGE__MASK) != args->change_flags) return EPIN_RANGE_ERR;

    if((args->is_secondary & 0x1) != args->is_secondary) return EPIN_RANGE_ERR;
        
    return 0;
}
 80032e6:	b008      	add	sp, #32
 80032e8:	bd10      	pop	{r4, pc}
 80032ea:	bf00      	nop
 80032ec:	2eaf6312 	.word	0x2eaf6312

080032f0 <warmup_ae>:

// warmup_ae()
//
    static int
warmup_ae(void)
{
 80032f0:	b510      	push	{r4, lr}
    ae_setup();
 80032f2:	f7fe ffad 	bl	8002250 <ae_setup>
 80032f6:	2405      	movs	r4, #5

    for(int retry=0; retry<5; retry++) {
        if(!ae_probe()) break;
 80032f8:	f7ff f9f4 	bl	80026e4 <ae_probe>
 80032fc:	b108      	cbz	r0, 8003302 <warmup_ae+0x12>
    static int
warmup_ae(void)
{
    ae_setup();

    for(int retry=0; retry<5; retry++) {
 80032fe:	3c01      	subs	r4, #1
 8003300:	d1fa      	bne.n	80032f8 <warmup_ae+0x8>
        if(!ae_probe()) break;
    }

    if(ae_pair_unlock()) return -1;
 8003302:	f7ff f98b 	bl	800261c <ae_pair_unlock>
 8003306:	4604      	mov	r4, r0
 8003308:	b910      	cbnz	r0, 8003310 <warmup_ae+0x20>

    // reset watchdog timer
    ae_keep_alive();
 800330a:	f7fe ffd5 	bl	80022b8 <ae_keep_alive>

    return 0;
 800330e:	e001      	b.n	8003314 <warmup_ae+0x24>

    for(int retry=0; retry<5; retry++) {
        if(!ae_probe()) break;
    }

    if(ae_pair_unlock()) return -1;
 8003310:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff

    // reset watchdog timer
    ae_keep_alive();

    return 0;
}
 8003314:	4620      	mov	r0, r4
 8003316:	bd10      	pop	{r4, pc}

08003318 <_read_slot_as_counter>:

// _read_slot_as_counter()
//
    static int
_read_slot_as_counter(uint8_t slot, uint32_t *dest)
{
 8003318:	b530      	push	{r4, r5, lr}
 800331a:	b091      	sub	sp, #68	; 0x44
    // Important that this be authenticated.
    //
    // - using first 32-bits only, others will be zero/ignored
    // - but need to read whole thing for the digest check

    uint32_t padded[32/4] = { 0 };
 800331c:	2220      	movs	r2, #32

// _read_slot_as_counter()
//
    static int
_read_slot_as_counter(uint8_t slot, uint32_t *dest)
{
 800331e:	4604      	mov	r4, r0
 8003320:	460d      	mov	r5, r1
    // Important that this be authenticated.
    //
    // - using first 32-bits only, others will be zero/ignored
    // - but need to read whole thing for the digest check

    uint32_t padded[32/4] = { 0 };
 8003322:	4668      	mov	r0, sp
 8003324:	2100      	movs	r1, #0
 8003326:	f003 f976 	bl	8006616 <memset>
    ae_pair_unlock();
 800332a:	f7ff f977 	bl	800261c <ae_pair_unlock>
    if(ae_read_data_slot(slot, (uint8_t *)padded, 32)) return -1;
 800332e:	2220      	movs	r2, #32
 8003330:	4669      	mov	r1, sp
 8003332:	4620      	mov	r0, r4
 8003334:	f7ff fc68 	bl	8002c08 <ae_read_data_slot>
 8003338:	b110      	cbz	r0, 8003340 <_read_slot_as_counter+0x28>
 800333a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800333e:	e011      	b.n	8003364 <_read_slot_as_counter+0x4c>

    uint8_t tempkey[32];
    ae_pair_unlock();
 8003340:	f7ff f96c 	bl	800261c <ae_pair_unlock>
    if(ae_gendig_slot(slot, (const uint8_t *)padded, tempkey)) return -1;
 8003344:	4620      	mov	r0, r4
 8003346:	aa08      	add	r2, sp, #32
 8003348:	4669      	mov	r1, sp
 800334a:	f7ff fa5f 	bl	800280c <ae_gendig_slot>
 800334e:	4604      	mov	r4, r0
 8003350:	2800      	cmp	r0, #0
 8003352:	d1f2      	bne.n	800333a <_read_slot_as_counter+0x22>

    if(!ae_is_correct_tempkey(tempkey)) fatal_mitm();
 8003354:	a808      	add	r0, sp, #32
 8003356:	f7ff f893 	bl	8002480 <ae_is_correct_tempkey>
 800335a:	b908      	cbnz	r0, 8003360 <_read_slot_as_counter+0x48>
 800335c:	f7fd f886 	bl	800046c <fatal_mitm>

    *dest = padded[0];
 8003360:	9b00      	ldr	r3, [sp, #0]
 8003362:	602b      	str	r3, [r5, #0]

    return 0;
}
 8003364:	4620      	mov	r0, r4
 8003366:	b011      	add	sp, #68	; 0x44
 8003368:	bd30      	pop	{r4, r5, pc}

0800336a <get_last_success>:
// not really so strong with the 608a, since it's all enforced on that side, but
// we'll do it anyway.
//
    static int __attribute__ ((noinline))
get_last_success(pinAttempt_t *args)
{
 800336a:	b530      	push	{r4, r5, lr}
 800336c:	b095      	sub	sp, #84	; 0x54
 800336e:	4604      	mov	r4, r0
    const int slot = KEYNUM_lastgood;

    ae_pair_unlock();
 8003370:	f7ff f954 	bl	800261c <ae_pair_unlock>

    // Read counter value of last-good login. Important that this be authenticated.
    // - using first 32-bits only, others will be zero
    uint32_t padded[32/4] = { 0 };
 8003374:	2220      	movs	r2, #32
 8003376:	2100      	movs	r1, #0
 8003378:	a804      	add	r0, sp, #16
 800337a:	f003 f94c 	bl	8006616 <memset>
    if(ae_read_data_slot(slot, (uint8_t *)padded, 32)) return -1;
 800337e:	2220      	movs	r2, #32
 8003380:	a904      	add	r1, sp, #16
 8003382:	2005      	movs	r0, #5
 8003384:	f7ff fc40 	bl	8002c08 <ae_read_data_slot>
 8003388:	b110      	cbz	r0, 8003390 <get_last_success+0x26>
 800338a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800338e:	e042      	b.n	8003416 <get_last_success+0xac>

    uint8_t tempkey[32];
    ae_pair_unlock();
 8003390:	f7ff f944 	bl	800261c <ae_pair_unlock>
    if(ae_gendig_slot(slot, (const uint8_t *)padded, tempkey)) return -1;
 8003394:	aa0c      	add	r2, sp, #48	; 0x30
 8003396:	a904      	add	r1, sp, #16
 8003398:	2005      	movs	r0, #5
 800339a:	f7ff fa37 	bl	800280c <ae_gendig_slot>
 800339e:	4605      	mov	r5, r0
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d1f2      	bne.n	800338a <get_last_success+0x20>

    if(!ae_is_correct_tempkey(tempkey)) fatal_mitm();
 80033a4:	a80c      	add	r0, sp, #48	; 0x30
 80033a6:	f7ff f86b 	bl	8002480 <ae_is_correct_tempkey>
 80033aa:	b908      	cbnz	r0, 80033b0 <get_last_success+0x46>
 80033ac:	f7fd f85e 	bl	800046c <fatal_mitm>

    // Read two values from data slots
    uint32_t lastgood=0, match_count=0, counter=0, duress_lastgood=0;
    if(_read_slot_as_counter(KEYNUM_lastgood, &lastgood)) return -1;
 80033b0:	4669      	mov	r1, sp
 80033b2:	2005      	movs	r0, #5
    if(ae_gendig_slot(slot, (const uint8_t *)padded, tempkey)) return -1;

    if(!ae_is_correct_tempkey(tempkey)) fatal_mitm();

    // Read two values from data slots
    uint32_t lastgood=0, match_count=0, counter=0, duress_lastgood=0;
 80033b4:	9500      	str	r5, [sp, #0]
 80033b6:	9501      	str	r5, [sp, #4]
 80033b8:	9502      	str	r5, [sp, #8]
 80033ba:	9503      	str	r5, [sp, #12]
    if(_read_slot_as_counter(KEYNUM_lastgood, &lastgood)) return -1;
 80033bc:	f7ff ffac 	bl	8003318 <_read_slot_as_counter>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d1e2      	bne.n	800338a <get_last_success+0x20>
    if(_read_slot_as_counter(KEYNUM_duress_lastgood, &duress_lastgood)) return -1;
 80033c4:	a903      	add	r1, sp, #12
 80033c6:	200b      	movs	r0, #11
 80033c8:	f7ff ffa6 	bl	8003318 <_read_slot_as_counter>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d1dc      	bne.n	800338a <get_last_success+0x20>
    if(_read_slot_as_counter(KEYNUM_match_count, &match_count)) return -1;
 80033d0:	a901      	add	r1, sp, #4
 80033d2:	2006      	movs	r0, #6
 80033d4:	f7ff ffa0 	bl	8003318 <_read_slot_as_counter>
 80033d8:	4601      	mov	r1, r0
 80033da:	2800      	cmp	r0, #0
 80033dc:	d1d5      	bne.n	800338a <get_last_success+0x20>

    // Read the monotonically-increasing counter
    if(ae_get_counter(&counter, 0)) return -1;
 80033de:	a802      	add	r0, sp, #8
 80033e0:	f7ff facf 	bl	8002982 <ae_get_counter>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d1d0      	bne.n	800338a <get_last_success+0x20>

    // Has the duress PIN been used more recently than real PIN?
    // if so, lie about # of failures to make things look like good login
    if(duress_lastgood > lastgood) {
 80033e8:	9a00      	ldr	r2, [sp, #0]
 80033ea:	9b03      	ldr	r3, [sp, #12]
 80033ec:	9902      	ldr	r1, [sp, #8]
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d903      	bls.n	80033fa <get_last_success+0x90>
        // lie about # of failures, but keep the pin-rate limiting
        args->num_fails = 0;
        args->attempts_left = MAX_TARGET_ATTEMPTS;;
 80033f2:	230d      	movs	r3, #13

    // Has the duress PIN been used more recently than real PIN?
    // if so, lie about # of failures to make things look like good login
    if(duress_lastgood > lastgood) {
        // lie about # of failures, but keep the pin-rate limiting
        args->num_fails = 0;
 80033f4:	6360      	str	r0, [r4, #52]	; 0x34
        args->attempts_left = MAX_TARGET_ATTEMPTS;;
 80033f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80033f8:	e005      	b.n	8003406 <get_last_success+0x9c>
    } else {
        if(lastgood > counter) {
 80033fa:	428a      	cmp	r2, r1
            // monkey business, but impossible, right?!
            args->num_fails = 99;
 80033fc:	bf8b      	itete	hi
 80033fe:	2363      	movhi	r3, #99	; 0x63
        } else {
            args->num_fails = counter - lastgood;
 8003400:	1a8a      	subls	r2, r1, r2
        args->num_fails = 0;
        args->attempts_left = MAX_TARGET_ATTEMPTS;;
    } else {
        if(lastgood > counter) {
            // monkey business, but impossible, right?!
            args->num_fails = 99;
 8003402:	6363      	strhi	r3, [r4, #52]	; 0x34
        } else {
            args->num_fails = counter - lastgood;
 8003404:	6362      	strls	r2, [r4, #52]	; 0x34
        }
    }

    // NOTE: 5LSB of match_count should be stored as zero.
    match_count &= ~31;
 8003406:	9b01      	ldr	r3, [sp, #4]
 8003408:	f023 031f 	bic.w	r3, r3, #31
    if(counter < match_count) {
 800340c:	428b      	cmp	r3, r1
        // typical case: some number of attempts left before death
        args->attempts_left = match_count - counter;
 800340e:	bf8c      	ite	hi
 8003410:	1a5b      	subhi	r3, r3, r1
    } else if(counter >= match_count) {
        // we're a brick now, but maybe say that nicer to customer
        args->attempts_left = 0;
 8003412:	2300      	movls	r3, #0
 8003414:	63a3      	str	r3, [r4, #56]	; 0x38
    }

    return 0;
}
 8003416:	b015      	add	sp, #84	; 0x54
 8003418:	bd30      	pop	{r4, r5, pc}

0800341a <pin_is_blank>:
//
// Is a specific PIN defined already? Not safe to expose this directly to callers!
//
    static bool
pin_is_blank(uint8_t keynum)
{
 800341a:	b510      	push	{r4, lr}
 800341c:	b088      	sub	sp, #32
    uint8_t blank[32] = {0};
 800341e:	2220      	movs	r2, #32
 8003420:	2100      	movs	r1, #0
//
// Is a specific PIN defined already? Not safe to expose this directly to callers!
//
    static bool
pin_is_blank(uint8_t keynum)
{
 8003422:	4604      	mov	r4, r0
    uint8_t blank[32] = {0};
 8003424:	4668      	mov	r0, sp
 8003426:	f003 f8f6 	bl	8006616 <memset>

    ae_reset_chip();
 800342a:	f7fe ff03 	bl	8002234 <ae_reset_chip>
    ae_pair_unlock();
 800342e:	f7ff f8f5 	bl	800261c <ae_pair_unlock>

    // Passing this check with zeros, means PIN was blank.
    // Failure here means nothing (except not blank).
    int is_blank = (ae_checkmac_hard(keynum, blank) == 0);
 8003432:	4669      	mov	r1, sp
 8003434:	4620      	mov	r0, r4
 8003436:	f7ff fa39 	bl	80028ac <ae_checkmac_hard>
 800343a:	4604      	mov	r4, r0

    // CAUTION? We've unlocked something maybe, but it's blank, so...
    ae_reset_chip();
 800343c:	f7fe fefa 	bl	8002234 <ae_reset_chip>

    return is_blank;
}
 8003440:	fab4 f084 	clz	r0, r4
 8003444:	0940      	lsrs	r0, r0, #5
 8003446:	b008      	add	sp, #32
 8003448:	bd10      	pop	{r4, pc}
	...

0800344c <updates_for_good_login>:

// updates_for_good_login()
//
    static int
updates_for_good_login(uint8_t digest[32])
{
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	b08d      	sub	sp, #52	; 0x34
    // User got the main PIN right: update the attempt counters,
    // to document this (lastgood) and also bump the match counter if needed

    uint32_t count;
    int rv = ae_get_counter(&count, 0);
 8003450:	2100      	movs	r1, #0

// updates_for_good_login()
//
    static int
updates_for_good_login(uint8_t digest[32])
{
 8003452:	4606      	mov	r6, r0
    // User got the main PIN right: update the attempt counters,
    // to document this (lastgood) and also bump the match counter if needed

    uint32_t count;
    int rv = ae_get_counter(&count, 0);
 8003454:	a802      	add	r0, sp, #8
 8003456:	f7ff fa94 	bl	8002982 <ae_get_counter>
    if(rv) goto fail;
 800345a:	4601      	mov	r1, r0
 800345c:	2800      	cmp	r0, #0
 800345e:	d13c      	bne.n	80034da <updates_for_good_login+0x8e>

    // Challenge: Have to update both the counter, and the target match value because
    // no other way to have exact value.

    uint32_t mc = (count + MAX_TARGET_ATTEMPTS + 32) & ~31;
 8003460:	9b02      	ldr	r3, [sp, #8]
 8003462:	f103 042d 	add.w	r4, r3, #45	; 0x2d
 8003466:	f024 041f 	bic.w	r4, r4, #31
    ASSERT(mc >= count);
 800346a:	42a3      	cmp	r3, r4
 800346c:	d902      	bls.n	8003474 <updates_for_good_login+0x28>
 800346e:	481e      	ldr	r0, [pc, #120]	; (80034e8 <updates_for_good_login+0x9c>)
 8003470:	f7fc ffae 	bl	80003d0 <fatal_error>

    int bump = (mc - MAX_TARGET_ATTEMPTS) - count;
 8003474:	f06f 050c 	mvn.w	r5, #12
 8003478:	1aed      	subs	r5, r5, r3
 800347a:	4425      	add	r5, r4
    ASSERT(bump >= 1);
 800347c:	1e6b      	subs	r3, r5, #1
 800347e:	2b1f      	cmp	r3, #31
 8003480:	d8f5      	bhi.n	800346e <updates_for_good_login+0x22>
    // Would rather update the counter first, so that a hostile interruption can't increase
    // attempts (altho the attacker knows the pin at that point?!) .. but chip won't
    // let the counter go past the match value, so that has to be first.

    // set the new "match count"
    {   uint32_t    tmp[32/4] = {mc, mc} ;
 8003482:	2720      	movs	r7, #32
 8003484:	463a      	mov	r2, r7
 8003486:	a804      	add	r0, sp, #16
 8003488:	f003 f8c5 	bl	8006616 <memset>
        rv = ae_encrypted_write(KEYNUM_match_count, KEYNUM_main_pin, digest, (void *)tmp, 32);
 800348c:	2103      	movs	r1, #3
 800348e:	9700      	str	r7, [sp, #0]
 8003490:	ab04      	add	r3, sp, #16
 8003492:	4632      	mov	r2, r6
 8003494:	2006      	movs	r0, #6
    // Would rather update the counter first, so that a hostile interruption can't increase
    // attempts (altho the attacker knows the pin at that point?!) .. but chip won't
    // let the counter go past the match value, so that has to be first.

    // set the new "match count"
    {   uint32_t    tmp[32/4] = {mc, mc} ;
 8003496:	9404      	str	r4, [sp, #16]
 8003498:	9405      	str	r4, [sp, #20]
        rv = ae_encrypted_write(KEYNUM_match_count, KEYNUM_main_pin, digest, (void *)tmp, 32);
 800349a:	f7ff fb83 	bl	8002ba4 <ae_encrypted_write>
        if(rv) goto fail;
 800349e:	4601      	mov	r1, r0
 80034a0:	b9d8      	cbnz	r0, 80034da <updates_for_good_login+0x8e>
    }

    // incr the counter a bunch to get to that-13
    uint32_t new_count = 0;
 80034a2:	a80c      	add	r0, sp, #48	; 0x30
    rv = ae_add_counter(&new_count, 0, bump);
 80034a4:	462a      	mov	r2, r5
        rv = ae_encrypted_write(KEYNUM_match_count, KEYNUM_main_pin, digest, (void *)tmp, 32);
        if(rv) goto fail;
    }

    // incr the counter a bunch to get to that-13
    uint32_t new_count = 0;
 80034a6:	f840 1d24 	str.w	r1, [r0, #-36]!
    rv = ae_add_counter(&new_count, 0, bump);
 80034aa:	f7ff fa88 	bl	80029be <ae_add_counter>
    if(rv) goto fail;
 80034ae:	4601      	mov	r1, r0
 80034b0:	b998      	cbnz	r0, 80034da <updates_for_good_login+0x8e>

    ASSERT(new_count == count + bump);
 80034b2:	9b02      	ldr	r3, [sp, #8]
 80034b4:	441d      	add	r5, r3
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	429d      	cmp	r5, r3
 80034ba:	d1d8      	bne.n	800346e <updates_for_good_login+0x22>
    ASSERT(mc > new_count);
 80034bc:	42ac      	cmp	r4, r5
 80034be:	d9d6      	bls.n	800346e <updates_for_good_login+0x22>

    // Update the "last good" counter
    {   uint32_t    tmp[32/4] = {new_count, 0 };
 80034c0:	463a      	mov	r2, r7
 80034c2:	a804      	add	r0, sp, #16
 80034c4:	f003 f8a7 	bl	8006616 <memset>
        rv = ae_encrypted_write(KEYNUM_lastgood, KEYNUM_main_pin, digest, (void *)tmp, 32);
 80034c8:	9700      	str	r7, [sp, #0]
 80034ca:	ab04      	add	r3, sp, #16
 80034cc:	4632      	mov	r2, r6
 80034ce:	2103      	movs	r1, #3
 80034d0:	2005      	movs	r0, #5

    ASSERT(new_count == count + bump);
    ASSERT(mc > new_count);

    // Update the "last good" counter
    {   uint32_t    tmp[32/4] = {new_count, 0 };
 80034d2:	9504      	str	r5, [sp, #16]
        rv = ae_encrypted_write(KEYNUM_lastgood, KEYNUM_main_pin, digest, (void *)tmp, 32);
 80034d4:	f7ff fb66 	bl	8002ba4 <ae_encrypted_write>
        if(rv) goto fail;
 80034d8:	b118      	cbz	r0, 80034e2 <updates_for_good_login+0x96>
    // just be reducing attempt. Also, rate limiting not affected by anything here.

    return 0;

fail:
    ae_reset_chip();
 80034da:	f7fe feab 	bl	8002234 <ae_reset_chip>
    return EPIN_AE_FAIL;
 80034de:	f06f 0069 	mvn.w	r0, #105	; 0x69
}
 80034e2:	b00d      	add	sp, #52	; 0x34
 80034e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	08006686 	.word	0x08006686

080034ec <maybe_brick_myself.part.1>:
// Attempt the provided pin against the "brickme" slot, and if it
// works, immediately destroy the pairing secret so that we become
// a useless brick.
//
    static int
maybe_brick_myself(const char *pin, int pin_len)
 80034ec:	b510      	push	{r4, lr}
 80034ee:	b088      	sub	sp, #32
    uint8_t     digest[32];
    int         rv = 0;

    if(!pin_len) return 0;

    pin_hash(pin, pin_len, digest, PIN_PURPOSE_NORMAL);
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <maybe_brick_myself.part.1+0x34>)
 80034f2:	466a      	mov	r2, sp
 80034f4:	f7ff fe82 	bl	80031fc <pin_hash>

    ae_reset_chip();
 80034f8:	f7fe fe9c 	bl	8002234 <ae_reset_chip>
    rv = ae_pair_unlock();
 80034fc:	f7ff f88e 	bl	800261c <ae_pair_unlock>
    if(rv) return rv;
 8003500:	4604      	mov	r4, r0
 8003502:	b950      	cbnz	r0, 800351a <maybe_brick_myself.part.1+0x2e>

    // Concern: MitM could block this by trashing our write
    // - but they have to do it without causing CRC or other comm error

    if(ae_checkmac(KEYNUM_brickme, digest) == 0) {
 8003504:	4669      	mov	r1, sp
 8003506:	200d      	movs	r0, #13
 8003508:	f7ff f808 	bl	800251c <ae_checkmac>
 800350c:	b918      	cbnz	r0, 8003516 <maybe_brick_myself.part.1+0x2a>
        // success... kinda: brick time.
        ae_destroy_key(KEYNUM_pairing);
 800350e:	2001      	movs	r0, #1
 8003510:	f7ff fc22 	bl	8002d58 <ae_destroy_key>

        rv = 1;
 8003514:	2401      	movs	r4, #1
    }

    ae_reset_chip();
 8003516:	f7fe fe8d 	bl	8002234 <ae_reset_chip>

    return rv;
}
 800351a:	4620      	mov	r0, r4
 800351c:	b008      	add	sp, #32
 800351e:	bd10      	pop	{r4, pc}
 8003520:	334d1858 	.word	0x334d1858

08003524 <pin_hash_attempt>:
// - brickme pin doesn't do the extra KDF step, so it can be fast
// - call with target_kn == 0 to return a mid-state that can be used for both main and duress
//
    static int
pin_hash_attempt(uint8_t target_kn, const char *pin, int pin_len, uint8_t result[32])
{
 8003524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003528:	4605      	mov	r5, r0
 800352a:	b088      	sub	sp, #32
 800352c:	4608      	mov	r0, r1
 800352e:	461c      	mov	r4, r3
    uint8_t tmp[32]; 

    if(pin_len == 0) {
 8003530:	4616      	mov	r6, r2
 8003532:	b92a      	cbnz	r2, 8003540 <pin_hash_attempt+0x1c>
        // zero len PIN is the "blank" value: all zeros, no hashing
        memset(result, 0, 32);
 8003534:	2220      	movs	r2, #32
 8003536:	4631      	mov	r1, r6
 8003538:	4618      	mov	r0, r3
 800353a:	f003 f86c 	bl	8006616 <memset>
 800353e:	e00d      	b.n	800355c <pin_hash_attempt+0x38>

        return 0;
    }

    // quick local hashing
    pin_hash(pin, pin_len, tmp, PIN_PURPOSE_NORMAL);
 8003540:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <pin_hash_attempt+0x7c>)
 8003542:	466a      	mov	r2, sp
 8003544:	4631      	mov	r1, r6
 8003546:	f7ff fe59 	bl	80031fc <pin_hash>

    if(target_kn == KEYNUM_brickme) {
 800354a:	2d0d      	cmp	r5, #13
 800354c:	d108      	bne.n	8003560 <pin_hash_attempt+0x3c>
        // no extra KDF for brickme case
        memcpy(result, tmp, 32);
 800354e:	466d      	mov	r5, sp
 8003550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003554:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        return 0;
 800355c:	2000      	movs	r0, #0
 800355e:	e01c      	b.n	800359a <pin_hash_attempt+0x76>
    }

    // main, duress pins need mega hashing
    int rv = ae_stretch_iter(tmp, result, KDF_ITER_PIN);
 8003560:	2208      	movs	r2, #8
 8003562:	4621      	mov	r1, r4
 8003564:	4668      	mov	r0, sp
 8003566:	f7ff fd2b 	bl	8002fc0 <ae_stretch_iter>
    if(rv) return EPIN_AE_FAIL;
 800356a:	4680      	mov	r8, r0
 800356c:	b988      	cbnz	r0, 8003592 <pin_hash_attempt+0x6e>

    // CAUTION: at this point, we just read the value off the bus
    // in clear text. Don't use that value directly.

    if(target_kn == 0) {
 800356e:	b19d      	cbz	r5, 8003598 <pin_hash_attempt+0x74>
        // let the caller do either/both of the below mixins
        return 0;
    }

    memcpy(tmp, result, 32);
 8003570:	4627      	mov	r7, r4
 8003572:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003574:	466e      	mov	r6, sp
 8003576:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003578:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    if(target_kn == KEYNUM_main_pin) {
 800357c:	2d03      	cmp	r5, #3
    if(target_kn == 0) {
        // let the caller do either/both of the below mixins
        return 0;
    }

    memcpy(tmp, result, 32);
 800357e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    if(target_kn == KEYNUM_main_pin) {
        ae_mixin_key(KEYNUM_pin_attempt, tmp, result);
 8003582:	4622      	mov	r2, r4
 8003584:	4669      	mov	r1, sp
 8003586:	bf0c      	ite	eq
 8003588:	2004      	moveq	r0, #4
    } else {
        ae_mixin_key(0, tmp, result);
 800358a:	4640      	movne	r0, r8
 800358c:	f7ff fd3e 	bl	800300c <ae_mixin_key>
 8003590:	e7e4      	b.n	800355c <pin_hash_attempt+0x38>
        return 0;
    }

    // main, duress pins need mega hashing
    int rv = ae_stretch_iter(tmp, result, KDF_ITER_PIN);
    if(rv) return EPIN_AE_FAIL;
 8003592:	f06f 0069 	mvn.w	r0, #105	; 0x69
 8003596:	e000      	b.n	800359a <pin_hash_attempt+0x76>
    // CAUTION: at this point, we just read the value off the bus
    // in clear text. Don't use that value directly.

    if(target_kn == 0) {
        // let the caller do either/both of the below mixins
        return 0;
 8003598:	4628      	mov	r0, r5
    } else {
        ae_mixin_key(0, tmp, result);
    }

    return 0;
}
 800359a:	b008      	add	sp, #32
 800359c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a0:	334d1858 	.word	0x334d1858

080035a4 <pin_cache_get_key>:

// pin_cache_get_key()
//
    void
pin_cache_get_key(uint8_t key[32])
{
 80035a4:	b510      	push	{r4, lr}
 80035a6:	b09c      	sub	sp, #112	; 0x70
 80035a8:	4604      	mov	r4, r0
    // per-boot unique key.
	SHA256_CTX ctx;

    sha256_init(&ctx);
 80035aa:	4668      	mov	r0, sp
 80035ac:	f002 f8e4 	bl	8005778 <sha256_init>
    sha256_update(&ctx, reboot_seed_base, 32);
 80035b0:	4668      	mov	r0, sp
 80035b2:	2220      	movs	r2, #32
 80035b4:	4906      	ldr	r1, [pc, #24]	; (80035d0 <pin_cache_get_key+0x2c>)
 80035b6:	f002 f909 	bl	80057cc <sha256_update>
    sha256_update(&ctx, rom_secrets->hash_cache_secret, 32);
 80035ba:	2220      	movs	r2, #32
 80035bc:	4668      	mov	r0, sp
 80035be:	4905      	ldr	r1, [pc, #20]	; (80035d4 <pin_cache_get_key+0x30>)
 80035c0:	f002 f904 	bl	80057cc <sha256_update>

    sha256_final(&ctx, key);
 80035c4:	4621      	mov	r1, r4
 80035c6:	4668      	mov	r0, sp
 80035c8:	f002 f91e 	bl	8005808 <sha256_final>
}
 80035cc:	b01c      	add	sp, #112	; 0x70
 80035ce:	bd10      	pop	{r4, pc}
 80035d0:	10007c00 	.word	0x10007c00
 80035d4:	08007a58 	.word	0x08007a58

080035d8 <pin_cache_save>:

// pin_cache_save()
//
    static void
pin_cache_save(pinAttempt_t *args, const uint8_t digest[32])
{
 80035d8:	b530      	push	{r4, r5, lr}
 80035da:	460d      	mov	r5, r1
 80035dc:	b089      	sub	sp, #36	; 0x24
 80035de:	4604      	mov	r4, r0
    // encrypt w/ rom secret + SRAM seed value
    uint8_t     value[32];

    if(!check_all_zeros(digest, 32)) {
 80035e0:	2120      	movs	r1, #32
 80035e2:	4628      	mov	r0, r5
 80035e4:	f7fe fc92 	bl	8001f0c <check_all_zeros>
 80035e8:	b940      	cbnz	r0, 80035fc <pin_cache_save+0x24>
        pin_cache_get_key(value);
 80035ea:	4668      	mov	r0, sp
 80035ec:	f7ff ffda 	bl	80035a4 <pin_cache_get_key>
        xor_mixin(value, digest, 32);
 80035f0:	2220      	movs	r2, #32
 80035f2:	4629      	mov	r1, r5
 80035f4:	4668      	mov	r0, sp
 80035f6:	f7ff fdbb 	bl	8003170 <xor_mixin>
 80035fa:	e004      	b.n	8003606 <pin_cache_save+0x2e>
    } else {
        memset(value, 0, 32);
 80035fc:	2220      	movs	r2, #32
 80035fe:	2100      	movs	r1, #0
 8003600:	4668      	mov	r0, sp
 8003602:	f003 f808 	bl	8006616 <memset>
    }

    ASSERT(args->magic_value == PA_MAGIC_V2);
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <pin_cache_save+0x5c>)
 800360a:	429a      	cmp	r2, r3
 800360c:	d002      	beq.n	8003614 <pin_cache_save+0x3c>
 800360e:	480a      	ldr	r0, [pc, #40]	; (8003638 <pin_cache_save+0x60>)
 8003610:	f7fc fede 	bl	80003d0 <fatal_error>
    memcpy(args->cached_main_pin, value, 32);
 8003614:	466b      	mov	r3, sp
 8003616:	f104 02f8 	add.w	r2, r4, #248	; 0xf8
 800361a:	ad08      	add	r5, sp, #32
 800361c:	461c      	mov	r4, r3
 800361e:	cc03      	ldmia	r4!, {r0, r1}
 8003620:	42ac      	cmp	r4, r5
 8003622:	6010      	str	r0, [r2, #0]
 8003624:	6051      	str	r1, [r2, #4]
 8003626:	4623      	mov	r3, r4
 8003628:	f102 0208 	add.w	r2, r2, #8
 800362c:	d1f6      	bne.n	800361c <pin_cache_save+0x44>
}
 800362e:	b009      	add	sp, #36	; 0x24
 8003630:	bd30      	pop	{r4, r5, pc}
 8003632:	bf00      	nop
 8003634:	2eaf6312 	.word	0x2eaf6312
 8003638:	08006686 	.word	0x08006686

0800363c <pin_cache_restore>:

// pin_cache_restore()
//
    static void
pin_cache_restore(pinAttempt_t *args, uint8_t digest[32])
{
 800363c:	b570      	push	{r4, r5, r6, lr}
    // decrypt w/ rom secret + SRAM seed value

    ASSERT(args->magic_value == PA_MAGIC_V2);
 800363e:	6802      	ldr	r2, [r0, #0]
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <pin_cache_restore+0x4c>)
 8003642:	429a      	cmp	r2, r3

// pin_cache_restore()
//
    static void
pin_cache_restore(pinAttempt_t *args, uint8_t digest[32])
{
 8003644:	b088      	sub	sp, #32
 8003646:	460d      	mov	r5, r1
    // decrypt w/ rom secret + SRAM seed value

    ASSERT(args->magic_value == PA_MAGIC_V2);
 8003648:	d002      	beq.n	8003650 <pin_cache_restore+0x14>
 800364a:	4810      	ldr	r0, [pc, #64]	; (800368c <pin_cache_restore+0x50>)
 800364c:	f7fc fec0 	bl	80003d0 <fatal_error>
    memcpy(digest, args->cached_main_pin, 32);
 8003650:	f100 02f8 	add.w	r2, r0, #248	; 0xf8
 8003654:	460e      	mov	r6, r1
 8003656:	f500 738c 	add.w	r3, r0, #280	; 0x118
 800365a:	6810      	ldr	r0, [r2, #0]
 800365c:	6851      	ldr	r1, [r2, #4]
 800365e:	4634      	mov	r4, r6
 8003660:	c403      	stmia	r4!, {r0, r1}
 8003662:	3208      	adds	r2, #8
 8003664:	429a      	cmp	r2, r3
 8003666:	4626      	mov	r6, r4
 8003668:	d1f7      	bne.n	800365a <pin_cache_restore+0x1e>

    if(!check_all_zeros(digest, 32)) {
 800366a:	2120      	movs	r1, #32
 800366c:	4628      	mov	r0, r5
 800366e:	f7fe fc4d 	bl	8001f0c <check_all_zeros>
 8003672:	b938      	cbnz	r0, 8003684 <pin_cache_restore+0x48>
        uint8_t     key[32];
        pin_cache_get_key(key);
 8003674:	4668      	mov	r0, sp
 8003676:	f7ff ff95 	bl	80035a4 <pin_cache_get_key>

        xor_mixin(digest, key, 32);
 800367a:	2220      	movs	r2, #32
 800367c:	4669      	mov	r1, sp
 800367e:	4628      	mov	r0, r5
 8003680:	f7ff fd76 	bl	8003170 <xor_mixin>
    }
}
 8003684:	b008      	add	sp, #32
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	2eaf6312 	.word	0x2eaf6312
 800368c:	08006686 	.word	0x08006686

08003690 <pin_prefix_words>:
// - rate-limited by the chip, since it takes many iterations of HMAC(key we dont have)
// - hash generated is shown on bus (but further hashing happens after that)
//
    int
pin_prefix_words(const char *pin_prefix, int prefix_len, uint32_t *result)
{
 8003690:	b530      	push	{r4, r5, lr}
 8003692:	b091      	sub	sp, #68	; 0x44
    uint8_t     tmp[32];
    uint8_t     digest[32];

    // hash it up, a little
    pin_hash(pin_prefix, prefix_len, tmp, PIN_PURPOSE_WORDS);
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <pin_prefix_words+0x34>)
// - rate-limited by the chip, since it takes many iterations of HMAC(key we dont have)
// - hash generated is shown on bus (but further hashing happens after that)
//
    int
pin_prefix_words(const char *pin_prefix, int prefix_len, uint32_t *result)
{
 8003696:	4615      	mov	r5, r2
    uint8_t     tmp[32];
    uint8_t     digest[32];

    // hash it up, a little
    pin_hash(pin_prefix, prefix_len, tmp, PIN_PURPOSE_WORDS);
 8003698:	466a      	mov	r2, sp
 800369a:	f7ff fdaf 	bl	80031fc <pin_hash>

    // Using 608a, we can do key stretching to get good built-in delays
    ae_setup();
 800369e:	f7fe fdd7 	bl	8002250 <ae_setup>

    int rv = ae_stretch_iter(tmp, digest, KDF_ITER_WORDS);
 80036a2:	220c      	movs	r2, #12
 80036a4:	a908      	add	r1, sp, #32
 80036a6:	4668      	mov	r0, sp
 80036a8:	f7ff fc8a 	bl	8002fc0 <ae_stretch_iter>
 80036ac:	4604      	mov	r4, r0

    ae_reset_chip();
 80036ae:	f7fe fdc1 	bl	8002234 <ae_reset_chip>
	if(rv) return -1;
 80036b2:	b91c      	cbnz	r4, 80036bc <pin_prefix_words+0x2c>

    // take just 32 bits of that (only 22 bits shown to user)
    memcpy(result, digest, 4);
 80036b4:	9808      	ldr	r0, [sp, #32]
 80036b6:	6028      	str	r0, [r5, #0]

    return 0;
 80036b8:	4620      	mov	r0, r4
 80036ba:	e001      	b.n	80036c0 <pin_prefix_words+0x30>
    ae_setup();

    int rv = ae_stretch_iter(tmp, digest, KDF_ITER_WORDS);

    ae_reset_chip();
	if(rv) return -1;
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    // take just 32 bits of that (only 22 bits shown to user)
    memcpy(result, digest, 4);

    return 0;
}
 80036c0:	b011      	add	sp, #68	; 0x44
 80036c2:	bd30      	pop	{r4, r5, pc}
 80036c4:	2e6d6773 	.word	0x2e6d6773

080036c8 <calc_delay_required>:
calc_delay_required(int num_fails)
{
    // With the 608a, we let the slow KDF and the auto counter incr
    // protect against rate limiting... no need to do our own.
    return 0;
}
 80036c8:	2000      	movs	r0, #0
 80036ca:	4770      	bx	lr

080036cc <pin_setup_attempt>:
// Get number of failed attempts on a PIN, since last success. Calculate
// required delay, and setup initial struct for later attempts.
//
    int
pin_setup_attempt(pinAttempt_t *args)
{
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    STATIC_ASSERT(sizeof(pinAttempt_t) == PIN_ATTEMPT_SIZE_V2);

    int rv = _validate_attempt(args, true);
 80036ce:	2101      	movs	r1, #1
// Get number of failed attempts on a PIN, since last success. Calculate
// required delay, and setup initial struct for later attempts.
//
    int
pin_setup_attempt(pinAttempt_t *args)
{
 80036d0:	b091      	sub	sp, #68	; 0x44
 80036d2:	4604      	mov	r4, r0
    STATIC_ASSERT(sizeof(pinAttempt_t) == PIN_ATTEMPT_SIZE_V2);

    int rv = _validate_attempt(args, true);
 80036d4:	f7ff fdd4 	bl	8003280 <_validate_attempt>
    if(rv) return rv;
 80036d8:	2800      	cmp	r0, #0
 80036da:	d154      	bne.n	8003786 <pin_setup_attempt+0xba>

    // NOTE: Can only attempt primary pin. If it happens to
    // match duress or brickme pins, then perhaps something happens,
    // but not allowed to test for those cases even existing.

    if(args->is_secondary) {
 80036dc:	6867      	ldr	r7, [r4, #4]
 80036de:	2f00      	cmp	r7, #0
 80036e0:	d153      	bne.n	800378a <pin_setup_attempt+0xbe>

    // wipe most of struct, keep only what we expect and want!
    // - old firmware wrote zero to magic before this point, and so we set it here

    char    pin_copy[MAX_PIN_LEN];
    int     pin_len = args->pin_len;
 80036e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    memcpy(pin_copy, args->pin, pin_len);
 80036e4:	f104 0508 	add.w	r5, r4, #8
 80036e8:	4632      	mov	r2, r6
 80036ea:	4629      	mov	r1, r5
 80036ec:	4668      	mov	r0, sp
 80036ee:	f002 ff6c 	bl	80065ca <memcpy>

    memset(args, 0, PIN_ATTEMPT_SIZE_V2);
 80036f2:	f44f 728c 	mov.w	r2, #280	; 0x118
 80036f6:	4639      	mov	r1, r7
 80036f8:	4620      	mov	r0, r4
 80036fa:	f002 ff8c 	bl	8006616 <memset>

    args->state_flags = 0;
    args->magic_value = PA_MAGIC_V2;
 80036fe:	4b25      	ldr	r3, [pc, #148]	; (8003794 <pin_setup_attempt+0xc8>)
 8003700:	6023      	str	r3, [r4, #0]
    args->pin_len = pin_len;
    memcpy(args->pin, pin_copy, pin_len);
 8003702:	4632      	mov	r2, r6
 8003704:	4669      	mov	r1, sp
    int     pin_len = args->pin_len;
    memcpy(pin_copy, args->pin, pin_len);

    memset(args, 0, PIN_ATTEMPT_SIZE_V2);

    args->state_flags = 0;
 8003706:	63e7      	str	r7, [r4, #60]	; 0x3c
    args->magic_value = PA_MAGIC_V2;
    args->pin_len = pin_len;
 8003708:	62a6      	str	r6, [r4, #40]	; 0x28
    memcpy(args->pin, pin_copy, pin_len);
 800370a:	4628      	mov	r0, r5
 800370c:	f002 ff5d 	bl	80065ca <memcpy>

    // unlock the AE chip
    if(warmup_ae()) {
 8003710:	f7ff fdee 	bl	80032f0 <warmup_ae>
 8003714:	b110      	cbz	r0, 800371c <pin_setup_attempt+0x50>
        return EPIN_I_AM_BRICK;
 8003716:	f06f 0568 	mvn.w	r5, #104	; 0x68
 800371a:	e038      	b.n	800378e <pin_setup_attempt+0xc2>
    }

    if(args->pin_len) {
 800371c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800371e:	b949      	cbnz	r1, 8003734 <pin_setup_attempt+0x68>
            return EPIN_I_AM_BRICK;
        }
    }

    // read counters, and calc number of PIN attempts left
    if(get_last_success(args)) {
 8003720:	4620      	mov	r0, r4
 8003722:	f7ff fe22 	bl	800336a <get_last_success>
 8003726:	4605      	mov	r5, r0
 8003728:	b150      	cbz	r0, 8003740 <pin_setup_attempt+0x74>
        ae_reset_chip();
 800372a:	f7fe fd83 	bl	8002234 <ae_reset_chip>

        return EPIN_AE_FAIL;
 800372e:	f06f 0569 	mvn.w	r5, #105	; 0x69
 8003732:	e02c      	b.n	800378e <pin_setup_attempt+0xc2>
 8003734:	4628      	mov	r0, r5
 8003736:	f7ff fed9 	bl	80034ec <maybe_brick_myself.part.1>
    }

    if(args->pin_len) {
        // Implement the brickme feature here, nice and early: Immediate brickage if
        // provided PIN matches that special PIN.
        if(maybe_brick_myself(args->pin, args->pin_len)) {
 800373a:	2800      	cmp	r0, #0
 800373c:	d0f0      	beq.n	8003720 <pin_setup_attempt+0x54>
 800373e:	e7ea      	b.n	8003716 <pin_setup_attempt+0x4a>

        return EPIN_AE_FAIL;
    }

    // delays now handled by chip and our KDF process directly
    args->delay_required = 0;
 8003740:	6320      	str	r0, [r4, #48]	; 0x30
    args->delay_achieved = 0;
 8003742:	62e0      	str	r0, [r4, #44]	; 0x2c

    // need to know if we are blank/unused device
    if(pin_is_blank(KEYNUM_main_pin)) {
 8003744:	2003      	movs	r0, #3
 8003746:	f7ff fe68 	bl	800341a <pin_is_blank>
 800374a:	b1b0      	cbz	r0, 800377a <pin_setup_attempt+0xae>
        args->state_flags |= PA_SUCCESSFUL | PA_IS_BLANK;
 800374c:	6be3      	ldr	r3, [r4, #60]	; 0x3c

        // We need to save this 'zero' value because it's encrypted, and/or might be 
        // un-initialized memory. 
        const uint8_t zeros[32] = {0};
 800374e:	2220      	movs	r2, #32
    args->delay_required = 0;
    args->delay_achieved = 0;

    // need to know if we are blank/unused device
    if(pin_is_blank(KEYNUM_main_pin)) {
        args->state_flags |= PA_SUCCESSFUL | PA_IS_BLANK;
 8003750:	f043 0303 	orr.w	r3, r3, #3
 8003754:	63e3      	str	r3, [r4, #60]	; 0x3c

        // We need to save this 'zero' value because it's encrypted, and/or might be 
        // un-initialized memory. 
        const uint8_t zeros[32] = {0};
 8003756:	eb0d 0002 	add.w	r0, sp, r2
 800375a:	4629      	mov	r1, r5
 800375c:	f002 ff5b 	bl	8006616 <memset>
        pin_cache_save(args, zeros);
 8003760:	a908      	add	r1, sp, #32
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff ff38 	bl	80035d8 <pin_cache_save>

        // need legit value in here, saying not duress
        args->private_state = (rng_sample() & ~1) ^ rom_secrets->hash_cache_secret[0];
 8003768:	f7fe fbec 	bl	8001f44 <rng_sample>
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <pin_setup_attempt+0xcc>)
 800376e:	f893 3258 	ldrb.w	r3, [r3, #600]	; 0x258
 8003772:	f020 0001 	bic.w	r0, r0, #1
 8003776:	4058      	eors	r0, r3
 8003778:	6420      	str	r0, [r4, #64]	; 0x40
// Provide our "signature" validating struct contents as coming from us.
//
    static void
_sign_attempt(pinAttempt_t *args)
{
    _hmac_attempt(args, args->hmac);
 800377a:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800377e:	4620      	mov	r0, r4
 8003780:	f7ff fd04 	bl	800318c <_hmac_attempt>
 8003784:	e003      	b.n	800378e <pin_setup_attempt+0xc2>
 8003786:	4605      	mov	r5, r0
 8003788:	e001      	b.n	800378e <pin_setup_attempt+0xc2>
    // match duress or brickme pins, then perhaps something happens,
    // but not allowed to test for those cases even existing.

    if(args->is_secondary) {
        // secondary PIN feature has been removed
        return EPIN_PRIMARY_ONLY;
 800378a:	f06f 0571 	mvn.w	r5, #113	; 0x71
    }

    _sign_attempt(args);

    return 0;
}
 800378e:	4628      	mov	r0, r5
 8003790:	b011      	add	sp, #68	; 0x44
 8003792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003794:	2eaf6312 	.word	0x2eaf6312
 8003798:	08007800 	.word	0x08007800

0800379c <pin_delay>:

    _sign_attempt(args);
#endif

    return 0;
}
 800379c:	2000      	movs	r0, #0
 800379e:	4770      	bx	lr

080037a0 <pin_login_attempt>:
//
// Do the PIN check, and return a value. Or fail.
//
    int
pin_login_attempt(pinAttempt_t *args)
{
 80037a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int rv = _validate_attempt(args, false);
 80037a4:	2100      	movs	r1, #0
//
// Do the PIN check, and return a value. Or fail.
//
    int
pin_login_attempt(pinAttempt_t *args)
{
 80037a6:	b0a7      	sub	sp, #156	; 0x9c
 80037a8:	4604      	mov	r4, r0
    int rv = _validate_attempt(args, false);
 80037aa:	f7ff fd69 	bl	8003280 <_validate_attempt>
    if(rv) return rv;
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d155      	bne.n	800385e <pin_login_attempt+0xbe>

    // OBSOLETE: did they wait long enough?
    // if(args->delay_achieved < args->delay_required) return EPIN_MUST_WAIT;

    if(args->state_flags & PA_SUCCESSFUL) {
 80037b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80037b4:	07db      	lsls	r3, r3, #31
 80037b6:	d454      	bmi.n	8003862 <pin_login_attempt+0xc2>
        // already worked, or is blank
        return EPIN_WRONG_SUCCESS;
    }

    // unlock the AE chip
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 80037b8:	f7ff fd9a 	bl	80032f0 <warmup_ae>
 80037bc:	4605      	mov	r5, r0
 80037be:	2800      	cmp	r0, #0
 80037c0:	d152      	bne.n	8003868 <pin_login_attempt+0xc8>
    bool is_duress = false;
    int secret_kn = -1;

    // hash up the pin now, assuming we'll use it on main PIN *OR* duress PIN
    uint8_t     mid_digest[32], digest[32];
    rv = pin_hash_attempt(0, args->pin, args->pin_len, mid_digest);
 80037c2:	ab04      	add	r3, sp, #16
 80037c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037c6:	f104 0108 	add.w	r1, r4, #8
 80037ca:	f7ff feab 	bl	8003524 <pin_hash_attempt>
    if(rv) return EPIN_AE_FAIL;
 80037ce:	2800      	cmp	r0, #0
 80037d0:	d142      	bne.n	8003858 <pin_login_attempt+0xb8>

    // Do mixin for duress case.
    rv = ae_mixin_key(0, mid_digest, digest);
 80037d2:	aa0c      	add	r2, sp, #48	; 0x30
 80037d4:	a904      	add	r1, sp, #16
 80037d6:	f7ff fc19 	bl	800300c <ae_mixin_key>
    if(rv) return EPIN_AE_FAIL;
 80037da:	2800      	cmp	r0, #0
 80037dc:	d13c      	bne.n	8003858 <pin_login_attempt+0xb8>
//
    static bool
is_duress_pin(const uint8_t digest[32], bool is_blank, int *pin_kn)
{
    // duress PIN can never be blank; that means it wasn't set yet
    if(is_blank) return false;
 80037de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d044      	beq.n	800386e <pin_login_attempt+0xce>

    // LIMITATION: an active MitM could change what we write
    // to something else (wrong) and thus we'd never see that
    // the duress PIN was used.

    ae_reset_chip();
 80037e4:	f7fe fd26 	bl	8002234 <ae_reset_chip>
    ae_pair_unlock();
 80037e8:	f7fe ff18 	bl	800261c <ae_pair_unlock>
    if(ae_checkmac(kn, digest) == 0) {
 80037ec:	a90c      	add	r1, sp, #48	; 0x30
 80037ee:	2007      	movs	r0, #7
 80037f0:	f7fe fe94 	bl	800251c <ae_checkmac>
 80037f4:	4601      	mov	r1, r0
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d139      	bne.n	800386e <pin_login_attempt+0xce>
{
    // We keep another "good" login counter for duress, so we can 
    // show correctly-fake "num fails" and similar

    uint32_t count;
    int rv = ae_get_counter(&count, 0);
 80037fa:	a803      	add	r0, sp, #12
 80037fc:	f7ff f8c1 	bl	8002982 <ae_get_counter>
    if(rv) return EPIN_AE_FAIL;
 8003800:	4601      	mov	r1, r0
 8003802:	bb48      	cbnz	r0, 8003858 <pin_login_attempt+0xb8>

    // update the "last good" counter for duress purposes
    uint32_t    tmp[32/4] = {0};
 8003804:	2620      	movs	r6, #32
 8003806:	4632      	mov	r2, r6
 8003808:	a814      	add	r0, sp, #80	; 0x50
 800380a:	f002 ff04 	bl	8006616 <memset>
    tmp[0] = count;
 800380e:	9b03      	ldr	r3, [sp, #12]
 8003810:	9314      	str	r3, [sp, #80]	; 0x50

    rv = ae_encrypted_write(KEYNUM_duress_lastgood, KEYNUM_duress_pin, digest, (void *)tmp, 32);
 8003812:	9600      	str	r6, [sp, #0]
 8003814:	ab14      	add	r3, sp, #80	; 0x50
 8003816:	aa0c      	add	r2, sp, #48	; 0x30
 8003818:	2107      	movs	r1, #7
 800381a:	200b      	movs	r0, #11
 800381c:	f7ff f9c2 	bl	8002ba4 <ae_encrypted_write>
    if(rv) {
 8003820:	b9c0      	cbnz	r0, 8003854 <pin_login_attempt+0xb4>
    // the duress PIN was used.

    ae_reset_chip();
    ae_pair_unlock();
    if(ae_checkmac(kn, digest) == 0) {
        *pin_kn = kn;
 8003822:	f04f 0807 	mov.w	r8, #7

    if(is_duress_pin(digest, (args->pin_len == 0), &pin_kn)) {
        // they gave the duress PIN for this wallet... try to continue w/o any indication
        is_duress = true;

        secret_kn = KEYNUM_duress_secret;
 8003826:	270a      	movs	r7, #10
    rv = ae_mixin_key(0, mid_digest, digest);
    if(rv) return EPIN_AE_FAIL;

    if(is_duress_pin(digest, (args->pin_len == 0), &pin_kn)) {
        // they gave the duress PIN for this wallet... try to continue w/o any indication
        is_duress = true;
 8003828:	2601      	movs	r6, #1
        rv = updates_for_good_login(digest);
        if(rv) return EPIN_AE_FAIL;
    }

    // SUCCESS! "digest" holds a working value. Save it.
    pin_cache_save(args, digest);
 800382a:	a90c      	add	r1, sp, #48	; 0x30
 800382c:	4620      	mov	r0, r4
 800382e:	f7ff fed3 	bl	80035d8 <pin_cache_save>

    // ASIDE: even if the above was bypassed, the following code will
    // fail when it tries to read/update the corresponding slots in the SE

    // mark as success
    args->state_flags = PA_SUCCESSFUL;
 8003832:	2301      	movs	r3, #1
 8003834:	63e3      	str	r3, [r4, #60]	; 0x3c

    // these are constants, and user doesn't care because they got in... but consistency.
    args->num_fails = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	6363      	str	r3, [r4, #52]	; 0x34
    // I used to always read the secret, since it's so hard to get to this point,
    // but now just indicating if zero or non-zero so that we don't contaminate the
    // caller w/ sensitive data that they may not want yet.
    {   uint8_t ts[AE_SECRET_LEN];

        rv = ae_encrypted_read(secret_kn, pin_kn, digest, ts, AE_SECRET_LEN);
 800383a:	f04f 0948 	mov.w	r9, #72	; 0x48
    // mark as success
    args->state_flags = PA_SUCCESSFUL;

    // these are constants, and user doesn't care because they got in... but consistency.
    args->num_fails = 0;
    args->attempts_left = MAX_TARGET_ATTEMPTS;
 800383e:	230d      	movs	r3, #13
 8003840:	63a3      	str	r3, [r4, #56]	; 0x38
    // I used to always read the secret, since it's so hard to get to this point,
    // but now just indicating if zero or non-zero so that we don't contaminate the
    // caller w/ sensitive data that they may not want yet.
    {   uint8_t ts[AE_SECRET_LEN];

        rv = ae_encrypted_read(secret_kn, pin_kn, digest, ts, AE_SECRET_LEN);
 8003842:	f8cd 9000 	str.w	r9, [sp]
 8003846:	ab14      	add	r3, sp, #80	; 0x50
 8003848:	aa0c      	add	r2, sp, #48	; 0x30
 800384a:	4641      	mov	r1, r8
 800384c:	4638      	mov	r0, r7
 800384e:	f7ff f909 	bl	8002a64 <ae_encrypted_read>
        if(rv) {
 8003852:	b1f8      	cbz	r0, 8003894 <pin_login_attempt+0xf4>
            ae_reset_chip();
 8003854:	f7fe fcee 	bl	8002234 <ae_reset_chip>

            return EPIN_AE_FAIL;
 8003858:	f06f 0569 	mvn.w	r5, #105	; 0x69
 800385c:	e054      	b.n	8003908 <pin_login_attempt+0x168>
 800385e:	4605      	mov	r5, r0
 8003860:	e052      	b.n	8003908 <pin_login_attempt+0x168>
    // OBSOLETE: did they wait long enough?
    // if(args->delay_achieved < args->delay_required) return EPIN_MUST_WAIT;

    if(args->state_flags & PA_SUCCESSFUL) {
        // already worked, or is blank
        return EPIN_WRONG_SUCCESS;
 8003862:	f06f 056c 	mvn.w	r5, #108	; 0x6c
 8003866:	e04f      	b.n	8003908 <pin_login_attempt+0x168>
    }

    // unlock the AE chip
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 8003868:	f06f 0568 	mvn.w	r5, #104	; 0x68
 800386c:	e04c      	b.n	8003908 <pin_login_attempt+0x168>
        if(rv) return EPIN_AE_FAIL;

    } else {
        // It is not the "duress pin", so assume it's the real PIN, and register
        // as an attempt on that.
        rv = ae_mixin_key(KEYNUM_pin_attempt, mid_digest, digest);
 800386e:	aa0c      	add	r2, sp, #48	; 0x30
 8003870:	a904      	add	r1, sp, #16
 8003872:	2004      	movs	r0, #4
 8003874:	f7ff fbca 	bl	800300c <ae_mixin_key>
        if(rv) return EPIN_AE_FAIL;
 8003878:	2800      	cmp	r0, #0
 800387a:	d1ed      	bne.n	8003858 <pin_login_attempt+0xb8>
    static bool
is_main_pin(const uint8_t digest[32], int *pin_kn)
{
    int kn = KEYNUM_main_pin;

    ae_reset_chip();
 800387c:	f7fe fcda 	bl	8002234 <ae_reset_chip>
    ae_pair_unlock();
 8003880:	f7fe fecc 	bl	800261c <ae_pair_unlock>

    if(ae_checkmac_hard(kn, digest) == 0) {
 8003884:	a90c      	add	r1, sp, #48	; 0x30
 8003886:	2003      	movs	r0, #3
 8003888:	f7ff f810 	bl	80028ac <ae_checkmac_hard>
 800388c:	b390      	cbz	r0, 80038f4 <pin_login_attempt+0x154>
        if(rv) return EPIN_AE_FAIL;

        if(!is_main_pin(digest, &pin_kn)) {
            // PIN code is just wrong.
            // - nothing to update, since the chip's done it already
            return EPIN_AUTH_FAIL;
 800388e:	f06f 056f 	mvn.w	r5, #111	; 0x6f
 8003892:	e039      	b.n	8003908 <pin_login_attempt+0x168>
        if(rv) {
            ae_reset_chip();

            return EPIN_AE_FAIL;
        }
        ae_reset_chip();
 8003894:	f7fe fcce 	bl	8002234 <ae_reset_chip>

        if(check_all_zeros(ts, AE_SECRET_LEN)) {
 8003898:	4649      	mov	r1, r9
 800389a:	a814      	add	r0, sp, #80	; 0x50
 800389c:	f7fe fb36 	bl	8001f0c <check_all_zeros>
 80038a0:	b118      	cbz	r0, 80038aa <pin_login_attempt+0x10a>
            args->state_flags |= PA_ZERO_SECRET;
 80038a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038a4:	f043 0310 	orr.w	r3, r3, #16
 80038a8:	63e3      	str	r3, [r4, #60]	; 0x3c
        }
    }

    // indicate what features already enabled/non-blank
    if(is_duress) {
 80038aa:	b11e      	cbz	r6, 80038b4 <pin_login_attempt+0x114>
        // provide false answers to status of duress and brickme
        args->state_flags |= (PA_HAS_DURESS | PA_HAS_BRICKME);
 80038ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038ae:	f043 030c 	orr.w	r3, r3, #12
 80038b2:	e00e      	b.n	80038d2 <pin_login_attempt+0x132>
    } else {
        // do we have duress password?
        if(!pin_is_blank(KEYNUM_duress_pin)) {
 80038b4:	2007      	movs	r0, #7
 80038b6:	f7ff fdb0 	bl	800341a <pin_is_blank>
 80038ba:	b918      	cbnz	r0, 80038c4 <pin_login_attempt+0x124>
            args->state_flags |= PA_HAS_DURESS;
 80038bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	63e3      	str	r3, [r4, #60]	; 0x3c
        }

        // do we have brickme set?
        if(!pin_is_blank(KEYNUM_brickme)) {
 80038c4:	200d      	movs	r0, #13
 80038c6:	f7ff fda8 	bl	800341a <pin_is_blank>
 80038ca:	b918      	cbnz	r0, 80038d4 <pin_login_attempt+0x134>
            args->state_flags |= PA_HAS_BRICKME;
 80038cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038ce:	f043 0308 	orr.w	r3, r3, #8
 80038d2:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    // In mark1/2, was thinking of maybe storing duress flag into private state,
    // but no real need, but testing for it is expensive in mark3, so going to use
    // LSB here for that. Xor'ed with a secret only we have.
    args->private_state = ((rng_sample() & ~1) | is_duress) ^ rom_secrets->hash_cache_secret[0];
 80038d4:	f7fe fb36 	bl	8001f44 <rng_sample>
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <pin_login_attempt+0x170>)
 80038da:	f020 0001 	bic.w	r0, r0, #1
 80038de:	f893 3258 	ldrb.w	r3, [r3, #600]	; 0x258
 80038e2:	4306      	orrs	r6, r0
 80038e4:	405e      	eors	r6, r3
 80038e6:	6426      	str	r6, [r4, #64]	; 0x40
// Provide our "signature" validating struct contents as coming from us.
//
    static void
_sign_attempt(pinAttempt_t *args)
{
    _hmac_attempt(args, args->hmac);
 80038e8:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7ff fc4d 	bl	800318c <_hmac_attempt>
 80038f2:	e009      	b.n	8003908 <pin_login_attempt+0x168>
        }

        secret_kn = KEYNUM_secret;

        // change the various counters, since this worked
        rv = updates_for_good_login(digest);
 80038f4:	a80c      	add	r0, sp, #48	; 0x30
 80038f6:	f7ff fda9 	bl	800344c <updates_for_good_login>
        if(rv) return EPIN_AE_FAIL;
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d1ac      	bne.n	8003858 <pin_login_attempt+0xb8>

    ae_reset_chip();
    ae_pair_unlock();

    if(ae_checkmac_hard(kn, digest) == 0) {
        *pin_kn = kn;
 80038fe:	f04f 0803 	mov.w	r8, #3
            // PIN code is just wrong.
            // - nothing to update, since the chip's done it already
            return EPIN_AUTH_FAIL;
        }

        secret_kn = KEYNUM_secret;
 8003902:	2709      	movs	r7, #9

    // unlock the AE chip
    if(warmup_ae()) return EPIN_I_AM_BRICK;

    int pin_kn = -1;
    bool is_duress = false;
 8003904:	4606      	mov	r6, r0
 8003906:	e790      	b.n	800382a <pin_login_attempt+0x8a>
    args->private_state = ((rng_sample() & ~1) | is_duress) ^ rom_secrets->hash_cache_secret[0];

    _sign_attempt(args);

    return 0;
}
 8003908:	4628      	mov	r0, r5
 800390a:	b027      	add	sp, #156	; 0x9c
 800390c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003910:	08007800 	.word	0x08007800

08003914 <pin_change>:
//
// Change the PIN and/or secrets (must also know the value, or it must be blank)
//
    int
pin_change(pinAttempt_t *args)
{
 8003914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8003918:	2100      	movs	r1, #0
//
// Change the PIN and/or secrets (must also know the value, or it must be blank)
//
    int
pin_change(pinAttempt_t *args)
{
 800391a:	b09d      	sub	sp, #116	; 0x74
 800391c:	4604      	mov	r4, r0
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 800391e:	f7ff fcaf 	bl	8003280 <_validate_attempt>
    if(rv) return rv;
 8003922:	2800      	cmp	r0, #0
 8003924:	f040 80f7 	bne.w	8003b16 <pin_change+0x202>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 8003928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800392a:	07dd      	lsls	r5, r3, #31
 800392c:	f140 80f5 	bpl.w	8003b1a <pin_change+0x206>
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
    }

    if(args->state_flags & PA_IS_BLANK) {
 8003930:	0798      	lsls	r0, r3, #30
 8003932:	d504      	bpl.n	800393e <pin_change+0x2a>
        // if blank, must provide blank value
        if(args->pin_len) return EPIN_RANGE_ERR;
 8003934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003936:	b113      	cbz	r3, 800393e <pin_change+0x2a>
 8003938:	f06f 0566 	mvn.w	r5, #102	; 0x66
 800393c:	e0fa      	b.n	8003b34 <pin_change+0x220>

    // Look at change flags.
    const uint32_t cf = args->change_flags;

    // Obsolete secondary support, can't support.
    ASSERT(!args->is_secondary);
 800393e:	6863      	ldr	r3, [r4, #4]
        // if blank, must provide blank value
        if(args->pin_len) return EPIN_RANGE_ERR;
    }

    // Look at change flags.
    const uint32_t cf = args->change_flags;
 8003940:	6e66      	ldr	r6, [r4, #100]	; 0x64

    // Obsolete secondary support, can't support.
    ASSERT(!args->is_secondary);
 8003942:	b113      	cbz	r3, 800394a <pin_change+0x36>
 8003944:	487d      	ldr	r0, [pc, #500]	; (8003b3c <pin_change+0x228>)
 8003946:	f7fc fd43 	bl	80003d0 <fatal_error>
    if(cf & CHANGE_SECONDARY_WALLET_PIN) {
 800394a:	06b1      	lsls	r1, r6, #26
 800394c:	f100 80e8 	bmi.w	8003b20 <pin_change+0x20c>
        return EPIN_BAD_REQUEST;
    }

    // Must be here to do something.
    if(cf == 0) return EPIN_RANGE_ERR;
 8003950:	2e00      	cmp	r6, #0
 8003952:	d0f1      	beq.n	8003938 <pin_change+0x24>

    if(cf & CHANGE_BRICKME_PIN) {
 8003954:	f016 0704 	ands.w	r7, r6, #4
 8003958:	d002      	beq.n	8003960 <pin_change+0x4c>
        if(cf != CHANGE_BRICKME_PIN) {
 800395a:	2e04      	cmp	r6, #4
 800395c:	f040 80e0 	bne.w	8003b20 <pin_change+0x20c>
            // only pin can be changed, nothing else.
            return EPIN_BAD_REQUEST;
        }
    }
    if((cf & CHANGE_DURESS_SECRET) && (cf & CHANGE_SECRET)) {
 8003960:	f006 0b18 	and.w	fp, r6, #24
 8003964:	f1bb 0f18 	cmp.w	fp, #24
 8003968:	f000 80da 	beq.w	8003b20 <pin_change+0x20c>
    // but can only prove you know the primary pin up
    // to this point (via login process)... none of the others.
    // That's why we need old_pin fields.

    // unlock the AE chip
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 800396c:	f7ff fcc0 	bl	80032f0 <warmup_ae>
 8003970:	4605      	mov	r5, r0
 8003972:	b110      	cbz	r0, 800397a <pin_change+0x66>
 8003974:	f06f 0568 	mvn.w	r5, #104	; 0x68
 8003978:	e0dc      	b.n	8003b34 <pin_change+0x220>
//
    static bool
get_is_duress(pinAttempt_t *args)
{
    // read and "decrypt" our one flag bit
    return ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 800397a:	4b71      	ldr	r3, [pc, #452]	; (8003b40 <pin_change+0x22c>)
 800397c:	f893 a258 	ldrb.w	sl, [r3, #600]	; 0x258
 8003980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003982:	ea8a 0a03 	eor.w	sl, sl, r3
    // Same for brickme PIN.

    // SO ... we need to know if they started w/ a duress wallet.
    bool is_duress = get_is_duress(args);

    if(is_duress) {
 8003986:	f01a 0a01 	ands.w	sl, sl, #1
 800398a:	d01a      	beq.n	80039c2 <pin_change+0xae>
        // user is a thug.. limit what they can do

        // check for brickme pin on everything here.
        if(maybe_brick_myself(args->old_pin, args->old_pin_len)
 800398c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
maybe_brick_myself(const char *pin, int pin_len)
{
    uint8_t     digest[32];
    int         rv = 0;

    if(!pin_len) return 0;
 8003990:	b919      	cbnz	r1, 800399a <pin_change+0x86>
    if(is_duress) {
        // user is a thug.. limit what they can do

        // check for brickme pin on everything here.
        if(maybe_brick_myself(args->old_pin, args->old_pin_len)
                || maybe_brick_myself(args->new_pin, args->new_pin_len)
 8003992:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
maybe_brick_myself(const char *pin, int pin_len)
{
    uint8_t     digest[32];
    int         rv = 0;

    if(!pin_len) return 0;
 8003996:	b169      	cbz	r1, 80039b4 <pin_change+0xa0>
 8003998:	e006      	b.n	80039a8 <pin_change+0x94>
 800399a:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800399e:	f7ff fda5 	bl	80034ec <maybe_brick_myself.part.1>

    if(is_duress) {
        // user is a thug.. limit what they can do

        // check for brickme pin on everything here.
        if(maybe_brick_myself(args->old_pin, args->old_pin_len)
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d0f5      	beq.n	8003992 <pin_change+0x7e>
 80039a6:	e7e5      	b.n	8003974 <pin_change+0x60>
 80039a8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80039ac:	f7ff fd9e 	bl	80034ec <maybe_brick_myself.part.1>
                || maybe_brick_myself(args->new_pin, args->new_pin_len)
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d1df      	bne.n	8003974 <pin_change+0x60>
        ) {
            return EPIN_I_AM_BRICK;
        }

        if((cf & CHANGE_WALLET_PIN) != cf) {
 80039b4:	f036 0301 	bics.w	r3, r6, #1
 80039b8:	d122      	bne.n	8003a00 <pin_change+0xec>
            ae_reset_chip();

            return EPIN_OLD_AUTH_FAIL;
        }

        required_kn = target_slot = KEYNUM_duress_pin;
 80039ba:	f04f 0807 	mov.w	r8, #7
 80039be:	46c1      	mov	r9, r8
 80039c0:	e02c      	b.n	8003a1c <pin_change+0x108>
        // No real need to re-prove PIN knowledge.
        // If they tricked us to get to this point, doesn't matter as
        // below the SE validates it all again.
        required_kn = KEYNUM_main_pin;

        if(cf & CHANGE_WALLET_PIN) {
 80039c2:	07f2      	lsls	r2, r6, #31
 80039c4:	d426      	bmi.n	8003a14 <pin_change+0x100>
            target_slot = KEYNUM_main_pin;
        } else if(cf & CHANGE_SECRET) {
 80039c6:	0733      	lsls	r3, r6, #28
 80039c8:	f100 80ad 	bmi.w	8003b26 <pin_change+0x212>
            target_slot = KEYNUM_secret;
        } else if(cf & CHANGE_DURESS_PIN) {
 80039cc:	07b0      	lsls	r0, r6, #30
 80039ce:	f100 80ad 	bmi.w	8003b2c <pin_change+0x218>
            required_kn = KEYNUM_duress_pin;
            target_slot = KEYNUM_duress_pin;
        } else if(cf & CHANGE_DURESS_SECRET) {
 80039d2:	06f1      	lsls	r1, r6, #27
 80039d4:	d519      	bpl.n	8003a0a <pin_change+0xf6>
            required_kn = KEYNUM_duress_pin;
            target_slot = KEYNUM_duress_secret;
 80039d6:	f04f 080a 	mov.w	r8, #10
            target_slot = KEYNUM_secret;
        } else if(cf & CHANGE_DURESS_PIN) {
            required_kn = KEYNUM_duress_pin;
            target_slot = KEYNUM_duress_pin;
        } else if(cf & CHANGE_DURESS_SECRET) {
            required_kn = KEYNUM_duress_pin;
 80039da:	f04f 0907 	mov.w	r9, #7
    ) {
        // Restore cached version of PIN digest: faster
        pin_cache_restore(args, required_digest);
    } else {
        // Construct hash of pin needed.
        pin_hash_attempt(required_kn, args->old_pin, args->old_pin_len, required_digest);
 80039de:	fa5f f789 	uxtb.w	r7, r9
 80039e2:	f104 0168 	add.w	r1, r4, #104	; 0x68
 80039e6:	ab02      	add	r3, sp, #8
 80039e8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80039ec:	4638      	mov	r0, r7
 80039ee:	f7ff fd99 	bl	8003524 <pin_hash_attempt>

        // Check the old pin provided, is right.
        ae_pair_unlock();
 80039f2:	f7fe fe13 	bl	800261c <ae_pair_unlock>
        if(ae_checkmac(required_kn, required_digest)) {
 80039f6:	a902      	add	r1, sp, #8
 80039f8:	4638      	mov	r0, r7
 80039fa:	f7fe fd8f 	bl	800251c <ae_checkmac>
 80039fe:	b188      	cbz	r0, 8003a24 <pin_change+0x110>
            return EPIN_I_AM_BRICK;
        }

        if((cf & CHANGE_WALLET_PIN) != cf) {
            // trying to do anything but change PIN must fail.
            ae_reset_chip();
 8003a00:	f7fe fc18 	bl	8002234 <ae_reset_chip>

            return EPIN_OLD_AUTH_FAIL;
 8003a04:	f06f 0570 	mvn.w	r5, #112	; 0x70
 8003a08:	e094      	b.n	8003b34 <pin_change+0x220>
            required_kn = KEYNUM_duress_pin;
            target_slot = KEYNUM_duress_pin;
        } else if(cf & CHANGE_DURESS_SECRET) {
            required_kn = KEYNUM_duress_pin;
            target_slot = KEYNUM_duress_secret;
        } else if(cf & CHANGE_BRICKME_PIN) {
 8003a0a:	2f00      	cmp	r7, #0
 8003a0c:	d094      	beq.n	8003938 <pin_change+0x24>
            required_kn = KEYNUM_brickme;       // but main_pin would be better: rate limited
            target_slot = KEYNUM_brickme;
 8003a0e:	f04f 080d 	mov.w	r8, #13
 8003a12:	e08d      	b.n	8003b30 <pin_change+0x21c>
        // If they tricked us to get to this point, doesn't matter as
        // below the SE validates it all again.
        required_kn = KEYNUM_main_pin;

        if(cf & CHANGE_WALLET_PIN) {
            target_slot = KEYNUM_main_pin;
 8003a14:	f04f 0803 	mov.w	r8, #3
//
// Change the PIN and/or secrets (must also know the value, or it must be blank)
//
    int
pin_change(pinAttempt_t *args)
{
 8003a18:	f04f 0903 	mov.w	r9, #3
    uint8_t required_digest[32]; 
    if(   (!is_duress && required_kn == KEYNUM_main_pin) 
        || (is_duress && required_kn == KEYNUM_duress_pin)
    ) {
        // Restore cached version of PIN digest: faster
        pin_cache_restore(args, required_digest);
 8003a1c:	a902      	add	r1, sp, #8
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7ff fe0c 	bl	800363c <pin_cache_restore>
            return EPIN_OLD_AUTH_FAIL;
        }
    }

    // Calculate new PIN hashed value: will be slow for main pin.
    if(cf & (CHANGE_WALLET_PIN | CHANGE_DURESS_PIN | CHANGE_BRICKME_PIN)) {
 8003a24:	0772      	lsls	r2, r6, #29
 8003a26:	d034      	beq.n	8003a92 <pin_change+0x17e>

        uint8_t new_digest[32]; 
        rv = pin_hash_attempt(required_kn, args->new_pin, args->new_pin_len, new_digest);
 8003a28:	ab0a      	add	r3, sp, #40	; 0x28
 8003a2a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8003a2e:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8003a32:	4648      	mov	r0, r9
 8003a34:	f7ff fd76 	bl	8003524 <pin_hash_attempt>
        if(rv) goto ae_fail;
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d167      	bne.n	8003b0c <pin_change+0x1f8>

        if(ae_encrypted_write(target_slot, required_kn, required_digest, new_digest, 32)) {
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	aa02      	add	r2, sp, #8
 8003a42:	ab0a      	add	r3, sp, #40	; 0x28
 8003a44:	4649      	mov	r1, r9
 8003a46:	4640      	mov	r0, r8
 8003a48:	f7ff f8ac 	bl	8002ba4 <ae_encrypted_write>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d15d      	bne.n	8003b0c <pin_change+0x1f8>
            goto ae_fail;
        }

        if(target_slot == required_kn) {
 8003a50:	45c1      	cmp	r9, r8
 8003a52:	d109      	bne.n	8003a68 <pin_change+0x154>
            memcpy(required_digest, new_digest, 32);
 8003a54:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003a58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003a60:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003a64:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        }

        if(target_slot == KEYNUM_main_pin) {
 8003a68:	f1b8 0f03 	cmp.w	r8, #3
 8003a6c:	d107      	bne.n	8003a7e <pin_change+0x16a>
            // main pin is changing; reset counter to zero (good login) and our cache
            pin_cache_save(args, new_digest);
 8003a6e:	4620      	mov	r0, r4
 8003a70:	a90a      	add	r1, sp, #40	; 0x28
 8003a72:	f7ff fdb1 	bl	80035d8 <pin_cache_save>

            updates_for_good_login(new_digest);
 8003a76:	a80a      	add	r0, sp, #40	; 0x28
 8003a78:	f7ff fce8 	bl	800344c <updates_for_good_login>
 8003a7c:	e009      	b.n	8003a92 <pin_change+0x17e>
        }
        if(is_duress && (target_slot == KEYNUM_duress_pin)) {
 8003a7e:	f1ba 0f00 	cmp.w	sl, #0
 8003a82:	d006      	beq.n	8003a92 <pin_change+0x17e>
 8003a84:	f1b8 0f07 	cmp.w	r8, #7
 8003a88:	d103      	bne.n	8003a92 <pin_change+0x17e>
            // duress pin changed, and we're the duress thug, so update cache
            pin_cache_save(args, new_digest);
 8003a8a:	a90a      	add	r1, sp, #40	; 0x28
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7ff fda3 	bl	80035d8 <pin_cache_save>
        }
    }

    // Record new secret.
    // Note the required_digest might have just changed above.
    if(cf & (CHANGE_SECRET | CHANGE_DURESS_SECRET)) {
 8003a92:	f1bb 0f00 	cmp.w	fp, #0
 8003a96:	d031      	beq.n	8003afc <pin_change+0x1e8>
        int secret_kn = (required_kn == KEYNUM_main_pin) ? KEYNUM_secret : KEYNUM_duress_secret;

        bool is_all_zeros = check_all_zeros(args->secret, AE_SECRET_LEN);
 8003a98:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
    }

    // Record new secret.
    // Note the required_digest might have just changed above.
    if(cf & (CHANGE_SECRET | CHANGE_DURESS_SECRET)) {
        int secret_kn = (required_kn == KEYNUM_main_pin) ? KEYNUM_secret : KEYNUM_duress_secret;
 8003a9c:	f1b9 0f03 	cmp.w	r9, #3

        bool is_all_zeros = check_all_zeros(args->secret, AE_SECRET_LEN);
 8003aa0:	f04f 0148 	mov.w	r1, #72	; 0x48
 8003aa4:	4640      	mov	r0, r8
    }

    // Record new secret.
    // Note the required_digest might have just changed above.
    if(cf & (CHANGE_SECRET | CHANGE_DURESS_SECRET)) {
        int secret_kn = (required_kn == KEYNUM_main_pin) ? KEYNUM_secret : KEYNUM_duress_secret;
 8003aa6:	bf0c      	ite	eq
 8003aa8:	f04f 0a09 	moveq.w	sl, #9
 8003aac:	f04f 0a0a 	movne.w	sl, #10

        bool is_all_zeros = check_all_zeros(args->secret, AE_SECRET_LEN);
 8003ab0:	f7fe fa2c 	bl	8001f0c <check_all_zeros>

        // encrypt new secret, but only if not zeros!
        uint8_t     tmp[AE_SECRET_LEN] = {0};
 8003ab4:	2248      	movs	r2, #72	; 0x48
    // Record new secret.
    // Note the required_digest might have just changed above.
    if(cf & (CHANGE_SECRET | CHANGE_DURESS_SECRET)) {
        int secret_kn = (required_kn == KEYNUM_main_pin) ? KEYNUM_secret : KEYNUM_duress_secret;

        bool is_all_zeros = check_all_zeros(args->secret, AE_SECRET_LEN);
 8003ab6:	4607      	mov	r7, r0

        // encrypt new secret, but only if not zeros!
        uint8_t     tmp[AE_SECRET_LEN] = {0};
 8003ab8:	2100      	movs	r1, #0
 8003aba:	a80a      	add	r0, sp, #40	; 0x28
 8003abc:	f002 fdab 	bl	8006616 <memset>
        if(!is_all_zeros) {
 8003ac0:	b94f      	cbnz	r7, 8003ad6 <pin_change+0x1c2>
            xor_mixin(tmp, rom_secrets->otp_key, AE_SECRET_LEN);
 8003ac2:	2248      	movs	r2, #72	; 0x48
 8003ac4:	491f      	ldr	r1, [pc, #124]	; (8003b44 <pin_change+0x230>)
 8003ac6:	a80a      	add	r0, sp, #40	; 0x28
 8003ac8:	f7ff fb52 	bl	8003170 <xor_mixin>
            xor_mixin(tmp, args->secret, AE_SECRET_LEN);
 8003acc:	2248      	movs	r2, #72	; 0x48
 8003ace:	4641      	mov	r1, r8
 8003ad0:	a80a      	add	r0, sp, #40	; 0x28
 8003ad2:	f7ff fb4d 	bl	8003170 <xor_mixin>
        }

        if(ae_encrypted_write(secret_kn, required_kn,
 8003ad6:	2348      	movs	r3, #72	; 0x48
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	aa02      	add	r2, sp, #8
 8003adc:	ab0a      	add	r3, sp, #40	; 0x28
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4650      	mov	r0, sl
 8003ae2:	f7ff f85f 	bl	8002ba4 <ae_encrypted_write>
 8003ae6:	b988      	cbnz	r0, 8003b0c <pin_change+0x1f8>
                                        required_digest, tmp, AE_SECRET_LEN)){
            goto ae_fail;
        }

        // update the zero-secret flag to be correct.
        if(cf & CHANGE_SECRET) {
 8003ae8:	0733      	lsls	r3, r6, #28
 8003aea:	d507      	bpl.n	8003afc <pin_change+0x1e8>
 8003aec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            if(is_all_zeros) {
 8003aee:	b117      	cbz	r7, 8003af6 <pin_change+0x1e2>
                args->state_flags |= PA_ZERO_SECRET;
 8003af0:	f043 0310 	orr.w	r3, r3, #16
 8003af4:	e001      	b.n	8003afa <pin_change+0x1e6>
            } else {
                args->state_flags &= ~PA_ZERO_SECRET;
 8003af6:	f023 0310 	bic.w	r3, r3, #16
 8003afa:	63e3      	str	r3, [r4, #60]	; 0x3c
            }
        }
    }

    ae_reset_chip();
 8003afc:	f7fe fb9a 	bl	8002234 <ae_reset_chip>
// Provide our "signature" validating struct contents as coming from us.
//
    static void
_sign_attempt(pinAttempt_t *args)
{
    _hmac_attempt(args, args->hmac);
 8003b00:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8003b04:	4620      	mov	r0, r4
 8003b06:	f7ff fb41 	bl	800318c <_hmac_attempt>
 8003b0a:	e013      	b.n	8003b34 <pin_change+0x220>
    _sign_attempt(args);

    return 0;

ae_fail:
    ae_reset_chip();
 8003b0c:	f7fe fb92 	bl	8002234 <ae_reset_chip>

    return EPIN_AE_FAIL;
 8003b10:	f06f 0569 	mvn.w	r5, #105	; 0x69
 8003b14:	e00e      	b.n	8003b34 <pin_change+0x220>
 8003b16:	4605      	mov	r5, r0
 8003b18:	e00c      	b.n	8003b34 <pin_change+0x220>
    int rv = _validate_attempt(args, false);
    if(rv) return rv;

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
 8003b1a:	f06f 056c 	mvn.w	r5, #108	; 0x6c
 8003b1e:	e009      	b.n	8003b34 <pin_change+0x220>
    const uint32_t cf = args->change_flags;

    // Obsolete secondary support, can't support.
    ASSERT(!args->is_secondary);
    if(cf & CHANGE_SECONDARY_WALLET_PIN) {
        return EPIN_BAD_REQUEST;
 8003b20:	f06f 0567 	mvn.w	r5, #103	; 0x67
 8003b24:	e006      	b.n	8003b34 <pin_change+0x220>
        required_kn = KEYNUM_main_pin;

        if(cf & CHANGE_WALLET_PIN) {
            target_slot = KEYNUM_main_pin;
        } else if(cf & CHANGE_SECRET) {
            target_slot = KEYNUM_secret;
 8003b26:	f04f 0809 	mov.w	r8, #9
 8003b2a:	e775      	b.n	8003a18 <pin_change+0x104>
        } else if(cf & CHANGE_DURESS_PIN) {
            required_kn = KEYNUM_duress_pin;
            target_slot = KEYNUM_duress_pin;
 8003b2c:	f04f 0807 	mov.w	r8, #7
        } else if(cf & CHANGE_DURESS_SECRET) {
            required_kn = KEYNUM_duress_pin;
            target_slot = KEYNUM_duress_secret;
        } else if(cf & CHANGE_BRICKME_PIN) {
            required_kn = KEYNUM_brickme;       // but main_pin would be better: rate limited
 8003b30:	46c1      	mov	r9, r8
 8003b32:	e754      	b.n	80039de <pin_change+0xca>

ae_fail:
    ae_reset_chip();

    return EPIN_AE_FAIL;
}
 8003b34:	4628      	mov	r0, r5
 8003b36:	b01d      	add	sp, #116	; 0x74
 8003b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3c:	08006686 	.word	0x08006686
 8003b40:	08007800 	.word	0x08007800
 8003b44:	08007870 	.word	0x08007870

08003b48 <pin_fetch_secret>:
// To encourage not keeping the secret in memory, a way to fetch it after already
// have proven you know the PIN.
//
    int
pin_fetch_secret(pinAttempt_t *args)
{
 8003b48:	b570      	push	{r4, r5, r6, lr}
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8003b4a:	2100      	movs	r1, #0
// To encourage not keeping the secret in memory, a way to fetch it after already
// have proven you know the PIN.
//
    int
pin_fetch_secret(pinAttempt_t *args)
{
 8003b4c:	b08a      	sub	sp, #40	; 0x28
 8003b4e:	4604      	mov	r4, r0
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8003b50:	f7ff fb96 	bl	8003280 <_validate_attempt>
    if(rv) return rv;
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d14c      	bne.n	8003bf2 <pin_fetch_secret+0xaa>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 8003b58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b5a:	07d9      	lsls	r1, r3, #31
 8003b5c:	d544      	bpl.n	8003be8 <pin_fetch_secret+0xa0>

    // fetch the already-hashed pin
    // - no real need to re-prove PIN knowledge.
    // - if they tricked us, doesn't matter as below the SE validates it all again
    uint8_t     digest[32];
    pin_cache_restore(args, digest);
 8003b5e:	a902      	add	r1, sp, #8
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff fd6b 	bl	800363c <pin_cache_restore>
//
    static bool
get_is_duress(pinAttempt_t *args)
{
    // read and "decrypt" our one flag bit
    return ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <pin_fetch_secret+0xb0>)
 8003b68:	f893 2258 	ldrb.w	r2, [r3, #600]	; 0x258
 8003b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b6e:	4053      	eors	r3, r2
 8003b70:	f003 0301 	and.w	r3, r3, #1
    bool is_duress = get_is_duress(args);

    int pin_kn = is_duress ? KEYNUM_duress_pin : KEYNUM_main_pin;
    int secret_slot = is_duress ? KEYNUM_duress_secret : KEYNUM_secret;

    if(args->change_flags & CHANGE_DURESS_SECRET) {
 8003b74:	6e62      	ldr	r2, [r4, #100]	; 0x64
    pin_cache_restore(args, digest);

    // determine if we should proceed under duress
    bool is_duress = get_is_duress(args);

    int pin_kn = is_duress ? KEYNUM_duress_pin : KEYNUM_main_pin;
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf15      	itete	ne
 8003b7a:	2107      	movne	r1, #7
 8003b7c:	2103      	moveq	r1, #3
 8003b7e:	200a      	movne	r0, #10
 8003b80:	2009      	moveq	r0, #9
    int secret_slot = is_duress ? KEYNUM_duress_secret : KEYNUM_secret;

    if(args->change_flags & CHANGE_DURESS_SECRET) {
 8003b82:	06d2      	lsls	r2, r2, #27
 8003b84:	d516      	bpl.n	8003bb4 <pin_fetch_secret+0x6c>
        // Let them know the duress secret, iff: 
        // - they are logged into corresponding primary pin (not duress) 
        // - and they know the duress pin as well.
        // LATER: this feature not being used since we only write the duress secret
        if(is_duress) return EPIN_AUTH_FAIL;
 8003b86:	bb93      	cbnz	r3, 8003bee <pin_fetch_secret+0xa6>

        pin_kn = KEYNUM_duress_pin;
        secret_slot = KEYNUM_duress_secret;

        rv = pin_hash_attempt(pin_kn, args->old_pin, args->old_pin_len, digest);
 8003b88:	ab02      	add	r3, sp, #8
 8003b8a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003b8e:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8003b92:	2007      	movs	r0, #7
 8003b94:	f7ff fcc6 	bl	8003524 <pin_hash_attempt>
        if(rv) goto fail;
 8003b98:	4605      	mov	r5, r0
 8003b9a:	b9e8      	cbnz	r0, 8003bd8 <pin_fetch_secret+0x90>

        // Check the that pin is right (optional, but if wrong, encrypted read gives garb)
        ae_pair_unlock();
 8003b9c:	f7fe fd3e 	bl	800261c <ae_pair_unlock>
        if(ae_checkmac(pin_kn, digest)) {
 8003ba0:	a902      	add	r1, sp, #8
 8003ba2:	2007      	movs	r0, #7
 8003ba4:	f7fe fcba 	bl	800251c <ae_checkmac>
 8003ba8:	b110      	cbz	r0, 8003bb0 <pin_fetch_secret+0x68>
            // They got old duress PIN wrong, we won't be able to help them.
            ae_reset_chip();
 8003baa:	f7fe fb43 	bl	8002234 <ae_reset_chip>
 8003bae:	e01e      	b.n	8003bee <pin_fetch_secret+0xa6>
        // - and they know the duress pin as well.
        // LATER: this feature not being used since we only write the duress secret
        if(is_duress) return EPIN_AUTH_FAIL;

        pin_kn = KEYNUM_duress_pin;
        secret_slot = KEYNUM_duress_secret;
 8003bb0:	200a      	movs	r0, #10
        // - they are logged into corresponding primary pin (not duress) 
        // - and they know the duress pin as well.
        // LATER: this feature not being used since we only write the duress secret
        if(is_duress) return EPIN_AUTH_FAIL;

        pin_kn = KEYNUM_duress_pin;
 8003bb2:	2107      	movs	r1, #7
            return EPIN_AUTH_FAIL;
        }
    }

    // read out the secret that corresponds to that pin
    rv = ae_encrypted_read(secret_slot, pin_kn, digest, args->secret, AE_SECRET_LEN);
 8003bb4:	34b0      	adds	r4, #176	; 0xb0
 8003bb6:	2648      	movs	r6, #72	; 0x48
 8003bb8:	9600      	str	r6, [sp, #0]
 8003bba:	4623      	mov	r3, r4
 8003bbc:	aa02      	add	r2, sp, #8
 8003bbe:	f7fe ff51 	bl	8002a64 <ae_encrypted_read>

    bool is_all_zeros = check_all_zeros(args->secret, AE_SECRET_LEN);
 8003bc2:	4631      	mov	r1, r6
            return EPIN_AUTH_FAIL;
        }
    }

    // read out the secret that corresponds to that pin
    rv = ae_encrypted_read(secret_slot, pin_kn, digest, args->secret, AE_SECRET_LEN);
 8003bc4:	4605      	mov	r5, r0

    bool is_all_zeros = check_all_zeros(args->secret, AE_SECRET_LEN);
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f7fe f9a0 	bl	8001f0c <check_all_zeros>

    // decrypt the secret, but only if not zeros!
    if(!is_all_zeros) xor_mixin(args->secret, rom_secrets->otp_key, AE_SECRET_LEN);
 8003bcc:	b920      	cbnz	r0, 8003bd8 <pin_fetch_secret+0x90>
 8003bce:	4632      	mov	r2, r6
 8003bd0:	490a      	ldr	r1, [pc, #40]	; (8003bfc <pin_fetch_secret+0xb4>)
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7ff facc 	bl	8003170 <xor_mixin>

fail:
    ae_reset_chip();
 8003bd8:	f7fe fb2c 	bl	8002234 <ae_reset_chip>

    if(rv) return EPIN_AE_FAIL;

    return 0;
 8003bdc:	2d00      	cmp	r5, #0
 8003bde:	bf14      	ite	ne
 8003be0:	f06f 0069 	mvnne.w	r0, #105	; 0x69
 8003be4:	2000      	moveq	r0, #0
 8003be6:	e004      	b.n	8003bf2 <pin_fetch_secret+0xaa>
    int rv = _validate_attempt(args, false);
    if(rv) return rv;

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
 8003be8:	f06f 006c 	mvn.w	r0, #108	; 0x6c
 8003bec:	e001      	b.n	8003bf2 <pin_fetch_secret+0xaa>
    if(args->change_flags & CHANGE_DURESS_SECRET) {
        // Let them know the duress secret, iff: 
        // - they are logged into corresponding primary pin (not duress) 
        // - and they know the duress pin as well.
        // LATER: this feature not being used since we only write the duress secret
        if(is_duress) return EPIN_AUTH_FAIL;
 8003bee:	f06f 006f 	mvn.w	r0, #111	; 0x6f
    ae_reset_chip();

    if(rv) return EPIN_AE_FAIL;

    return 0;
}
 8003bf2:	b00a      	add	sp, #40	; 0x28
 8003bf4:	bd70      	pop	{r4, r5, r6, pc}
 8003bf6:	bf00      	nop
 8003bf8:	08007800 	.word	0x08007800
 8003bfc:	08007870 	.word	0x08007870

08003c00 <pin_long_secret>:
//
// Read or write the "long" secret: an additional 416 bytes on 608a only.
//
    int
pin_long_secret(pinAttempt_t *args)
{
 8003c00:	b570      	push	{r4, r5, r6, lr}
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8003c02:	2100      	movs	r1, #0
//
// Read or write the "long" secret: an additional 416 bytes on 608a only.
//
    int
pin_long_secret(pinAttempt_t *args)
{
 8003c04:	b092      	sub	sp, #72	; 0x48
 8003c06:	4604      	mov	r4, r0
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8003c08:	f7ff fb3a 	bl	8003280 <_validate_attempt>
    if(rv) return rv;
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d15b      	bne.n	8003cca <pin_long_secret+0xca>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 8003c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c14:	07db      	lsls	r3, r3, #31
 8003c16:	d55a      	bpl.n	8003cce <pin_long_secret+0xce>

    // fetch the already-hashed pin
    // - no real need to re-prove PIN knowledge.
    // - if they tricked us, doesn't matter as below the SE validates it all again
    uint8_t     digest[32];
    pin_cache_restore(args, digest);
 8003c18:	a902      	add	r1, sp, #8
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff fd0e 	bl	800363c <pin_cache_restore>
//
    static bool
get_is_duress(pinAttempt_t *args)
{
    // read and "decrypt" our one flag bit
    return ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 8003c20:	4b2e      	ldr	r3, [pc, #184]	; (8003cdc <pin_long_secret+0xdc>)
    pin_cache_restore(args, digest);

    // determine if we should proceed under duress
    bool is_duress = get_is_duress(args);

    if(is_duress) {
 8003c22:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 8003c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c28:	4059      	eors	r1, r3
 8003c2a:	f011 0101 	ands.w	r1, r1, #1
 8003c2e:	d006      	beq.n	8003c3e <pin_long_secret+0x3e>
        // Not supported in duress mode. Pretend it's all zeros. Accept all writes.
        memset(args->secret, 0, 32);
 8003c30:	2220      	movs	r2, #32
 8003c32:	4629      	mov	r1, r5
 8003c34:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8003c38:	f002 fced 	bl	8006616 <memset>
 8003c3c:	e045      	b.n	8003cca <pin_long_secret+0xca>
        return 0;
    }

    // which 32-byte section?
    STATIC_ASSERT(CHANGE_LS_OFFSET == 0xf00);
    int blk = (args->change_flags >> 8) & 0xf;
 8003c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c40:	f3c3 2503 	ubfx	r5, r3, #8, #4
    if(blk > 13) return EPIN_RANGE_ERR;
 8003c44:	2d0d      	cmp	r5, #13
 8003c46:	dc45      	bgt.n	8003cd4 <pin_long_secret+0xd4>

    // read/write exactly 32 bytes
    if(!(args->change_flags & CHANGE_SECRET)) {
 8003c48:	f013 0f08 	tst.w	r3, #8
 8003c4c:	f104 04b0 	add.w	r4, r4, #176	; 0xb0
 8003c50:	d115      	bne.n	8003c7e <pin_long_secret+0x7e>
        rv = ae_encrypted_read32(KEYNUM_long_secret, blk, KEYNUM_main_pin, digest, args->secret);
 8003c52:	9400      	str	r4, [sp, #0]
 8003c54:	ab02      	add	r3, sp, #8
 8003c56:	2203      	movs	r2, #3
 8003c58:	4629      	mov	r1, r5
 8003c5a:	2008      	movs	r0, #8
 8003c5c:	f7fe fed7 	bl	8002a0e <ae_encrypted_read32>
        if(rv) goto fail;
 8003c60:	4606      	mov	r6, r0
 8003c62:	bb50      	cbnz	r0, 8003cba <pin_long_secret+0xba>

        if(!check_all_zeros(args->secret, 32)) {
 8003c64:	2120      	movs	r1, #32
 8003c66:	4620      	mov	r0, r4
 8003c68:	f7fe f950 	bl	8001f0c <check_all_zeros>
 8003c6c:	bb28      	cbnz	r0, 8003cba <pin_long_secret+0xba>
            xor_mixin(args->secret, rom_secrets->otp_key_long+(32*blk), 32);
 8003c6e:	491c      	ldr	r1, [pc, #112]	; (8003ce0 <pin_long_secret+0xe0>)
 8003c70:	016d      	lsls	r5, r5, #5
 8003c72:	2220      	movs	r2, #32
 8003c74:	4429      	add	r1, r5
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7ff fa7a 	bl	8003170 <xor_mixin>
 8003c7c:	e01d      	b.n	8003cba <pin_long_secret+0xba>
        }
    } else {
        // write case
        uint8_t tmp[32] = {0};
 8003c7e:	ae0a      	add	r6, sp, #40	; 0x28
 8003c80:	2220      	movs	r2, #32
 8003c82:	4630      	mov	r0, r6
 8003c84:	f002 fcc7 	bl	8006616 <memset>

        if(!check_all_zeros(args->secret, 32)) {
 8003c88:	2120      	movs	r1, #32
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f7fe f93e 	bl	8001f0c <check_all_zeros>
 8003c90:	b958      	cbnz	r0, 8003caa <pin_long_secret+0xaa>
            xor_mixin(tmp, args->secret, 32);
 8003c92:	2220      	movs	r2, #32
 8003c94:	4621      	mov	r1, r4
 8003c96:	4630      	mov	r0, r6
 8003c98:	f7ff fa6a 	bl	8003170 <xor_mixin>
            xor_mixin(tmp, rom_secrets->otp_key_long+(32*blk), 32);
 8003c9c:	4910      	ldr	r1, [pc, #64]	; (8003ce0 <pin_long_secret+0xe0>)
 8003c9e:	016b      	lsls	r3, r5, #5
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	4419      	add	r1, r3
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	f7ff fa63 	bl	8003170 <xor_mixin>
        }

        rv = ae_encrypted_write32(KEYNUM_long_secret, blk, KEYNUM_main_pin, digest, tmp);
 8003caa:	9600      	str	r6, [sp, #0]
 8003cac:	ab02      	add	r3, sp, #8
 8003cae:	2203      	movs	r2, #3
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	2008      	movs	r0, #8
 8003cb4:	f7fe ff0e 	bl	8002ad4 <ae_encrypted_write32>
 8003cb8:	4606      	mov	r6, r0
        if(rv) goto fail;
    }

fail:
    ae_reset_chip();
 8003cba:	f7fe fabb 	bl	8002234 <ae_reset_chip>

    if(rv) return EPIN_AE_FAIL;

    return 0;
 8003cbe:	2e00      	cmp	r6, #0
 8003cc0:	bf14      	ite	ne
 8003cc2:	f06f 0069 	mvnne.w	r0, #105	; 0x69
 8003cc6:	2000      	moveq	r0, #0
 8003cc8:	e006      	b.n	8003cd8 <pin_long_secret+0xd8>
 8003cca:	4628      	mov	r0, r5
 8003ccc:	e004      	b.n	8003cd8 <pin_long_secret+0xd8>
    int rv = _validate_attempt(args, false);
    if(rv) return rv;

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
 8003cce:	f06f 006c 	mvn.w	r0, #108	; 0x6c
 8003cd2:	e001      	b.n	8003cd8 <pin_long_secret+0xd8>
    }

    // which 32-byte section?
    STATIC_ASSERT(CHANGE_LS_OFFSET == 0xf00);
    int blk = (args->change_flags >> 8) & 0xf;
    if(blk > 13) return EPIN_RANGE_ERR;
 8003cd4:	f06f 0066 	mvn.w	r0, #102	; 0x66
    ae_reset_chip();

    if(rv) return EPIN_AE_FAIL;

    return 0;
}
 8003cd8:	b012      	add	sp, #72	; 0x48
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	08007800 	.word	0x08007800
 8003ce0:	080078b8 	.word	0x080078b8

08003ce4 <pin_firmware_greenlight>:
//
// Record current flash checksum and make green light go on.
//
    int
pin_firmware_greenlight(pinAttempt_t *args)
{
 8003ce4:	b530      	push	{r4, r5, lr}
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8003ce6:	2100      	movs	r1, #0
//
// Record current flash checksum and make green light go on.
//
    int
pin_firmware_greenlight(pinAttempt_t *args)
{
 8003ce8:	b09b      	sub	sp, #108	; 0x6c
 8003cea:	4605      	mov	r5, r0
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8003cec:	f7ff fac8 	bl	8003280 <_validate_attempt>
    if(rv) return rv;
 8003cf0:	bb50      	cbnz	r0, 8003d48 <pin_firmware_greenlight+0x64>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 8003cf2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003cf4:	07da      	lsls	r2, r3, #31
 8003cf6:	d529      	bpl.n	8003d4c <pin_firmware_greenlight+0x68>
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
    }

    if(args->is_secondary) {
 8003cf8:	686b      	ldr	r3, [r5, #4]
 8003cfa:	bb53      	cbnz	r3, 8003d52 <pin_firmware_greenlight+0x6e>
        return EPIN_PRIMARY_ONLY;
    }

    // load existing PIN's hash
    uint8_t     digest[32];
    pin_cache_restore(args, digest);
 8003cfc:	a902      	add	r1, sp, #8
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f7ff fc9c 	bl	800363c <pin_cache_restore>

    // step 1: calc the value to use
    uint8_t fw_check[32], world_check[32];
    checksum_flash(fw_check, world_check);
 8003d04:	a912      	add	r1, sp, #72	; 0x48
 8003d06:	a80a      	add	r0, sp, #40	; 0x28
 8003d08:	f7fd fd16 	bl	8001738 <checksum_flash>

    // step 2: write it out to chip.
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 8003d0c:	f7ff faf0 	bl	80032f0 <warmup_ae>
 8003d10:	4604      	mov	r4, r0
 8003d12:	bb08      	cbnz	r0, 8003d58 <pin_firmware_greenlight+0x74>
//
    static bool
get_is_duress(pinAttempt_t *args)
{
    // read and "decrypt" our one flag bit
    return ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <pin_firmware_greenlight+0x80>)
    // step 2: write it out to chip.
    if(warmup_ae()) return EPIN_I_AM_BRICK;

    // under duress, we can't fake this, but we go through the motions,
    bool is_duress = get_is_duress(args);
    if(!is_duress) {
 8003d16:	f893 2258 	ldrb.w	r2, [r3, #600]	; 0x258
 8003d1a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003d1c:	4053      	eors	r3, r2
 8003d1e:	07db      	lsls	r3, r3, #31
 8003d20:	d40d      	bmi.n	8003d3e <pin_firmware_greenlight+0x5a>
        rv = ae_encrypted_write(KEYNUM_firmware, KEYNUM_main_pin, digest, world_check, 32);
 8003d22:	2320      	movs	r3, #32
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	aa02      	add	r2, sp, #8
 8003d28:	ab12      	add	r3, sp, #72	; 0x48
 8003d2a:	2103      	movs	r1, #3
 8003d2c:	200e      	movs	r0, #14
 8003d2e:	f7fe ff39 	bl	8002ba4 <ae_encrypted_write>

        if(rv) {
 8003d32:	b120      	cbz	r0, 8003d3e <pin_firmware_greenlight+0x5a>
            ae_reset_chip();
 8003d34:	f7fe fa7e 	bl	8002234 <ae_reset_chip>

            return EPIN_AE_FAIL;
 8003d38:	f06f 0469 	mvn.w	r4, #105	; 0x69
 8003d3c:	e00e      	b.n	8003d5c <pin_firmware_greenlight+0x78>
        }
    }

    // turn on light
    rv = ae_set_gpio_secure(world_check);
 8003d3e:	a812      	add	r0, sp, #72	; 0x48
 8003d40:	f7fe ffbb 	bl	8002cba <ae_set_gpio_secure>
    if(rv) {
 8003d44:	b150      	cbz	r0, 8003d5c <pin_firmware_greenlight+0x78>
 8003d46:	e7f5      	b.n	8003d34 <pin_firmware_greenlight+0x50>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	e007      	b.n	8003d5c <pin_firmware_greenlight+0x78>
    int rv = _validate_attempt(args, false);
    if(rv) return rv;

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
 8003d4c:	f06f 046c 	mvn.w	r4, #108	; 0x6c
 8003d50:	e004      	b.n	8003d5c <pin_firmware_greenlight+0x78>
    }

    if(args->is_secondary) {
        // only main PIN holder can do this
        return EPIN_PRIMARY_ONLY;
 8003d52:	f06f 0471 	mvn.w	r4, #113	; 0x71
 8003d56:	e001      	b.n	8003d5c <pin_firmware_greenlight+0x78>
    // step 1: calc the value to use
    uint8_t fw_check[32], world_check[32];
    checksum_flash(fw_check, world_check);

    // step 2: write it out to chip.
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 8003d58:	f06f 0468 	mvn.w	r4, #104	; 0x68

        return EPIN_AE_FAIL;
    }

    return 0;
}
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	b01b      	add	sp, #108	; 0x6c
 8003d60:	bd30      	pop	{r4, r5, pc}
 8003d62:	bf00      	nop
 8003d64:	08007800 	.word	0x08007800

08003d68 <sf_read>:

// sf_read_bytes()
//
    static HAL_StatusTypeDef
sf_read(uint32_t addr, int len, uint8_t *buf)
{
 8003d68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // send via SPI(1)
    uint8_t     pkt[5] = { CMD_FAST_READ,
 8003d6a:	230b      	movs	r3, #11
 8003d6c:	f88d 3000 	strb.w	r3, [sp]
 8003d70:	0c03      	lsrs	r3, r0, #16
 8003d72:	f88d 3001 	strb.w	r3, [sp, #1]
 8003d76:	f88d 0003 	strb.w	r0, [sp, #3]
 8003d7a:	0a03      	lsrs	r3, r0, #8

// sf_read_bytes()
//
    static HAL_StatusTypeDef
sf_read(uint32_t addr, int len, uint8_t *buf)
{
 8003d7c:	460e      	mov	r6, r1
    // send via SPI(1)
    uint8_t     pkt[5] = { CMD_FAST_READ,
                            (addr>>16) & 0xff, (addr >> 8) & 0xff, addr & 0xff,
                            0x0 };  // for fast-read case

    CS_LOW();
 8003d7e:	4812      	ldr	r0, [pc, #72]	; (8003dc8 <sf_read+0x60>)
//
    static HAL_StatusTypeDef
sf_read(uint32_t addr, int len, uint8_t *buf)
{
    // send via SPI(1)
    uint8_t     pkt[5] = { CMD_FAST_READ,
 8003d80:	f88d 3002 	strb.w	r3, [sp, #2]
                            (addr>>16) & 0xff, (addr >> 8) & 0xff, addr & 0xff,
                            0x0 };  // for fast-read case

    CS_LOW();
 8003d84:	f44f 7100 	mov.w	r1, #512	; 0x200

// sf_read_bytes()
//
    static HAL_StatusTypeDef
sf_read(uint32_t addr, int len, uint8_t *buf)
{
 8003d88:	4615      	mov	r5, r2
    // send via SPI(1)
    uint8_t     pkt[5] = { CMD_FAST_READ,
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f88d 2004 	strb.w	r2, [sp, #4]
                            (addr>>16) & 0xff, (addr >> 8) & 0xff, addr & 0xff,
                            0x0 };  // for fast-read case

    CS_LOW();
 8003d90:	f7fd f9ec 	bl	800116c <HAL_GPIO_WritePin>

    HAL_StatusTypeDef rv = HAL_SPI_Transmit(&sf_spi_port, pkt, sizeof(pkt), HAL_MAX_DELAY);
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d98:	2205      	movs	r2, #5
 8003d9a:	4669      	mov	r1, sp
 8003d9c:	480b      	ldr	r0, [pc, #44]	; (8003dcc <sf_read+0x64>)
 8003d9e:	f7fd fa70 	bl	8001282 <HAL_SPI_Transmit>
    if(rv == HAL_OK) {
 8003da2:	4604      	mov	r4, r0
 8003da4:	b938      	cbnz	r0, 8003db6 <sf_read+0x4e>
        rv = HAL_SPI_Receive(&sf_spi_port, buf, len, HAL_MAX_DELAY);
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003daa:	b2b2      	uxth	r2, r6
 8003dac:	4629      	mov	r1, r5
 8003dae:	4807      	ldr	r0, [pc, #28]	; (8003dcc <sf_read+0x64>)
 8003db0:	f7fd fbe6 	bl	8001580 <HAL_SPI_Receive>
 8003db4:	4604      	mov	r4, r0
    }

    CS_HIGH();
 8003db6:	2201      	movs	r2, #1
 8003db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <sf_read+0x60>)
 8003dbe:	f7fd f9d5 	bl	800116c <HAL_GPIO_WritePin>

    return rv;
}
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}
 8003dc8:	48000400 	.word	0x48000400
 8003dcc:	100062c8 	.word	0x100062c8

08003dd0 <sf_write.constprop.1>:
}

// sf_write()
//
    static HAL_StatusTypeDef
sf_write(uint32_t addr, int len, const uint8_t *buf)
 8003dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
// sf_write_enable()
//
    static HAL_StatusTypeDef
sf_write_enable(void)
{
    uint8_t pkt = CMD_WREN;
 8003dd2:	ad02      	add	r5, sp, #8
 8003dd4:	2306      	movs	r3, #6
 8003dd6:	f805 3d04 	strb.w	r3, [r5, #-4]!

    CS_LOW();
 8003dda:	2200      	movs	r2, #0
}

// sf_write()
//
    static HAL_StatusTypeDef
sf_write(uint32_t addr, int len, const uint8_t *buf)
 8003ddc:	4606      	mov	r6, r0
 8003dde:	460f      	mov	r7, r1
    static HAL_StatusTypeDef
sf_write_enable(void)
{
    uint8_t pkt = CMD_WREN;

    CS_LOW();
 8003de0:	4834      	ldr	r0, [pc, #208]	; (8003eb4 <sf_write.constprop.1+0xe4>)
 8003de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003de6:	f7fd f9c1 	bl	800116c <HAL_GPIO_WritePin>

    HAL_StatusTypeDef rv = HAL_SPI_Transmit(&sf_spi_port, &pkt, 1, HAL_MAX_DELAY);
 8003dea:	2201      	movs	r2, #1
 8003dec:	4629      	mov	r1, r5
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003df2:	4831      	ldr	r0, [pc, #196]	; (8003eb8 <sf_write.constprop.1+0xe8>)
 8003df4:	f7fd fa45 	bl	8001282 <HAL_SPI_Transmit>

    CS_HIGH();
 8003df8:	2201      	movs	r2, #1
{
    uint8_t pkt = CMD_WREN;

    CS_LOW();

    HAL_StatusTypeDef rv = HAL_SPI_Transmit(&sf_spi_port, &pkt, 1, HAL_MAX_DELAY);
 8003dfa:	4604      	mov	r4, r0

    CS_HIGH();
 8003dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e00:	482c      	ldr	r0, [pc, #176]	; (8003eb4 <sf_write.constprop.1+0xe4>)
 8003e02:	f7fd f9b3 	bl	800116c <HAL_GPIO_WritePin>
    static HAL_StatusTypeDef
sf_write(uint32_t addr, int len, const uint8_t *buf)
{
    // enable writing
    HAL_StatusTypeDef rv = sf_write_enable();
    if(rv) return rv;
 8003e06:	2c00      	cmp	r4, #0
 8003e08:	d151      	bne.n	8003eae <sf_write.constprop.1+0xde>

    // do a "PAGE Program" aka. write
    uint8_t     pkt[4] = { CMD_WRITE,
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	f88d 3004 	strb.w	r3, [sp, #4]
 8003e10:	0c33      	lsrs	r3, r6, #16
                            (addr>>16) & 0xff, (addr >> 8) & 0xff, addr & 0xff 
                        };

    CS_LOW();
 8003e12:	4622      	mov	r2, r4
    // enable writing
    HAL_StatusTypeDef rv = sf_write_enable();
    if(rv) return rv;

    // do a "PAGE Program" aka. write
    uint8_t     pkt[4] = { CMD_WRITE,
 8003e14:	f88d 3005 	strb.w	r3, [sp, #5]
                            (addr>>16) & 0xff, (addr >> 8) & 0xff, addr & 0xff 
                        };

    CS_LOW();
 8003e18:	f44f 7100 	mov.w	r1, #512	; 0x200
    // enable writing
    HAL_StatusTypeDef rv = sf_write_enable();
    if(rv) return rv;

    // do a "PAGE Program" aka. write
    uint8_t     pkt[4] = { CMD_WRITE,
 8003e1c:	0a33      	lsrs	r3, r6, #8
                            (addr>>16) & 0xff, (addr >> 8) & 0xff, addr & 0xff 
                        };

    CS_LOW();
 8003e1e:	4825      	ldr	r0, [pc, #148]	; (8003eb4 <sf_write.constprop.1+0xe4>)
    // enable writing
    HAL_StatusTypeDef rv = sf_write_enable();
    if(rv) return rv;

    // do a "PAGE Program" aka. write
    uint8_t     pkt[4] = { CMD_WRITE,
 8003e20:	f88d 3006 	strb.w	r3, [sp, #6]
 8003e24:	f88d 6007 	strb.w	r6, [sp, #7]
                            (addr>>16) & 0xff, (addr >> 8) & 0xff, addr & 0xff 
                        };

    CS_LOW();
 8003e28:	f7fd f9a0 	bl	800116c <HAL_GPIO_WritePin>

    rv = HAL_SPI_Transmit(&sf_spi_port, pkt, sizeof(pkt), HAL_MAX_DELAY);
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e30:	2204      	movs	r2, #4
 8003e32:	4629      	mov	r1, r5
 8003e34:	4820      	ldr	r0, [pc, #128]	; (8003eb8 <sf_write.constprop.1+0xe8>)
 8003e36:	f7fd fa24 	bl	8001282 <HAL_SPI_Transmit>
    if(rv == HAL_OK) {
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	b938      	cbnz	r0, 8003e4e <sf_write.constprop.1+0x7e>
        rv = HAL_SPI_Transmit(&sf_spi_port, (uint8_t *)buf, len, HAL_MAX_DELAY);
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	4639      	mov	r1, r7
 8003e46:	481c      	ldr	r0, [pc, #112]	; (8003eb8 <sf_write.constprop.1+0xe8>)
 8003e48:	f7fd fa1b 	bl	8001282 <HAL_SPI_Transmit>
 8003e4c:	4604      	mov	r4, r0
    }

    CS_HIGH();
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e54:	4817      	ldr	r0, [pc, #92]	; (8003eb4 <sf_write.constprop.1+0xe4>)
 8003e56:	f7fd f989 	bl	800116c <HAL_GPIO_WritePin>

    if(rv == HAL_OK) {
 8003e5a:	bb44      	cbnz	r4, 8003eae <sf_write.constprop.1+0xde>
sf_wait_wip_done()
{
    // read RDSR (status register) and busy-wait until 
    // the write operation is done
    while(1) {
        uint8_t pkt = CMD_RDSR, stat = 0;
 8003e5c:	2305      	movs	r3, #5
 8003e5e:	2200      	movs	r2, #0

        CS_LOW();
 8003e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e64:	4813      	ldr	r0, [pc, #76]	; (8003eb4 <sf_write.constprop.1+0xe4>)
sf_wait_wip_done()
{
    // read RDSR (status register) and busy-wait until 
    // the write operation is done
    while(1) {
        uint8_t pkt = CMD_RDSR, stat = 0;
 8003e66:	f88d 3002 	strb.w	r3, [sp, #2]
 8003e6a:	f88d 2003 	strb.w	r2, [sp, #3]

        CS_LOW();
 8003e6e:	f7fd f97d 	bl	800116c <HAL_GPIO_WritePin>

        HAL_StatusTypeDef rv = HAL_SPI_Transmit(&sf_spi_port, &pkt, 1, HAL_MAX_DELAY);
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e76:	2201      	movs	r2, #1
 8003e78:	f10d 0102 	add.w	r1, sp, #2
 8003e7c:	480e      	ldr	r0, [pc, #56]	; (8003eb8 <sf_write.constprop.1+0xe8>)
 8003e7e:	f7fd fa00 	bl	8001282 <HAL_SPI_Transmit>

        if(rv == HAL_OK) {
 8003e82:	4604      	mov	r4, r0
 8003e84:	b940      	cbnz	r0, 8003e98 <sf_write.constprop.1+0xc8>
            rv = HAL_SPI_Receive(&sf_spi_port, &stat, 1, HAL_MAX_DELAY);
 8003e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f10d 0103 	add.w	r1, sp, #3
 8003e90:	4809      	ldr	r0, [pc, #36]	; (8003eb8 <sf_write.constprop.1+0xe8>)
 8003e92:	f7fd fb75 	bl	8001580 <HAL_SPI_Receive>
 8003e96:	4604      	mov	r4, r0
        }

        CS_HIGH();
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e9e:	4805      	ldr	r0, [pc, #20]	; (8003eb4 <sf_write.constprop.1+0xe4>)
 8003ea0:	f7fd f964 	bl	800116c <HAL_GPIO_WritePin>

        if(rv != HAL_OK) return rv;
 8003ea4:	b91c      	cbnz	r4, 8003eae <sf_write.constprop.1+0xde>

        if(stat & 0x01) continue;
 8003ea6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003eaa:	07db      	lsls	r3, r3, #31
 8003eac:	d4d6      	bmi.n	8003e5c <sf_write.constprop.1+0x8c>
    static HAL_StatusTypeDef
sf_write(uint32_t addr, int len, const uint8_t *buf)
{
    // enable writing
    HAL_StatusTypeDef rv = sf_write_enable();
    if(rv) return rv;
 8003eae:	4620      	mov	r0, r4
    if(rv == HAL_OK) {
        rv = sf_wait_wip_done();
    }

    return rv;
}
 8003eb0:	b003      	add	sp, #12
 8003eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb4:	48000400 	.word	0x48000400
 8003eb8:	100062c8 	.word	0x100062c8

08003ebc <sf_setup>:
sf_setup(void)
{
    HAL_StatusTypeDef rv;

    // enable some internal clocks
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <sf_setup+0xb8>)
//
// Ok to call this lots.
//
    void
sf_setup(void)
{
 8003ebe:	b530      	push	{r4, r5, lr}
    HAL_StatusTypeDef rv;

    // enable some internal clocks
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_SPI2_CLK_ENABLE();

    // simple pins
    GPIO_InitTypeDef setup = {
 8003ec2:	4d2d      	ldr	r5, [pc, #180]	; (8003f78 <sf_setup+0xbc>)
sf_setup(void)
{
    HAL_StatusTypeDef rv;

    // enable some internal clocks
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec4:	f042 0202 	orr.w	r2, r2, #2
 8003ec8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
//
// Ok to call this lots.
//
    void
sf_setup(void)
{
 8003ecc:	b089      	sub	sp, #36	; 0x24
    HAL_StatusTypeDef rv;

    // enable some internal clocks
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ece:	f002 0202 	and.w	r2, r2, #2
 8003ed2:	9200      	str	r2, [sp, #0]
 8003ed4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ed8:	f042 0204 	orr.w	r2, r2, #4
 8003edc:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ee0:	f002 0204 	and.w	r2, r2, #4
 8003ee4:	9201      	str	r2, [sp, #4]
 8003ee6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ee8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eee:	659a      	str	r2, [r3, #88]	; 0x58
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef6:	9302      	str	r3, [sp, #8]
 8003ef8:	9b02      	ldr	r3, [sp, #8]

    // simple pins
    GPIO_InitTypeDef setup = {
 8003efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efc:	ac03      	add	r4, sp, #12
 8003efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f00:	682b      	ldr	r3, [r5, #0]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_MEDIUM,
        .Alternate = 0,
    };
    HAL_GPIO_Init(GPIOB, &setup);
 8003f02:	481e      	ldr	r0, [pc, #120]	; (8003f7c <sf_setup+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_SPI2_CLK_ENABLE();

    // simple pins
    GPIO_InitTypeDef setup = {
 8003f04:	6023      	str	r3, [r4, #0]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_MEDIUM,
        .Alternate = 0,
    };
    HAL_GPIO_Init(GPIOB, &setup);
 8003f06:	a903      	add	r1, sp, #12
 8003f08:	f7fc ffb2 	bl	8000e70 <HAL_GPIO_Init>

    // starting value: high
    HAL_GPIO_WritePin(GPIOB, SF_CS_PIN, 1);
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f12:	481a      	ldr	r0, [pc, #104]	; (8003f7c <sf_setup+0xc0>)
    HAL_GPIO_Init(GPIOB, &setup);

    setup.Pin = SF_SPI_MOSI | SF_SPI_MISO;
    HAL_GPIO_Init(GPIOC, &setup);

    memset(&sf_spi_port, 0, sizeof(sf_spi_port));
 8003f14:	4c1a      	ldr	r4, [pc, #104]	; (8003f80 <sf_setup+0xc4>)
        .Alternate = 0,
    };
    HAL_GPIO_Init(GPIOB, &setup);

    // starting value: high
    HAL_GPIO_WritePin(GPIOB, SF_CS_PIN, 1);
 8003f16:	f7fd f929 	bl	800116c <HAL_GPIO_WritePin>

    // SPI pins, on various ports
    setup.Pin = SF_SPI_SCK;
 8003f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f1e:	9303      	str	r3, [sp, #12]
    setup.Mode = GPIO_MODE_AF_PP;
 8003f20:	2302      	movs	r3, #2
 8003f22:	9304      	str	r3, [sp, #16]
    setup.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &setup);
 8003f24:	a903      	add	r1, sp, #12
    HAL_GPIO_WritePin(GPIOB, SF_CS_PIN, 1);

    // SPI pins, on various ports
    setup.Pin = SF_SPI_SCK;
    setup.Mode = GPIO_MODE_AF_PP;
    setup.Alternate = GPIO_AF5_SPI2;
 8003f26:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &setup);
 8003f28:	4814      	ldr	r0, [pc, #80]	; (8003f7c <sf_setup+0xc0>)
    HAL_GPIO_WritePin(GPIOB, SF_CS_PIN, 1);

    // SPI pins, on various ports
    setup.Pin = SF_SPI_SCK;
    setup.Mode = GPIO_MODE_AF_PP;
    setup.Alternate = GPIO_AF5_SPI2;
 8003f2a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &setup);
 8003f2c:	f7fc ffa0 	bl	8000e70 <HAL_GPIO_Init>

    setup.Pin = SF_SPI_MOSI | SF_SPI_MISO;
 8003f30:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &setup);
 8003f32:	eb0d 0103 	add.w	r1, sp, r3
 8003f36:	4813      	ldr	r0, [pc, #76]	; (8003f84 <sf_setup+0xc8>)
    setup.Pin = SF_SPI_SCK;
    setup.Mode = GPIO_MODE_AF_PP;
    setup.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &setup);

    setup.Pin = SF_SPI_MOSI | SF_SPI_MISO;
 8003f38:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &setup);
 8003f3a:	f7fc ff99 	bl	8000e70 <HAL_GPIO_Init>

    memset(&sf_spi_port, 0, sizeof(sf_spi_port));
 8003f3e:	2264      	movs	r2, #100	; 0x64
 8003f40:	2100      	movs	r1, #0
 8003f42:	4620      	mov	r0, r4
 8003f44:	f002 fb67 	bl	8006616 <memset>

    sf_spi_port.Instance = SPI2;

    // see SPI_InitTypeDef
    sf_spi_port.Init.Mode = SPI_MODE_MASTER;
 8003f48:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <sf_setup+0xcc>)
 8003f4a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003f4e:	e884 000c 	stmia.w	r4, {r2, r3}
    sf_spi_port.Init.Direction = SPI_DIRECTION_2LINES;
    sf_spi_port.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f52:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003f56:	60e3      	str	r3, [r4, #12]
    sf_spi_port.Init.CLKPolarity = SPI_POLARITY_LOW;
    sf_spi_port.Init.CLKPhase = SPI_PHASE_1EDGE;
    sf_spi_port.Init.NSS = SPI_NSS_SOFT;
 8003f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f5c:	61a3      	str	r3, [r4, #24]
    sf_spi_port.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;    // conservative
    sf_spi_port.Init.FirstBit = SPI_FIRSTBIT_MSB;
    sf_spi_port.Init.TIMode = SPI_TIMODE_DISABLED;
    sf_spi_port.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;

    rv = HAL_SPI_Init(&sf_spi_port);
 8003f5e:	4620      	mov	r0, r4
    sf_spi_port.Init.Direction = SPI_DIRECTION_2LINES;
    sf_spi_port.Init.DataSize = SPI_DATASIZE_8BIT;
    sf_spi_port.Init.CLKPolarity = SPI_POLARITY_LOW;
    sf_spi_port.Init.CLKPhase = SPI_PHASE_1EDGE;
    sf_spi_port.Init.NSS = SPI_NSS_SOFT;
    sf_spi_port.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;    // conservative
 8003f60:	2318      	movs	r3, #24
 8003f62:	61e3      	str	r3, [r4, #28]
    sf_spi_port.Init.FirstBit = SPI_FIRSTBIT_MSB;
    sf_spi_port.Init.TIMode = SPI_TIMODE_DISABLED;
    sf_spi_port.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;

    rv = HAL_SPI_Init(&sf_spi_port);
 8003f64:	f7fd f946 	bl	80011f4 <HAL_SPI_Init>
    ASSERT(!rv);
 8003f68:	b110      	cbz	r0, 8003f70 <sf_setup+0xb4>
 8003f6a:	4808      	ldr	r0, [pc, #32]	; (8003f8c <sf_setup+0xd0>)
 8003f6c:	f7fc fa30 	bl	80003d0 <fatal_error>
}
 8003f70:	b009      	add	sp, #36	; 0x24
 8003f72:	bd30      	pop	{r4, r5, pc}
 8003f74:	40021000 	.word	0x40021000
 8003f78:	08006fa4 	.word	0x08006fa4
 8003f7c:	48000400 	.word	0x48000400
 8003f80:	100062c8 	.word	0x100062c8
 8003f84:	48000800 	.word	0x48000800
 8003f88:	40003800 	.word	0x40003800
 8003f8c:	08006686 	.word	0x08006686

08003f90 <sf_calc_checksum>:
// in SPI flash. Similar to checksum_flash() in verify.c except only
// concerned with firmware, not the rest of flash.
//
    void
sf_calc_checksum(const coldcardFirmwareHeader_t *hdr, uint8_t fw_digest[32])
{
 8003f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f94:	b0bd      	sub	sp, #244	; 0xf4

    SHA256_CTX  ctx;
    uint32_t    total_len = hdr->firmware_length;
 8003f96:	f8d0 8018 	ldr.w	r8, [r0, #24]
// in SPI flash. Similar to checksum_flash() in verify.c except only
// concerned with firmware, not the rest of flash.
//
    void
sf_calc_checksum(const coldcardFirmwareHeader_t *hdr, uint8_t fw_digest[32])
{
 8003f9a:	4607      	mov	r7, r0

    SHA256_CTX  ctx;
    uint32_t    total_len = hdr->firmware_length;

    sha256_init(&ctx);
 8003f9c:	4668      	mov	r0, sp
// in SPI flash. Similar to checksum_flash() in verify.c except only
// concerned with firmware, not the rest of flash.
//
    void
sf_calc_checksum(const coldcardFirmwareHeader_t *hdr, uint8_t fw_digest[32])
{
 8003f9e:	460e      	mov	r6, r1

    SHA256_CTX  ctx;
    uint32_t    total_len = hdr->firmware_length;

    sha256_init(&ctx);
 8003fa0:	f001 fbea 	bl	8005778 <sha256_init>

    uint32_t pos = 0;
    uint8_t buf[128];
    STATIC_ASSERT(FW_HEADER_OFFSET % sizeof(buf) == 0);

    oled_show_progress(screen_verify, 1);
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	482c      	ldr	r0, [pc, #176]	; (8004058 <sf_calc_checksum+0xc8>)
 8003fa8:	f7fc fec0 	bl	8000d2c <oled_show_progress>
    SHA256_CTX  ctx;
    uint32_t    total_len = hdr->firmware_length;

    sha256_init(&ctx);

    uint32_t pos = 0;
 8003fac:	2400      	movs	r4, #0

    oled_show_progress(screen_verify, 1);

    // do part up to header.
    for(; pos < FW_HEADER_OFFSET; pos += sizeof(buf)) { 
        if(sf_read(pos, sizeof(buf), buf) != HAL_OK) {
 8003fae:	aa1c      	add	r2, sp, #112	; 0x70
 8003fb0:	2180      	movs	r1, #128	; 0x80
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7ff fed8 	bl	8003d68 <sf_read>
 8003fb8:	4605      	mov	r5, r0
 8003fba:	b138      	cbz	r0, 8003fcc <sf_calc_checksum+0x3c>
        fail:
            // fail for sure with bad signature; user can try again
            memset(fw_digest, 0, 32);
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4630      	mov	r0, r6

    // double SHA256
    sha256_init(&ctx);
    sha256_update(&ctx, fw_digest, 32);
    sha256_final(&ctx, fw_digest);
}
 8003fc2:	b03d      	add	sp, #244	; 0xf4
 8003fc4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // do part up to header.
    for(; pos < FW_HEADER_OFFSET; pos += sizeof(buf)) { 
        if(sf_read(pos, sizeof(buf), buf) != HAL_OK) {
        fail:
            // fail for sure with bad signature; user can try again
            memset(fw_digest, 0, 32);
 8003fc8:	f002 bb25 	b.w	8006616 <memset>
            return;
        }

        sha256_update(&ctx, buf, sizeof(buf));
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	a91c      	add	r1, sp, #112	; 0x70
 8003fd0:	4668      	mov	r0, sp
    STATIC_ASSERT(FW_HEADER_OFFSET % sizeof(buf) == 0);

    oled_show_progress(screen_verify, 1);

    // do part up to header.
    for(; pos < FW_HEADER_OFFSET; pos += sizeof(buf)) { 
 8003fd2:	3480      	adds	r4, #128	; 0x80
            // fail for sure with bad signature; user can try again
            memset(fw_digest, 0, 32);
            return;
        }

        sha256_update(&ctx, buf, sizeof(buf));
 8003fd4:	f001 fbfa 	bl	80057cc <sha256_update>
    STATIC_ASSERT(FW_HEADER_OFFSET % sizeof(buf) == 0);

    oled_show_progress(screen_verify, 1);

    // do part up to header.
    for(; pos < FW_HEADER_OFFSET; pos += sizeof(buf)) { 
 8003fd8:	f5b4 5f7e 	cmp.w	r4, #16256	; 0x3f80
 8003fdc:	d1e7      	bne.n	8003fae <sf_calc_checksum+0x1e>
        sha256_update(&ctx, buf, sizeof(buf));
    }

    // include file header (but not the signature)
    ASSERT(pos == FW_HEADER_OFFSET);
    sha256_update(&ctx, (const uint8_t *)hdr, FW_HEADER_SIZE - 64);
 8003fde:	2240      	movs	r2, #64	; 0x40
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	4668      	mov	r0, sp
 8003fe4:	f001 fbf2 	bl	80057cc <sha256_update>

    // then the rest after the 'header' ... the useful firmware
    pos += FW_HEADER_SIZE;
 8003fe8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
        }
        sha256_update(&ctx, buf, sizeof(buf));

        if((count % 16) == 0) {
            int percent = (pos * 100) / total_len;
            oled_show_progress(screen_verify, percent);
 8003fec:	f04f 0964 	mov.w	r9, #100	; 0x64
    sha256_update(&ctx, (const uint8_t *)hdr, FW_HEADER_SIZE - 64);

    // then the rest after the 'header' ... the useful firmware
    pos += FW_HEADER_SIZE;

    for(int count=0; pos < total_len; pos += sizeof(buf), count++) { 
 8003ff0:	4544      	cmp	r4, r8
 8003ff2:	d217      	bcs.n	8004024 <sf_calc_checksum+0x94>
        if(sf_read(pos, sizeof(buf), buf) != HAL_OK) {
 8003ff4:	aa1c      	add	r2, sp, #112	; 0x70
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f7ff feb5 	bl	8003d68 <sf_read>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d1dc      	bne.n	8003fbc <sf_calc_checksum+0x2c>
            goto fail;
        }
        sha256_update(&ctx, buf, sizeof(buf));
 8004002:	2280      	movs	r2, #128	; 0x80
 8004004:	a91c      	add	r1, sp, #112	; 0x70
 8004006:	4668      	mov	r0, sp
 8004008:	f001 fbe0 	bl	80057cc <sha256_update>

        if((count % 16) == 0) {
 800400c:	072b      	lsls	r3, r5, #28
 800400e:	d106      	bne.n	800401e <sf_calc_checksum+0x8e>
            int percent = (pos * 100) / total_len;
            oled_show_progress(screen_verify, percent);
 8004010:	fb09 f104 	mul.w	r1, r9, r4
 8004014:	4810      	ldr	r0, [pc, #64]	; (8004058 <sf_calc_checksum+0xc8>)
 8004016:	fbb1 f1f8 	udiv	r1, r1, r8
 800401a:	f7fc fe87 	bl	8000d2c <oled_show_progress>
    sha256_update(&ctx, (const uint8_t *)hdr, FW_HEADER_SIZE - 64);

    // then the rest after the 'header' ... the useful firmware
    pos += FW_HEADER_SIZE;

    for(int count=0; pos < total_len; pos += sizeof(buf), count++) { 
 800401e:	3480      	adds	r4, #128	; 0x80
 8004020:	3501      	adds	r5, #1
 8004022:	e7e5      	b.n	8003ff0 <sf_calc_checksum+0x60>
            int percent = (pos * 100) / total_len;
            oled_show_progress(screen_verify, percent);
        }
    }

    ASSERT(pos == hdr->firmware_length);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	429c      	cmp	r4, r3
 8004028:	d002      	beq.n	8004030 <sf_calc_checksum+0xa0>
 800402a:	480c      	ldr	r0, [pc, #48]	; (800405c <sf_calc_checksum+0xcc>)
 800402c:	f7fc f9d0 	bl	80003d0 <fatal_error>

    sha256_final(&ctx, fw_digest);
 8004030:	4631      	mov	r1, r6
 8004032:	4668      	mov	r0, sp
 8004034:	f001 fbe8 	bl	8005808 <sha256_final>

    // double SHA256
    sha256_init(&ctx);
 8004038:	4668      	mov	r0, sp
 800403a:	f001 fb9d 	bl	8005778 <sha256_init>
    sha256_update(&ctx, fw_digest, 32);
 800403e:	2220      	movs	r2, #32
 8004040:	4631      	mov	r1, r6
 8004042:	4668      	mov	r0, sp
 8004044:	f001 fbc2 	bl	80057cc <sha256_update>
    sha256_final(&ctx, fw_digest);
 8004048:	4631      	mov	r1, r6
 800404a:	4668      	mov	r0, sp
 800404c:	f001 fbdc 	bl	8005808 <sha256_final>
}
 8004050:	b03d      	add	sp, #244	; 0xf4
 8004052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004056:	bf00      	nop
 8004058:	080067e4 	.word	0x080067e4
 800405c:	08006686 	.word	0x08006686

08004060 <sf_firmware_upgrade>:
//
// maybe upgrade to a firmware image found in sflash
//
    void
sf_firmware_upgrade(void)
{
 8004060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
    coldcardFirmwareHeader_t    hdr = {};
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	2100      	movs	r1, #0
 800406c:	a808      	add	r0, sp, #32
 800406e:	f002 fad2 	bl	8006616 <memset>

    // simple: just read in right spot to see header.
    sf_setup();
 8004072:	f7ff ff23 	bl	8003ebc <sf_setup>

    if(sf_read(FW_HEADER_OFFSET, sizeof(hdr), (void *)&hdr) != HAL_OK) {
 8004076:	aa08      	add	r2, sp, #32
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	f44f 507e 	mov.w	r0, #16256	; 0x3f80
 800407e:	f7ff fe73 	bl	8003d68 <sf_read>
 8004082:	4604      	mov	r4, r0
 8004084:	2800      	cmp	r0, #0
 8004086:	f040 809b 	bne.w	80041c0 <sf_firmware_upgrade+0x160>
        // hardware issues, keep going
        return;
    }

    if(!verify_header(&hdr)) {
 800408a:	a808      	add	r0, sp, #32
 800408c:	f7fd fc2c 	bl	80018e8 <verify_header>
 8004090:	2800      	cmp	r0, #0
 8004092:	f000 8095 	beq.w	80041c0 <sf_firmware_upgrade+0x160>
    //
    // Solution: Look for a duplicated header at end of file. Will always write that last,
    // and even do a checksum over the data uploaded into the sflash before writing final
    // header out.
    // 
    uint32_t off = hdr.firmware_length;
 8004096:	9e0e      	ldr	r6, [sp, #56]	; 0x38

    coldcardFirmwareHeader_t    hdr2 = {};
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	4621      	mov	r1, r4
 800409c:	a828      	add	r0, sp, #160	; 0xa0
 800409e:	f002 faba 	bl	8006616 <memset>
    if(sf_read(off, sizeof(hdr2), (void *)&hdr2) != HAL_OK) {
 80040a2:	aa28      	add	r2, sp, #160	; 0xa0
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	4630      	mov	r0, r6
 80040a8:	f7ff fe5e 	bl	8003d68 <sf_read>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	f040 8087 	bne.w	80041c0 <sf_firmware_upgrade+0x160>
        // Huh??? Hardware issue?
        return;
    }

    if(memcmp(&hdr, &hdr2, sizeof(hdr)) != 0) {
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	a928      	add	r1, sp, #160	; 0xa0
 80040b6:	a808      	add	r0, sp, #32
 80040b8:	f002 fa78 	bl	80065ac <memcmp>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d17f      	bne.n	80041c0 <sf_firmware_upgrade+0x160>
    // even tho we have enough data (from SPI) to complete upgrade successfully.
    // So only clear flash once we've comlpeted successfully, or determined it
    // cannot work (bad signature, etc).

    // Check for downgrade attack: show warning and stop.
    if(check_is_downgrade(hdr.timestamp, (const char *)hdr.version_string)) {
 80040c0:	a90b      	add	r1, sp, #44	; 0x2c
 80040c2:	a809      	add	r0, sp, #36	; 0x24
 80040c4:	f7fd fbea 	bl	800189c <check_is_downgrade>
 80040c8:	4604      	mov	r4, r0
 80040ca:	b168      	cbz	r0, 80040e8 <sf_firmware_upgrade+0x88>
        oled_show(screen_downgrade);
 80040cc:	483e      	ldr	r0, [pc, #248]	; (80041c8 <sf_firmware_upgrade+0x168>)
 80040ce:	f7fc fded 	bl	8000cac <oled_show>

    fail:{
            // prevent second attempts. pointless
            uint8_t zeros[128] = { 0 };
 80040d2:	2100      	movs	r1, #0
 80040d4:	2280      	movs	r2, #128	; 0x80
 80040d6:	a848      	add	r0, sp, #288	; 0x120
 80040d8:	f002 fa9d 	bl	8006616 <memset>
            sf_write(off, sizeof(zeros), zeros);
 80040dc:	a948      	add	r1, sp, #288	; 0x120
 80040de:	4630      	mov	r0, r6
 80040e0:	f7ff fe76 	bl	8003dd0 <sf_write.constprop.1>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80040e4:	bf30      	wfi
 80040e6:	e7fd      	b.n	80040e4 <sf_firmware_upgrade+0x84>
        LOCKUP_FOREVER();
    }

    // Check the firmware signature before changing main flash at all.
    uint8_t fw_digest[32];
    sf_calc_checksum(&hdr, fw_digest);
 80040e8:	4669      	mov	r1, sp
 80040ea:	a808      	add	r0, sp, #32
 80040ec:	f7ff ff50 	bl	8003f90 <sf_calc_checksum>

    bool ok = verify_signature(&hdr, fw_digest);
 80040f0:	4669      	mov	r1, sp
 80040f2:	a808      	add	r0, sp, #32
 80040f4:	f7fd fc14 	bl	8001920 <verify_signature>
    if(!ok) {
 80040f8:	b908      	cbnz	r0, 80040fe <sf_firmware_upgrade+0x9e>
        // Bad signature over SPI contents; might be corruption or bad signature
        // We would not run the resulting firmware in main flash, so don't erase
        // what we have there now and abort.
        oled_show(screen_corrupt);
 80040fa:	4834      	ldr	r0, [pc, #208]	; (80041cc <sf_firmware_upgrade+0x16c>)
 80040fc:	e7e7      	b.n	80040ce <sf_firmware_upgrade+0x6e>

        goto fail;
    }

    // Start the upgrade ... takes about a minute.
    sf_do_upgrade(hdr.firmware_length);
 80040fe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
// Copy from SPI flash to real flash, at final executable location.
//
    static void
sf_do_upgrade(uint32_t size)
{
    ASSERT(size >= FW_MIN_LENGTH);
 8004100:	f5b7 2f80 	cmp.w	r7, #262144	; 0x40000
 8004104:	d201      	bcs.n	800410a <sf_firmware_upgrade+0xaa>
 8004106:	4832      	ldr	r0, [pc, #200]	; (80041d0 <sf_firmware_upgrade+0x170>)
 8004108:	e019      	b.n	800413e <sf_firmware_upgrade+0xde>

    flash_setup0();
 800410a:	f7fd fd2d 	bl	8001b68 <flash_setup0>
    flash_unlock();
 800410e:	f7fd fd4f 	bl	8001bb0 <flash_unlock>
 8004112:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80041e4 <sf_firmware_upgrade+0x184>
    uint8_t     tmp[256] __attribute__((aligned(8)));

    for(uint32_t pos=0; pos<size; pos += sizeof(tmp)) {
        // show some progress
        if((pos % 4096) == 0) {
            oled_show_progress(screen_upgrading, pos*100/size);
 8004116:	f04f 0864 	mov.w	r8, #100	; 0x64

    uint8_t     tmp[256] __attribute__((aligned(8)));

    for(uint32_t pos=0; pos<size; pos += sizeof(tmp)) {
        // show some progress
        if((pos % 4096) == 0) {
 800411a:	f3c4 030b 	ubfx	r3, r4, #0, #12
 800411e:	b933      	cbnz	r3, 800412e <sf_firmware_upgrade+0xce>
            oled_show_progress(screen_upgrading, pos*100/size);
 8004120:	fb08 f104 	mul.w	r1, r8, r4
 8004124:	482b      	ldr	r0, [pc, #172]	; (80041d4 <sf_firmware_upgrade+0x174>)
 8004126:	fbb1 f1f7 	udiv	r1, r1, r7
 800412a:	f7fc fdff 	bl	8000d2c <oled_show_progress>
        }

        if(sf_read(pos, sizeof(tmp), tmp) != HAL_OK) {
 800412e:	aa48      	add	r2, sp, #288	; 0x120
 8004130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004134:	4620      	mov	r0, r4
 8004136:	f7ff fe17 	bl	8003d68 <sf_read>
 800413a:	b110      	cbz	r0, 8004142 <sf_firmware_upgrade+0xe2>
            INCONSISTENT();
 800413c:	4826      	ldr	r0, [pc, #152]	; (80041d8 <sf_firmware_upgrade+0x178>)
 800413e:	f7fc f947 	bl	80003d0 <fatal_error>
 8004142:	f104 6300 	add.w	r3, r4, #134217728	; 0x8000000
 8004146:	f503 4500 	add.w	r5, r3, #32768	; 0x8000
 800414a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800414e:	f503 4b01 	add.w	fp, r3, #33024	; 0x8100
        }

        uint32_t addr = FIRMWARE_START + pos;
        uint64_t *b = (uint64_t *)tmp;

        for(int i=0; i<sizeof(tmp)/sizeof(uint64_t); i++) {
 8004152:	455d      	cmp	r5, fp
 8004154:	d010      	beq.n	8004178 <sf_firmware_upgrade+0x118>
            int rv;

            if(addr % FLASH_PAGE_SIZE == 0) {
 8004156:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800415a:	b923      	cbnz	r3, 8004166 <sf_firmware_upgrade+0x106>
                rv = flash_page_erase(addr);
 800415c:	4628      	mov	r0, r5
 800415e:	f002 fa87 	bl	8006670 <__flash_page_erase_veneer>
                ASSERT(rv == 0);
 8004162:	2800      	cmp	r0, #0
 8004164:	d1cf      	bne.n	8004106 <sf_firmware_upgrade+0xa6>
            }

            rv = flash_burn(addr, *(b++));
 8004166:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 800416a:	4628      	mov	r0, r5
 800416c:	f002 fa78 	bl	8006660 <__flash_burn_veneer>
            ASSERT(rv == 0);
 8004170:	2800      	cmp	r0, #0
 8004172:	d1c8      	bne.n	8004106 <sf_firmware_upgrade+0xa6>
            addr += sizeof(uint64_t);
 8004174:	3508      	adds	r5, #8
 8004176:	e7ec      	b.n	8004152 <sf_firmware_upgrade+0xf2>
        }

        if(dfu_button_pressed() && !flash_is_security_level2()) {
 8004178:	f7fe ffee 	bl	8003158 <dfu_button_pressed>
 800417c:	b140      	cbz	r0, 8004190 <sf_firmware_upgrade+0x130>
 800417e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2bcc      	cmp	r3, #204	; 0xcc
 8004186:	d003      	beq.n	8004190 <sf_firmware_upgrade+0x130>
            flash_lock();
 8004188:	f7fd fd0a 	bl	8001ba0 <flash_lock>

            dfu_by_request();
 800418c:	f7fc f9ca 	bl	8000524 <dfu_by_request>
    flash_setup0();
    flash_unlock();

    uint8_t     tmp[256] __attribute__((aligned(8)));

    for(uint32_t pos=0; pos<size; pos += sizeof(tmp)) {
 8004190:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8004194:	42a7      	cmp	r7, r4
 8004196:	d8c0      	bhi.n	800411a <sf_firmware_upgrade+0xba>
            dfu_by_request();
            // NOT-REACHED
        }
    }

    flash_lock();
 8004198:	f7fd fd02 	bl	8001ba0 <flash_lock>
    }

    // Start the upgrade ... takes about a minute.
    sf_do_upgrade(hdr.firmware_length);

    if(hdr.install_flags & FWHIF_HIGH_WATER) {
 800419c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800419e:	07db      	lsls	r3, r3, #31
 80041a0:	d502      	bpl.n	80041a8 <sf_firmware_upgrade+0x148>
        // Maybe set a new high-waterlevel for future versions.
        // Ignore failures, since we can't recover anyway.
        record_highwater_version(hdr.timestamp);
 80041a2:	a809      	add	r0, sp, #36	; 0x24
 80041a4:	f7fd fe78 	bl	8001e98 <record_highwater_version>
    }

    // We're done, so clear header 
    uint8_t zeros[128] = { 0 };
 80041a8:	2280      	movs	r2, #128	; 0x80
 80041aa:	2100      	movs	r1, #0
 80041ac:	a848      	add	r0, sp, #288	; 0x120
 80041ae:	f002 fa32 	bl	8006616 <memset>
    sf_write(off, sizeof(zeros), zeros);
 80041b2:	a948      	add	r1, sp, #288	; 0x120
 80041b4:	4630      	mov	r0, r6
 80041b6:	f7ff fe0b 	bl	8003dd0 <sf_write.constprop.1>

    // Tell python, ultimately, that it worked.
    sf_completed_upgrade = SF_COMPLETED_UPGRADE;
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <sf_firmware_upgrade+0x17c>)
 80041bc:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <sf_firmware_upgrade+0x180>)
 80041be:	601a      	str	r2, [r3, #0]
}
 80041c0:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 80041c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c8:	08006c24 	.word	0x08006c24
 80041cc:	08006cb4 	.word	0x08006cb4
 80041d0:	08006686 	.word	0x08006686
 80041d4:	080068b2 	.word	0x080068b2
 80041d8:	08006680 	.word	0x08006680
 80041dc:	10006330 	.word	0x10006330
 80041e0:	b50d5c24 	.word	0xb50d5c24
 80041e4:	40022000 	.word	0x40022000

080041e8 <HAL_InitTick>:

/* Includes ------------------------------------------------------------------*/
#include "stm32l4xx_hal.h"

// unwanted junk
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority) { return 0; }
 80041e8:	2000      	movs	r0, #0
 80041ea:	4770      	bx	lr

080041ec <HAL_RCC_DeInit>:
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80041ec:	4b17      	ldr	r3, [pc, #92]	; (800424c <HAL_RCC_DeInit+0x60>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	461a      	mov	r2, r3

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET) { __NOP(); }
 80041f8:	6811      	ldr	r1, [r2, #0]
 80041fa:	4b14      	ldr	r3, [pc, #80]	; (800424c <HAL_RCC_DeInit+0x60>)
 80041fc:	0789      	lsls	r1, r1, #30
 80041fe:	d401      	bmi.n	8004204 <HAL_RCC_DeInit+0x18>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004200:	bf00      	nop
 8004202:	e7f9      	b.n	80041f8 <HAL_RCC_DeInit+0xc>

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8004204:	681a      	ldr	r2, [r3, #0]
  CLEAR_REG(RCC->CFGR);

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8004206:	4912      	ldr	r1, [pc, #72]	; (8004250 <HAL_RCC_DeInit+0x64>)

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET) { __NOP(); }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8004208:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800420c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004210:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	4001      	ands	r1, r0
 800421a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 800421c:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 800421e:	68d9      	ldr	r1, [r3, #12]
 8004220:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004224:	60d9      	str	r1, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8004226:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8004228:	6919      	ldr	r1, [r3, #16]
 800422a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800422e:	6119      	str	r1, [r3, #16]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8004230:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 8004232:	6959      	ldr	r1, [r3, #20]
 8004234:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004238:	6159      	str	r1, [r3, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800423a:	6819      	ldr	r1, [r3, #0]
 800423c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004240:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8004242:	619a      	str	r2, [r3, #24]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_RCC_DeInit+0x68>)
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <HAL_RCC_DeInit+0x6c>)
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	4770      	bx	lr
 800424c:	40021000 	.word	0x40021000
 8004250:	eafef4ff 	.word	0xeafef4ff
 8004254:	1000632c 	.word	0x1000632c
 8004258:	003d0900 	.word	0x003d0900

0800425c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800425c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 800425e:	4c11      	ldr	r4, [pc, #68]	; (80042a4 <HAL_RCC_MCOConfig+0x48>)
 8004260:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004268:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800426a:	b086      	sub	sp, #24
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	9b00      	ldr	r3, [sp, #0]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004278:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427a:	2302      	movs	r3, #2
 800427c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800427e:	9304      	str	r3, [sp, #16]
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004280:	460d      	mov	r5, r1

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004284:	a901      	add	r1, sp, #4
 8004286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800428a:	4616      	mov	r6, r2

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800428e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004290:	f7fc fdee 	bl	8000e70 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004294:	68a2      	ldr	r2, [r4, #8]
 8004296:	f022 42ee 	bic.w	r2, r2, #1996488704	; 0x77000000
 800429a:	4316      	orrs	r6, r2
 800429c:	4335      	orrs	r5, r6
 800429e:	60a5      	str	r5, [r4, #8]
}
 80042a0:	b006      	add	sp, #24
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	40021000 	.word	0x40021000

080042a8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80042a8:	4932      	ldr	r1, [pc, #200]	; (8004374 <HAL_RCC_GetSysClockFreq+0xcc>)
 80042aa:	688b      	ldr	r3, [r1, #8]
 80042ac:	f013 0f0c 	tst.w	r3, #12
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	b510      	push	{r4, lr}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80042b2:	d009      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80042b4:	688b      	ldr	r3, [r1, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d11a      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0x4c>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80042be:	68cb      	ldr	r3, [r1, #12]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d115      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80042c8:	680a      	ldr	r2, [r1, #0]
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <HAL_RCC_GetSysClockFreq+0xcc>)
 80042cc:	0712      	lsls	r2, r2, #28
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042ce:	bf54      	ite	pl
 80042d0:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042d4:	681b      	ldrmi	r3, [r3, #0]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042d6:	4a28      	ldr	r2, [pc, #160]	; (8004378 <HAL_RCC_GetSysClockFreq+0xd0>)
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d8:	bf54      	ite	pl
 80042da:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042de:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80042e6:	688b      	ldr	r3, [r1, #8]
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042e8:	f013 0f0c 	tst.w	r3, #12
 80042ec:	bf0c      	ite	eq
 80042ee:	4620      	moveq	r0, r4
 80042f0:	2000      	movne	r0, #0
 80042f2:	e011      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x70>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042f4:	688b      	ldr	r3, [r1, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d007      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0x66>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042fe:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b08      	cmp	r3, #8
 8004308:	d104      	bne.n	8004314 <HAL_RCC_GetSysClockFreq+0x6c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800430a:	481c      	ldr	r0, [pc, #112]	; (800437c <HAL_RCC_GetSysClockFreq+0xd4>)
 800430c:	e000      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x68>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800430e:	481c      	ldr	r0, [pc, #112]	; (8004380 <HAL_RCC_GetSysClockFreq+0xd8>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8004310:	2400      	movs	r4, #0
 8004312:	e001      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x70>
  uint32_t sysclockfreq = 0U;
 8004314:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8004316:	4604      	mov	r4, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004318:	688a      	ldr	r2, [r1, #8]
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <HAL_RCC_GetSysClockFreq+0xcc>)
 800431c:	f002 020c 	and.w	r2, r2, #12
 8004320:	2a0c      	cmp	r2, #12
 8004322:	d126      	bne.n	8004372 <HAL_RCC_GetSysClockFreq+0xca>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004324:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004326:	68d8      	ldr	r0, [r3, #12]

    switch (pllsource)
 8004328:	f002 0203 	and.w	r2, r2, #3

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800432c:	f3c0 1002 	ubfx	r0, r0, #4, #3

    switch (pllsource)
 8004330:	2a02      	cmp	r2, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004332:	f100 0001 	add.w	r0, r0, #1

    switch (pllsource)
 8004336:	d006      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x9e>
 8004338:	2a03      	cmp	r2, #3
 800433a:	d10c      	bne.n	8004356 <HAL_RCC_GetSysClockFreq+0xae>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4a0f      	ldr	r2, [pc, #60]	; (800437c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004340:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8004344:	e003      	b.n	800434e <HAL_RCC_GetSysClockFreq+0xa6>
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a0d      	ldr	r2, [pc, #52]	; (8004380 <HAL_RCC_GetSysClockFreq+0xd8>)
 800434a:	f3c3 2306 	ubfx	r3, r3, #8, #7
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800434e:	fbb2 f0f0 	udiv	r0, r2, r0
 8004352:	4343      	muls	r3, r0
      break;
 8004354:	e006      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	fbb4 f0f0 	udiv	r0, r4, r0
 800435c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004360:	fb00 f302 	mul.w	r3, r0, r2
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004364:	68c8      	ldr	r0, [r1, #12]
    sysclockfreq = pllvco/pllr;
 8004366:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800436a:	3001      	adds	r0, #1
 800436c:	0040      	lsls	r0, r0, #1
 800436e:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 8004372:	bd10      	pop	{r4, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	080066b4 	.word	0x080066b4
 800437c:	007a1200 	.word	0x007a1200
 8004380:	00f42400 	.word	0x00f42400

08004384 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004384:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004386:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800438a:	06dd      	lsls	r5, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800438e:	d564      	bpl.n	800445a <HAL_RCC_OscConfig+0xd6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8004390:	4da2      	ldr	r5, [pc, #648]	; (800461c <HAL_RCC_OscConfig+0x298>)
 8004392:	68ab      	ldr	r3, [r5, #8]
 8004394:	f013 0f0c 	tst.w	r3, #12
 8004398:	d129      	bne.n	80043ee <HAL_RCC_OscConfig+0x6a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800439a:	682b      	ldr	r3, [r5, #0]
 800439c:	0798      	lsls	r0, r3, #30
 800439e:	d503      	bpl.n	80043a8 <HAL_RCC_OscConfig+0x24>
 80043a0:	69a3      	ldr	r3, [r4, #24]
 80043a2:	b90b      	cbnz	r3, 80043a8 <HAL_RCC_OscConfig+0x24>
      {
        return HAL_ERROR;
 80043a4:	2001      	movs	r0, #1
 80043a6:	e1f7      	b.n	8004798 <HAL_RCC_OscConfig+0x414>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043a8:	6829      	ldr	r1, [r5, #0]
 80043aa:	4b9c      	ldr	r3, [pc, #624]	; (800461c <HAL_RCC_OscConfig+0x298>)
 80043ac:	6a22      	ldr	r2, [r4, #32]
 80043ae:	0709      	lsls	r1, r1, #28
 80043b0:	bf4c      	ite	mi
 80043b2:	681b      	ldrmi	r3, [r3, #0]
 80043b4:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	f043 0308 	orr.w	r3, r3, #8
 80043be:	602b      	str	r3, [r5, #0]
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c6:	431a      	orrs	r2, r3
 80043c8:	602a      	str	r2, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ca:	686b      	ldr	r3, [r5, #4]
 80043cc:	69e2      	ldr	r2, [r4, #28]
 80043ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80043d6:	606b      	str	r3, [r5, #4]
            return HAL_ERROR;
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043d8:	f7ff ff66 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 80043dc:	68ab      	ldr	r3, [r5, #8]
 80043de:	4a90      	ldr	r2, [pc, #576]	; (8004620 <HAL_RCC_OscConfig+0x29c>)
 80043e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043e4:	5cd3      	ldrb	r3, [r2, r3]
 80043e6:	40d8      	lsrs	r0, r3
 80043e8:	4b8e      	ldr	r3, [pc, #568]	; (8004624 <HAL_RCC_OscConfig+0x2a0>)
 80043ea:	6018      	str	r0, [r3, #0]
 80043ec:	e035      	b.n	800445a <HAL_RCC_OscConfig+0xd6>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ee:	6983      	ldr	r3, [r0, #24]
 80043f0:	b31b      	cbz	r3, 800443a <HAL_RCC_OscConfig+0xb6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043f2:	682b      	ldr	r3, [r5, #0]
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043fa:	f7fc fb4d 	bl	8000a98 <HAL_GetTick>
 80043fe:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8004400:	682a      	ldr	r2, [r5, #0]
 8004402:	4b86      	ldr	r3, [pc, #536]	; (800461c <HAL_RCC_OscConfig+0x298>)
 8004404:	0792      	lsls	r2, r2, #30
 8004406:	d406      	bmi.n	8004416 <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004408:	f7fc fb46 	bl	8000a98 <HAL_GetTick>
 800440c:	1b80      	subs	r0, r0, r6
 800440e:	2802      	cmp	r0, #2
 8004410:	d9f6      	bls.n	8004400 <HAL_RCC_OscConfig+0x7c>
          {
            return HAL_TIMEOUT;
 8004412:	2003      	movs	r0, #3
 8004414:	e1c0      	b.n	8004798 <HAL_RCC_OscConfig+0x414>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	f042 0208 	orr.w	r2, r2, #8
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8004424:	6a22      	ldr	r2, [r4, #32]
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	69e1      	ldr	r1, [r4, #28]
 800442e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004432:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	e00f      	b.n	800445a <HAL_RCC_OscConfig+0xd6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800443a:	682b      	ldr	r3, [r5, #0]
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004442:	f7fc fb29 	bl	8000a98 <HAL_GetTick>
 8004446:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	079f      	lsls	r7, r3, #30
 800444c:	d505      	bpl.n	800445a <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800444e:	f7fc fb23 	bl	8000a98 <HAL_GetTick>
 8004452:	1b80      	subs	r0, r0, r6
 8004454:	2802      	cmp	r0, #2
 8004456:	d9f7      	bls.n	8004448 <HAL_RCC_OscConfig+0xc4>
 8004458:	e7db      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	07de      	lsls	r6, r3, #31
 800445e:	d403      	bmi.n	8004468 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	079d      	lsls	r5, r3, #30
 8004464:	d448      	bmi.n	80044f8 <HAL_RCC_OscConfig+0x174>
 8004466:	e091      	b.n	800458c <HAL_RCC_OscConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8004468:	4d6c      	ldr	r5, [pc, #432]	; (800461c <HAL_RCC_OscConfig+0x298>)
 800446a:	68ab      	ldr	r3, [r5, #8]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b08      	cmp	r3, #8
 8004472:	d009      	beq.n	8004488 <HAL_RCC_OscConfig+0x104>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004474:	68ab      	ldr	r3, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d10b      	bne.n	8004496 <HAL_RCC_OscConfig+0x112>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800447e:	68eb      	ldr	r3, [r5, #12]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b03      	cmp	r3, #3
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x112>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	0398      	lsls	r0, r3, #14
 800448c:	d5e8      	bpl.n	8004460 <HAL_RCC_OscConfig+0xdc>
 800448e:	6863      	ldr	r3, [r4, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e5      	bne.n	8004460 <HAL_RCC_OscConfig+0xdc>
 8004494:	e786      	b.n	80043a4 <HAL_RCC_OscConfig+0x20>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004496:	6863      	ldr	r3, [r4, #4]
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449c:	d006      	beq.n	80044ac <HAL_RCC_OscConfig+0x128>
 800449e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a2:	d108      	bne.n	80044b6 <HAL_RCC_OscConfig+0x132>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b2:	602b      	str	r3, [r5, #0]
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x144>
 80044b6:	682a      	ldr	r2, [r5, #0]
 80044b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80044bc:	602a      	str	r2, [r5, #0]
 80044be:	682a      	ldr	r2, [r5, #0]
 80044c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044c4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c6:	b15b      	cbz	r3, 80044e0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fc fae6 	bl	8000a98 <HAL_GetTick>
 80044cc:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	0399      	lsls	r1, r3, #14
 80044d2:	d4c5      	bmi.n	8004460 <HAL_RCC_OscConfig+0xdc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fc fae0 	bl	8000a98 <HAL_GetTick>
 80044d8:	1b80      	subs	r0, r0, r6
 80044da:	2864      	cmp	r0, #100	; 0x64
 80044dc:	d9f7      	bls.n	80044ce <HAL_RCC_OscConfig+0x14a>
 80044de:	e798      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fc fada 	bl	8000a98 <HAL_GetTick>
 80044e4:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80044e6:	682b      	ldr	r3, [r5, #0]
 80044e8:	039a      	lsls	r2, r3, #14
 80044ea:	d5b9      	bpl.n	8004460 <HAL_RCC_OscConfig+0xdc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fc fad4 	bl	8000a98 <HAL_GetTick>
 80044f0:	1b80      	subs	r0, r0, r6
 80044f2:	2864      	cmp	r0, #100	; 0x64
 80044f4:	d9f7      	bls.n	80044e6 <HAL_RCC_OscConfig+0x162>
 80044f6:	e78c      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80044f8:	4d48      	ldr	r5, [pc, #288]	; (800461c <HAL_RCC_OscConfig+0x298>)
 80044fa:	68ab      	ldr	r3, [r5, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b04      	cmp	r3, #4
 8004502:	d009      	beq.n	8004518 <HAL_RCC_OscConfig+0x194>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004504:	68ab      	ldr	r3, [r5, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d113      	bne.n	8004536 <HAL_RCC_OscConfig+0x1b2>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800450e:	68eb      	ldr	r3, [r5, #12]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d10e      	bne.n	8004536 <HAL_RCC_OscConfig+0x1b2>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	055b      	lsls	r3, r3, #21
 800451c:	d503      	bpl.n	8004526 <HAL_RCC_OscConfig+0x1a2>
 800451e:	68e3      	ldr	r3, [r4, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f43f af3f 	beq.w	80043a4 <HAL_RCC_OscConfig+0x20>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004526:	686b      	ldr	r3, [r5, #4]
 8004528:	6922      	ldr	r2, [r4, #16]
 800452a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800452e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004532:	606b      	str	r3, [r5, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004534:	e02a      	b.n	800458c <HAL_RCC_OscConfig+0x208>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004536:	68e3      	ldr	r3, [r4, #12]
 8004538:	b1c3      	cbz	r3, 800456c <HAL_RCC_OscConfig+0x1e8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453a:	682b      	ldr	r3, [r5, #0]
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fc faa9 	bl	8000a98 <HAL_GetTick>
 8004546:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	4a34      	ldr	r2, [pc, #208]	; (800461c <HAL_RCC_OscConfig+0x298>)
 800454c:	055f      	lsls	r7, r3, #21
 800454e:	d405      	bmi.n	800455c <HAL_RCC_OscConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004550:	f7fc faa2 	bl	8000a98 <HAL_GetTick>
 8004554:	1b80      	subs	r0, r0, r6
 8004556:	2802      	cmp	r0, #2
 8004558:	d9f6      	bls.n	8004548 <HAL_RCC_OscConfig+0x1c4>
 800455a:	e75a      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	6853      	ldr	r3, [r2, #4]
 800455e:	6921      	ldr	r1, [r4, #16]
 8004560:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004564:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004568:	6053      	str	r3, [r2, #4]
 800456a:	e00f      	b.n	800458c <HAL_RCC_OscConfig+0x208>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004572:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fc fa90 	bl	8000a98 <HAL_GetTick>
 8004578:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800457a:	682b      	ldr	r3, [r5, #0]
 800457c:	0558      	lsls	r0, r3, #21
 800457e:	d505      	bpl.n	800458c <HAL_RCC_OscConfig+0x208>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004580:	f7fc fa8a 	bl	8000a98 <HAL_GetTick>
 8004584:	1b80      	subs	r0, r0, r6
 8004586:	2802      	cmp	r0, #2
 8004588:	d9f7      	bls.n	800457a <HAL_RCC_OscConfig+0x1f6>
 800458a:	e742      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	0719      	lsls	r1, r3, #28
 8004590:	d403      	bmi.n	800459a <HAL_RCC_OscConfig+0x216>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	075a      	lsls	r2, r3, #29
 8004596:	d429      	bmi.n	80045ec <HAL_RCC_OscConfig+0x268>
 8004598:	e099      	b.n	80046ce <HAL_RCC_OscConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800459a:	6963      	ldr	r3, [r4, #20]
 800459c:	4d1f      	ldr	r5, [pc, #124]	; (800461c <HAL_RCC_OscConfig+0x298>)
 800459e:	b193      	cbz	r3, 80045c6 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ac:	f7fc fa74 	bl	8000a98 <HAL_GetTick>
 80045b0:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80045b2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80045b6:	079b      	lsls	r3, r3, #30
 80045b8:	d4eb      	bmi.n	8004592 <HAL_RCC_OscConfig+0x20e>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ba:	f7fc fa6d 	bl	8000a98 <HAL_GetTick>
 80045be:	1b80      	subs	r0, r0, r6
 80045c0:	2802      	cmp	r0, #2
 80045c2:	d9f6      	bls.n	80045b2 <HAL_RCC_OscConfig+0x22e>
 80045c4:	e725      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7fc fa61 	bl	8000a98 <HAL_GetTick>
 80045d6:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80045d8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80045dc:	079f      	lsls	r7, r3, #30
 80045de:	d5d8      	bpl.n	8004592 <HAL_RCC_OscConfig+0x20e>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e0:	f7fc fa5a 	bl	8000a98 <HAL_GetTick>
 80045e4:	1b80      	subs	r0, r0, r6
 80045e6:	2802      	cmp	r0, #2
 80045e8:	d9f6      	bls.n	80045d8 <HAL_RCC_OscConfig+0x254>
 80045ea:	e712      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045ec:	4d0b      	ldr	r5, [pc, #44]	; (800461c <HAL_RCC_OscConfig+0x298>)
 80045ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80045f0:	00de      	lsls	r6, r3, #3
 80045f2:	d40a      	bmi.n	800460a <HAL_RCC_OscConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	65ab      	str	r3, [r5, #88]	; 0x58
 80045fc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004606:	2701      	movs	r7, #1
 8004608:	e000      	b.n	800460c <HAL_RCC_OscConfig+0x288>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800460a:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460c:	4e06      	ldr	r6, [pc, #24]	; (8004628 <HAL_RCC_OscConfig+0x2a4>)
 800460e:	6833      	ldr	r3, [r6, #0]
 8004610:	05d8      	lsls	r0, r3, #23
 8004612:	d50b      	bpl.n	800462c <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004614:	68a3      	ldr	r3, [r4, #8]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d119      	bne.n	800464e <HAL_RCC_OscConfig+0x2ca>
 800461a:	e020      	b.n	800465e <HAL_RCC_OscConfig+0x2da>
 800461c:	40021000 	.word	0x40021000
 8004620:	08006699 	.word	0x08006699
 8004624:	1000632c 	.word	0x1000632c
 8004628:	40007000 	.word	0x40007000
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004632:	6033      	str	r3, [r6, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004634:	f7fc fa30 	bl	8000a98 <HAL_GetTick>
 8004638:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463a:	6833      	ldr	r3, [r6, #0]
 800463c:	05d9      	lsls	r1, r3, #23
 800463e:	d4e9      	bmi.n	8004614 <HAL_RCC_OscConfig+0x290>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004640:	f7fc fa2a 	bl	8000a98 <HAL_GetTick>
 8004644:	ebc8 0000 	rsb	r0, r8, r0
 8004648:	2802      	cmp	r0, #2
 800464a:	d9f6      	bls.n	800463a <HAL_RCC_OscConfig+0x2b6>
 800464c:	e6e1      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800464e:	2b05      	cmp	r3, #5
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x2e8>
 8004652:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 800465e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 800466a:	e00c      	b.n	8004686 <HAL_RCC_OscConfig+0x302>
 800466c:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8004678:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800467c:	f022 0204 	bic.w	r2, r2, #4
 8004680:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004684:	b173      	cbz	r3, 80046a4 <HAL_RCC_OscConfig+0x320>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fc fa07 	bl	8000a98 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f241 3888 	movw	r8, #5000	; 0x1388

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8004690:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004694:	079a      	lsls	r2, r3, #30
 8004696:	d40e      	bmi.n	80046b6 <HAL_RCC_OscConfig+0x332>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fc f9fe 	bl	8000a98 <HAL_GetTick>
 800469c:	1b80      	subs	r0, r0, r6
 800469e:	4540      	cmp	r0, r8
 80046a0:	d9f6      	bls.n	8004690 <HAL_RCC_OscConfig+0x30c>
 80046a2:	e6b6      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fc f9f8 	bl	8000a98 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80046ae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80046b2:	079b      	lsls	r3, r3, #30
 80046b4:	d405      	bmi.n	80046c2 <HAL_RCC_OscConfig+0x33e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b6:	b157      	cbz	r7, 80046ce <HAL_RCC_OscConfig+0x34a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80046ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046be:	65ab      	str	r3, [r5, #88]	; 0x58
 80046c0:	e005      	b.n	80046ce <HAL_RCC_OscConfig+0x34a>
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fc f9e9 	bl	8000a98 <HAL_GetTick>
 80046c6:	1b80      	subs	r0, r0, r6
 80046c8:	4540      	cmp	r0, r8
 80046ca:	d9f0      	bls.n	80046ae <HAL_RCC_OscConfig+0x32a>
 80046cc:	e6a1      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80046d0:	b90a      	cbnz	r2, 80046d6 <HAL_RCC_OscConfig+0x352>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80046d2:	2000      	movs	r0, #0
 80046d4:	e060      	b.n	8004798 <HAL_RCC_OscConfig+0x414>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d6:	4d32      	ldr	r5, [pc, #200]	; (80047a0 <HAL_RCC_OscConfig+0x41c>)
 80046d8:	68ab      	ldr	r3, [r5, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	f43f ae60 	beq.w	80043a4 <HAL_RCC_OscConfig+0x20>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e4:	682b      	ldr	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046e6:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ec:	602b      	str	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046ee:	d137      	bne.n	8004760 <HAL_RCC_OscConfig+0x3dc>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fc f9d2 	bl	8000a98 <HAL_GetTick>
 80046f4:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	4829      	ldr	r0, [pc, #164]	; (80047a0 <HAL_RCC_OscConfig+0x41c>)
 80046fa:	019f      	lsls	r7, r3, #6
 80046fc:	d505      	bpl.n	800470a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fc f9cb 	bl	8000a98 <HAL_GetTick>
 8004702:	1b80      	subs	r0, r0, r6
 8004704:	2802      	cmp	r0, #2
 8004706:	d9f6      	bls.n	80046f6 <HAL_RCC_OscConfig+0x372>
 8004708:	e683      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800470a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800470c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800470e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004710:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004714:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004716:	3901      	subs	r1, #1
 8004718:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800471c:	0912      	lsrs	r2, r2, #4
 800471e:	ea43 4142 	orr.w	r1, r3, r2, lsl #17
 8004722:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	3b01      	subs	r3, #1
 8004728:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 800472c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	3b01      	subs	r3, #1
 8004732:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 8004736:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004738:	6803      	ldr	r3, [r0, #0]
 800473a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473e:	6003      	str	r3, [r0, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004740:	68c3      	ldr	r3, [r0, #12]
 8004742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004746:	60c3      	str	r3, [r0, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fc f9a6 	bl	8000a98 <HAL_GetTick>
 800474c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	0198      	lsls	r0, r3, #6
 8004752:	d4be      	bmi.n	80046d2 <HAL_RCC_OscConfig+0x34e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7fc f9a0 	bl	8000a98 <HAL_GetTick>
 8004758:	1b00      	subs	r0, r0, r4
 800475a:	2802      	cmp	r0, #2
 800475c:	d9f7      	bls.n	800474e <HAL_RCC_OscConfig+0x3ca>
 800475e:	e658      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	0119      	lsls	r1, r3, #4
 8004764:	d406      	bmi.n	8004774 <HAL_RCC_OscConfig+0x3f0>
#if defined(RCC_PLLSAI2_SUPPORT)
           &&
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8004766:	682b      	ldr	r3, [r5, #0]
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
#if defined(RCC_PLLSAI2_SUPPORT)
           &&
 8004768:	009a      	lsls	r2, r3, #2
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800476a:	bf5e      	ittt	pl
 800476c:	68eb      	ldrpl	r3, [r5, #12]
 800476e:	f023 0303 	bicpl.w	r3, r3, #3
 8004772:	60eb      	strpl	r3, [r5, #12]
        }

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004774:	68eb      	ldr	r3, [r5, #12]
 8004776:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	60eb      	str	r3, [r5, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fc f98a 	bl	8000a98 <HAL_GetTick>
 8004784:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004786:	682b      	ldr	r3, [r5, #0]
 8004788:	019b      	lsls	r3, r3, #6
 800478a:	d5a2      	bpl.n	80046d2 <HAL_RCC_OscConfig+0x34e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fc f984 	bl	8000a98 <HAL_GetTick>
 8004790:	1b00      	subs	r0, r0, r4
 8004792:	2802      	cmp	r0, #2
 8004794:	d9f7      	bls.n	8004786 <HAL_RCC_OscConfig+0x402>
 8004796:	e63c      	b.n	8004412 <HAL_RCC_OscConfig+0x8e>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8004798:	b002      	add	sp, #8
 800479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800479e:	bf00      	nop
 80047a0:	40021000 	.word	0x40021000

080047a4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80047a4:	4a53      	ldr	r2, [pc, #332]	; (80048f4 <HAL_RCC_ClockConfig+0x150>)
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b2:	4605      	mov	r5, r0
 80047b4:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80047b6:	d30a      	bcc.n	80047ce <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b8:	6829      	ldr	r1, [r5, #0]
 80047ba:	0788      	lsls	r0, r1, #30
 80047bc:	d514      	bpl.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047be:	484e      	ldr	r0, [pc, #312]	; (80048f8 <HAL_RCC_ClockConfig+0x154>)
 80047c0:	6883      	ldr	r3, [r0, #8]
 80047c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c6:	68ab      	ldr	r3, [r5, #8]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	6083      	str	r3, [r0, #8]
 80047cc:	e00c      	b.n	80047e8 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	f023 0307 	bic.w	r3, r3, #7
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047d8:	6813      	ldr	r3, [r2, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	4299      	cmp	r1, r3
 80047e0:	d0ea      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80047e2:	2001      	movs	r0, #1
 80047e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e8:	07ca      	lsls	r2, r1, #31
 80047ea:	d406      	bmi.n	80047fa <HAL_RCC_ClockConfig+0x56>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80047ec:	4a41      	ldr	r2, [pc, #260]	; (80048f4 <HAL_RCC_ClockConfig+0x150>)
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	429e      	cmp	r6, r3
 80047f6:	d351      	bcc.n	800489c <HAL_RCC_ClockConfig+0xf8>
 80047f8:	e05a      	b.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fa:	686b      	ldr	r3, [r5, #4]
 80047fc:	4c3e      	ldr	r4, [pc, #248]	; (80048f8 <HAL_RCC_ClockConfig+0x154>)
 80047fe:	2b02      	cmp	r3, #2
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8004800:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	d102      	bne.n	800480a <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8004804:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004808:	e00a      	b.n	8004820 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800480a:	2b03      	cmp	r3, #3
 800480c:	d102      	bne.n	8004814 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800480e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004812:	e005      	b.n	8004820 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004814:	b913      	cbnz	r3, 800481c <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8004816:	f012 0f02 	tst.w	r2, #2
 800481a:	e001      	b.n	8004820 <HAL_RCC_ClockConfig+0x7c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800481c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004820:	d0df      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004822:	68a2      	ldr	r2, [r4, #8]
 8004824:	f022 0203 	bic.w	r2, r2, #3
 8004828:	4313      	orrs	r3, r2
 800482a:	60a3      	str	r3, [r4, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482c:	f7fc f934 	bl	8000a98 <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004830:	686b      	ldr	r3, [r5, #4]
 8004832:	2b02      	cmp	r3, #2
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004834:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004836:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	d10c      	bne.n	8004856 <HAL_RCC_ClockConfig+0xb2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800483c:	68a3      	ldr	r3, [r4, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b08      	cmp	r3, #8
 8004844:	d0d2      	beq.n	80047ec <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004846:	f7fc f927 	bl	8000a98 <HAL_GetTick>
 800484a:	1bc0      	subs	r0, r0, r7
 800484c:	4540      	cmp	r0, r8
 800484e:	d9f5      	bls.n	800483c <HAL_RCC_ClockConfig+0x98>
        {
          return HAL_TIMEOUT;
 8004850:	2003      	movs	r0, #3
 8004852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004856:	2b03      	cmp	r3, #3
 8004858:	d10a      	bne.n	8004870 <HAL_RCC_ClockConfig+0xcc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b0c      	cmp	r3, #12
 8004862:	d0c3      	beq.n	80047ec <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fc f918 	bl	8000a98 <HAL_GetTick>
 8004868:	1bc0      	subs	r0, r0, r7
 800486a:	4540      	cmp	r0, r8
 800486c:	d9f5      	bls.n	800485a <HAL_RCC_ClockConfig+0xb6>
 800486e:	e7ef      	b.n	8004850 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004870:	b973      	cbnz	r3, 8004890 <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8004872:	68a3      	ldr	r3, [r4, #8]
 8004874:	f013 0f0c 	tst.w	r3, #12
 8004878:	d0b8      	beq.n	80047ec <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487a:	f7fc f90d 	bl	8000a98 <HAL_GetTick>
 800487e:	1bc0      	subs	r0, r0, r7
 8004880:	4540      	cmp	r0, r8
 8004882:	d9f6      	bls.n	8004872 <HAL_RCC_ClockConfig+0xce>
 8004884:	e7e4      	b.n	8004850 <HAL_RCC_ClockConfig+0xac>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004886:	f7fc f907 	bl	8000a98 <HAL_GetTick>
 800488a:	1bc0      	subs	r0, r0, r7
 800488c:	4540      	cmp	r0, r8
 800488e:	d8df      	bhi.n	8004850 <HAL_RCC_ClockConfig+0xac>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8004890:	68a3      	ldr	r3, [r4, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b04      	cmp	r3, #4
 8004898:	d1f5      	bne.n	8004886 <HAL_RCC_ClockConfig+0xe2>
 800489a:	e7a7      	b.n	80047ec <HAL_RCC_ClockConfig+0x48>

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	f023 0307 	bic.w	r3, r3, #7
 80048a2:	4333      	orrs	r3, r6
 80048a4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	429e      	cmp	r6, r3
 80048ae:	d198      	bne.n	80047e2 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	6829      	ldr	r1, [r5, #0]
 80048b2:	4c11      	ldr	r4, [pc, #68]	; (80048f8 <HAL_RCC_ClockConfig+0x154>)
 80048b4:	f011 0f04 	tst.w	r1, #4
 80048b8:	d005      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ba:	68a3      	ldr	r3, [r4, #8]
 80048bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c0:	68eb      	ldr	r3, [r5, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60a3      	str	r3, [r4, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c6:	070b      	lsls	r3, r1, #28
 80048c8:	d506      	bpl.n	80048d8 <HAL_RCC_ClockConfig+0x134>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ca:	68a3      	ldr	r3, [r4, #8]
 80048cc:	692a      	ldr	r2, [r5, #16]
 80048ce:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80048d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80048d6:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048d8:	f7ff fce6 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 80048dc:	68a3      	ldr	r3, [r4, #8]
 80048de:	4a07      	ldr	r2, [pc, #28]	; (80048fc <HAL_RCC_ClockConfig+0x158>)
 80048e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80048e4:	5cd3      	ldrb	r3, [r2, r3]
 80048e6:	40d8      	lsrs	r0, r3
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_ClockConfig+0x15c>)
 80048ea:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 80048ec:	2000      	movs	r0, #0
}
 80048ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f2:	bf00      	nop
 80048f4:	40022000 	.word	0x40022000
 80048f8:	40021000 	.word	0x40021000
 80048fc:	08006699 	.word	0x08006699
 8004900:	1000632c 	.word	0x1000632c

08004904 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004904:	4b01      	ldr	r3, [pc, #4]	; (800490c <HAL_RCC_GetHCLKFreq+0x8>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	1000632c 	.word	0x1000632c

08004910 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800491a:	5cd3      	ldrb	r3, [r2, r3]
 800491c:	4a03      	ldr	r2, [pc, #12]	; (800492c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800491e:	6810      	ldr	r0, [r2, #0]
}
 8004920:	40d8      	lsrs	r0, r3
 8004922:	4770      	bx	lr
 8004924:	40021000 	.word	0x40021000
 8004928:	080066a9 	.word	0x080066a9
 800492c:	1000632c 	.word	0x1000632c

08004930 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004932:	4a05      	ldr	r2, [pc, #20]	; (8004948 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	4a03      	ldr	r2, [pc, #12]	; (800494c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800493e:	6810      	ldr	r0, [r2, #0]
}
 8004940:	40d8      	lsrs	r0, r3
 8004942:	4770      	bx	lr
 8004944:	40021000 	.word	0x40021000
 8004948:	080066a9 	.word	0x080066a9
 800494c:	1000632c 	.word	0x1000632c

08004950 <HAL_RCC_GetOscConfig>:
  /* Set all possible values for the Oscillator type parameter ---------------*/
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI48;
#else
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8004950:	231f      	movs	r3, #31
 8004952:	6003      	str	r3, [r0, #0]
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
#endif /* RCC_HSI48_SUPPORT */

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8004954:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <HAL_RCC_GetOscConfig+0xcc>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	0352      	lsls	r2, r2, #13
 800495a:	d502      	bpl.n	8004962 <HAL_RCC_GetOscConfig+0x12>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800495c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8004960:	e005      	b.n	800496e <HAL_RCC_GetOscConfig+0x1e>
  }
  else if((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8004968:	bf18      	it	ne
 800496a:	f44f 3280 	movne.w	r2, #65536	; 0x10000
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800496e:	6042      	str	r2, [r0, #4]
  }

   /* Get the MSI configuration -----------------------------------------------*/
  if((RCC->CR & RCC_CR_MSION) == RCC_CR_MSION)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	f012 0201 	ands.w	r2, r2, #1
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 8004976:	bf18      	it	ne
 8004978:	2201      	movne	r2, #1
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 800497a:	6182      	str	r2, [r0, #24]
  }

  RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004982:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->CR & RCC_CR_MSIRANGE) );
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800498a:	6202      	str	r2, [r0, #32]

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8004992:	bf18      	it	ne
 8004994:	f44f 7280 	movne.w	r2, #256	; 0x100
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8004998:	60c2      	str	r2, [r0, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos);
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	f3c2 6204 	ubfx	r2, r2, #24, #5
 80049a0:	6102      	str	r2, [r0, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80049a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80049a6:	0751      	lsls	r1, r2, #29
 80049a8:	d501      	bpl.n	80049ae <HAL_RCC_GetOscConfig+0x5e>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80049aa:	2205      	movs	r2, #5
 80049ac:	e006      	b.n	80049bc <HAL_RCC_GetOscConfig+0x6c>
  }
  else if((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80049ae:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_RCC_GetOscConfig+0xcc>)
 80049b0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80049b4:	f012 0201 	ands.w	r2, r2, #1
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80049b8:	bf18      	it	ne
 80049ba:	2201      	movne	r2, #1
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80049bc:	6082      	str	r2, [r0, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 80049be:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80049c2:	f012 0201 	ands.w	r2, r2, #1
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80049c6:	bf18      	it	ne
 80049c8:	2201      	movne	r2, #1
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80049ca:	6142      	str	r2, [r0, #20]
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
  }
#else
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 80049cc:	2200      	movs	r2, #0
 80049ce:	6242      	str	r2, [r0, #36]	; 0x24
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	01d2      	lsls	r2, r2, #7
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80049d4:	bf4c      	ite	mi
 80049d6:	2202      	movmi	r2, #2
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80049d8:	2201      	movpl	r2, #1
 80049da:	6282      	str	r2, [r0, #40]	; 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	f002 0203 	and.w	r2, r2, #3
 80049e2:	62c2      	str	r2, [r0, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U);
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80049ea:	3201      	adds	r2, #1
 80049ec:	6302      	str	r2, [r0, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80049f4:	6342      	str	r2, [r0, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	f3c2 5241 	ubfx	r2, r2, #21, #2
 80049fc:	3201      	adds	r2, #1
 80049fe:	0052      	lsls	r2, r2, #1
 8004a00:	63c2      	str	r2, [r0, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8004a08:	3201      	adds	r2, #1
 8004a0a:	0052      	lsls	r2, r2, #1
 8004a0c:	6402      	str	r2, [r0, #64]	; 0x40
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos);
#else
  if((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) != RESET)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	039b      	lsls	r3, r3, #14
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 8004a12:	bf4c      	ite	mi
 8004a14:	2311      	movmi	r3, #17
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
 8004a16:	2307      	movpl	r3, #7
 8004a18:	6383      	str	r3, [r0, #56]	; 0x38
 8004a1a:	4770      	bx	lr
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a20:	230f      	movs	r3, #15
 8004a22:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_GetClockConfig+0x34>)
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	f002 0203 	and.w	r2, r2, #3
 8004a2c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004a34:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004a3c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	08db      	lsrs	r3, r3, #3
 8004a42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a46:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <HAL_RCC_GetClockConfig+0x38>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	600b      	str	r3, [r1, #0]
 8004a52:	4770      	bx	lr
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40022000 	.word	0x40022000

08004a5c <HAL_RCC_EnableCSS>:
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004a5c:	4a02      	ldr	r2, [pc, #8]	; (8004a68 <HAL_RCC_EnableCSS+0xc>)
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4770      	bx	lr
 8004a68:	40021000 	.word	0x40021000

08004a6c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004a70:	b510      	push	{r4, lr}
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004a72:	4c05      	ldr	r4, [pc, #20]	; (8004a88 <HAL_RCC_NMI_IRQHandler+0x18>)
 8004a74:	69e3      	ldr	r3, [r4, #28]
 8004a76:	05db      	lsls	r3, r3, #23
 8004a78:	d504      	bpl.n	8004a84 <HAL_RCC_NMI_IRQHandler+0x14>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004a7a:	f7ff fff7 	bl	8004a6c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a82:	6223      	str	r3, [r4, #32]
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000

08004a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a8e:	4b46      	ldr	r3, [pc, #280]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x11c>)
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	f012 0f03 	tst.w	r2, #3
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a96:	4604      	mov	r4, r0
 8004a98:	460e      	mov	r6, r1
 8004a9a:	461d      	mov	r5, r3
 8004a9c:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a9e:	d00d      	beq.n	8004abc <RCCEx_PLLSAI1_Config+0x30>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	f002 0203 	and.w	r2, r2, #3
 8004aa6:	4282      	cmp	r2, r0
 8004aa8:	d11d      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0x5a>
       ||
 8004aaa:	b1e2      	cbz	r2, 8004ae6 <RCCEx_PLLSAI1_Config+0x5a>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004aac:	68db      	ldr	r3, [r3, #12]
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       ||
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d115      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0x5a>
 8004aba:	e01f      	b.n	8004afc <RCCEx_PLLSAI1_Config+0x70>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004abc:	2802      	cmp	r0, #2
 8004abe:	d007      	beq.n	8004ad0 <RCCEx_PLLSAI1_Config+0x44>
 8004ac0:	2803      	cmp	r0, #3
 8004ac2:	d009      	beq.n	8004ad8 <RCCEx_PLLSAI1_Config+0x4c>
 8004ac4:	2801      	cmp	r0, #1
 8004ac6:	d10e      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0x5a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	079f      	lsls	r7, r3, #30
 8004acc:	d56a      	bpl.n	8004ba4 <RCCEx_PLLSAI1_Config+0x118>
 8004ace:	e00c      	b.n	8004aea <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ad6:	e005      	b.n	8004ae4 <RCCEx_PLLSAI1_Config+0x58>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	0391      	lsls	r1, r2, #14
 8004adc:	d405      	bmi.n	8004aea <RCCEx_PLLSAI1_Config+0x5e>
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004ae4:	d101      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0x5e>
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    if(status == HAL_OK)
    {
      /* Set PLLSAI1 clock source and divider M */
       MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aea:	68ea      	ldr	r2, [r5, #12]
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004af2:	3b01      	subs	r3, #1
 8004af4:	4310      	orrs	r0, r2
 8004af6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8004afa:	60e8      	str	r0, [r5, #12]
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b02:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b04:	f7fb ffc8 	bl	8000a98 <HAL_GetTick>
 8004b08:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004b0a:	682b      	ldr	r3, [r5, #0]
 8004b0c:	4826      	ldr	r0, [pc, #152]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x11c>)
 8004b0e:	011a      	lsls	r2, r3, #4
 8004b10:	d506      	bpl.n	8004b20 <RCCEx_PLLSAI1_Config+0x94>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b12:	f7fb ffc1 	bl	8000a98 <HAL_GetTick>
 8004b16:	1bc0      	subs	r0, r0, r7
 8004b18:	2802      	cmp	r0, #2
 8004b1a:	d9f6      	bls.n	8004b0a <RCCEx_PLLSAI1_Config+0x7e>
      {
        status = HAL_TIMEOUT;
 8004b1c:	2003      	movs	r0, #3
 8004b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b20:	68a7      	ldr	r7, [r4, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b22:	b966      	cbnz	r6, 8004b3e <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b24:	6906      	ldr	r6, [r0, #16]
 8004b26:	f426 311f 	bic.w	r1, r6, #162816	; 0x27c00
 8004b2a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004b2e:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8004b32:	68e1      	ldr	r1, [r4, #12]
 8004b34:	0909      	lsrs	r1, r1, #4
 8004b36:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 8004b3a:	6101      	str	r1, [r0, #16]
 8004b3c:	e01c      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0xec>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b3e:	2e01      	cmp	r6, #1
 8004b40:	d10d      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0xd2>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b42:	6922      	ldr	r2, [r4, #16]
 8004b44:	6901      	ldr	r1, [r0, #16]
 8004b46:	0852      	lsrs	r2, r2, #1
 8004b48:	1e53      	subs	r3, r2, #1
 8004b4a:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 8004b4e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004b52:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004b56:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 8004b5a:	6102      	str	r2, [r0, #16]
 8004b5c:	e00c      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0xec>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b5e:	6902      	ldr	r2, [r0, #16]
 8004b60:	6966      	ldr	r6, [r4, #20]
 8004b62:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8004b66:	0876      	lsrs	r6, r6, #1
 8004b68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b6c:	3e01      	subs	r6, #1
 8004b6e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004b72:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 8004b76:	6103      	str	r3, [r0, #16]
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b7e:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fb ff8a 	bl	8000a98 <HAL_GetTick>
 8004b84:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004b86:	682b      	ldr	r3, [r5, #0]
 8004b88:	4a07      	ldr	r2, [pc, #28]	; (8004ba8 <RCCEx_PLLSAI1_Config+0x11c>)
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	d405      	bmi.n	8004b9a <RCCEx_PLLSAI1_Config+0x10e>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b8e:	f7fb ff83 	bl	8000a98 <HAL_GetTick>
 8004b92:	1b80      	subs	r0, r0, r6
 8004b94:	2802      	cmp	r0, #2
 8004b96:	d9f6      	bls.n	8004b86 <RCCEx_PLLSAI1_Config+0xfa>
 8004b98:	e7c0      	b.n	8004b1c <RCCEx_PLLSAI1_Config+0x90>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b9a:	6911      	ldr	r1, [r2, #16]
 8004b9c:	69a3      	ldr	r3, [r4, #24]
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	6113      	str	r3, [r2, #16]
 8004ba2:	2000      	movs	r0, #0
    }
  }

  return status;
#endif
}
 8004ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000

08004bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bb0:	6805      	ldr	r5, [r0, #0]
 8004bb2:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bb8:	d018      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x40>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bba:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8004bbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004bc0:	d008      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004bc2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004bc8:	b979      	cbnz	r1, 8004bea <HAL_RCCEx_PeriphCLKConfig+0x3e>
      /* SAI1 clock source config set later after clock selection check */
      break;

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bca:	3004      	adds	r0, #4
 8004bcc:	f7ff ff5e 	bl	8004a8c <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	b958      	cbnz	r0, 8004bec <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bd4:	49b3      	ldr	r1, [pc, #716]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004bd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004bda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004be6:	2500      	movs	r5, #0
 8004be8:	e000      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x40>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bea:	2501      	movs	r5, #1
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	04db      	lsls	r3, r3, #19
 8004bf0:	d523      	bpl.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004bf2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004bf4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004bf8:	d012      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bfa:	d805      	bhi.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004bfc:	b9e1      	cbnz	r1, 8004c38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      /* SAI2 clock source config set later after clock selection check */
      break;

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bfe:	1d20      	adds	r0, r4, #4
 8004c00:	f7ff ff44 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 8004c04:	4606      	mov	r6, r0
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c06:	e00c      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x76>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c08:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004c0e:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004c12:	d005      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c14:	e010      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c16:	4aa3      	ldr	r2, [pc, #652]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c18:	68d3      	ldr	r3, [r2, #12]
 8004c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1e:	60d3      	str	r3, [r2, #12]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c20:	462e      	mov	r6, r5
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 8004c22:	b966      	cbnz	r6, 8004c3e <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c24:	499f      	ldr	r1, [pc, #636]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c26:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c2e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c36:	e003      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    case RCC_SAI2CLKSOURCE_PIN:      /* External clock is used as source of SAI2 clock*/
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c38:	2501      	movs	r5, #1
 8004c3a:	462e      	mov	r6, r5
 8004c3c:	e000      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004c3e:	4635      	mov	r5, r6
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	039f      	lsls	r7, r3, #14
 8004c44:	d562      	bpl.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c46:	4f97      	ldr	r7, [pc, #604]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c4a:	00d8      	lsls	r0, r3, #3
 8004c4c:	d40b      	bmi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c54:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004c60:	f04f 0801 	mov.w	r8, #1
 8004c64:	e001      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xbe>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c66:	f04f 0800 	mov.w	r8, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c6a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004c6e:	f8d9 3000 	ldr.w	r3, [r9]
 8004c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c76:	f8c9 3000 	str.w	r3, [r9]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c7a:	f7fb ff0d 	bl	8000a98 <HAL_GetTick>
 8004c7e:	4682      	mov	sl, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c80:	f8d9 3000 	ldr.w	r3, [r9]
 8004c84:	05d9      	lsls	r1, r3, #23
 8004c86:	d406      	bmi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c88:	f7fb ff06 	bl	8000a98 <HAL_GetTick>
 8004c8c:	ebca 0000 	rsb	r0, sl, r0
 8004c90:	2802      	cmp	r0, #2
 8004c92:	d9f5      	bls.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c94:	e02f      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 8004c96:	bb8e      	cbnz	r6, 8004cfc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c9c:	4a81      	ldr	r2, [pc, #516]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c9e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004ca2:	d015      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004ca4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004ca8:	428b      	cmp	r3, r1
 8004caa:	d011      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cb0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004cb4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004cb8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cbc:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);

      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004cc8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cd0:	07da      	lsls	r2, r3, #31
 8004cd2:	f140 812c 	bpl.w	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7fb fedf 	bl	8000a98 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f241 3a88 	movw	sl, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cde:	4681      	mov	r9, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8004ce0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ce4:	079b      	lsls	r3, r3, #30
 8004ce6:	f100 8122 	bmi.w	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x382>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7fb fed5 	bl	8000a98 <HAL_GetTick>
 8004cee:	ebc9 0000 	rsb	r0, r9, r0
 8004cf2:	4550      	cmp	r0, sl
 8004cf4:	d9f4      	bls.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 8004cf6:	2503      	movs	r5, #3
 8004cf8:	462e      	mov	r6, r5
 8004cfa:	e000      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004cfc:	4635      	mov	r5, r6
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cfe:	f1b8 0f00 	cmp.w	r8, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	65bb      	str	r3, [r7, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	07d8      	lsls	r0, r3, #31
 8004d10:	d508      	bpl.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d12:	4864      	ldr	r0, [pc, #400]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d14:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004d18:	f022 0103 	bic.w	r1, r2, #3
 8004d1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d24:	0799      	lsls	r1, r3, #30
 8004d26:	d508      	bpl.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d28:	485e      	ldr	r0, [pc, #376]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d2a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004d2e:	f022 010c 	bic.w	r1, r2, #12
 8004d32:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004d34:	430a      	orrs	r2, r1
 8004d36:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d3a:	075a      	lsls	r2, r3, #29
 8004d3c:	d508      	bpl.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d3e:	4859      	ldr	r0, [pc, #356]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d40:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004d44:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8004d48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d50:	071f      	lsls	r7, r3, #28
 8004d52:	d508      	bpl.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d54:	4853      	ldr	r0, [pc, #332]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d56:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004d5a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8004d5e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004d60:	430a      	orrs	r2, r1
 8004d62:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d66:	06d8      	lsls	r0, r3, #27
 8004d68:	d508      	bpl.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d6a:	484e      	ldr	r0, [pc, #312]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d6c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004d70:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004d74:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004d76:	430a      	orrs	r2, r1
 8004d78:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d7c:	0699      	lsls	r1, r3, #26
 8004d7e:	d508      	bpl.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d80:	4848      	ldr	r0, [pc, #288]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d82:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004d86:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8004d8a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d92:	059a      	lsls	r2, r3, #22
 8004d94:	d508      	bpl.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d96:	4843      	ldr	r0, [pc, #268]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d98:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004d9c:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8004da0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004da2:	430a      	orrs	r2, r1
 8004da4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004da8:	055f      	lsls	r7, r3, #21
 8004daa:	d508      	bpl.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dac:	483d      	ldr	r0, [pc, #244]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004dae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004db2:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8004db6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004db8:	430a      	orrs	r2, r1
 8004dba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dbe:	0658      	lsls	r0, r3, #25
 8004dc0:	d508      	bpl.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dc2:	4838      	ldr	r0, [pc, #224]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004dc4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004dc8:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004dcc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dd4:	0619      	lsls	r1, r3, #24
 8004dd6:	d508      	bpl.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dd8:	4832      	ldr	r0, [pc, #200]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004dda:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004dde:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8004de2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004de4:	430a      	orrs	r2, r1
 8004de6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dea:	05da      	lsls	r2, r3, #23
 8004dec:	d508      	bpl.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dee:	482d      	ldr	r0, [pc, #180]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004df0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004df4:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8004df8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e00:	049b      	lsls	r3, r3, #18
 8004e02:	d51b      	bpl.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e04:	4a27      	ldr	r2, [pc, #156]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004e06:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004e08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e0c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004e10:	430b      	orrs	r3, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e12:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e1a:	d104      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1c:	68d3      	ldr	r3, [r2, #12]
 8004e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e22:	60d3      	str	r3, [r2, #12]
 8004e24:	e00a      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e26:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x290>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	1d20      	adds	r0, r4, #4
 8004e30:	f7ff fe2c 	bl	8004a8c <RCCEx_PLLSAI1_Config>

        if(ret != HAL_OK)
 8004e34:	4606      	mov	r6, r0
 8004e36:	2800      	cmp	r0, #0
 8004e38:	bf18      	it	ne
 8004e3a:	4605      	movne	r5, r0
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	031f      	lsls	r7, r3, #12
 8004e40:	d51b      	bpl.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e42:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004e44:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004e46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e4a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004e4e:	430b      	orrs	r3, r1

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004e50:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004e58:	d104      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5a:	68d3      	ldr	r3, [r2, #12]
 8004e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e60:	60d3      	str	r3, [r2, #12]
 8004e62:	e00a      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e64:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004e68:	d107      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	1d20      	adds	r0, r4, #4
 8004e6e:	f7ff fe0d 	bl	8004a8c <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8004e72:	4606      	mov	r6, r0
 8004e74:	2800      	cmp	r0, #0
 8004e76:	bf18      	it	ne
 8004e78:	4605      	movne	r5, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	0358      	lsls	r0, r3, #13
 8004e7e:	d520      	bpl.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e80:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004e82:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004e84:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e88:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004e8c:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e8e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e96:	d109      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x300>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e98:	68d3      	ldr	r3, [r2, #12]
 8004e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9e:	60d3      	str	r3, [r2, #12]
 8004ea0:	e00f      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40007000 	.word	0x40007000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eac:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004eb0:	d107      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	1d20      	adds	r0, r4, #4
 8004eb6:	f7ff fde9 	bl	8004a8c <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8004eba:	4606      	mov	r6, r0
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	bf18      	it	ne
 8004ec0:	4605      	movne	r5, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	0459      	lsls	r1, r3, #17
 8004ec6:	d519      	bpl.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ec8:	4920      	ldr	r1, [pc, #128]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004eca:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004ecc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ed0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004ed4:	4313      	orrs	r3, r2

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ed6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	1d20      	adds	r0, r4, #4
 8004ee4:	f7ff fdd2 	bl	8004a8c <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	bf18      	it	ne
 8004eec:	4605      	movne	r5, r0
 8004eee:	e005      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x350>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ef0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004ef4:	d102      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x350>
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
#if defined(RCC_PLLSAI2_SUPPORT)
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
#endif

      if(ret != HAL_OK)
 8004ef6:	2e00      	cmp	r6, #0
 8004ef8:	bf18      	it	ne
 8004efa:	4635      	movne	r5, r6
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004efc:	6821      	ldr	r1, [r4, #0]
 8004efe:	040a      	lsls	r2, r1, #16
 8004f00:	d508      	bpl.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f02:	4812      	ldr	r0, [pc, #72]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004f04:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004f08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f0c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f14:	03cb      	lsls	r3, r1, #15
 8004f16:	d514      	bpl.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f18:	490c      	ldr	r1, [pc, #48]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004f1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004f1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f22:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8004f2c:	e009      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x396>
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f36:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f40:	e6dd      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x152>
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 8004f42:	4628      	mov	r0, r5
 8004f44:	b002      	add	sp, #8
 8004f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000

08004f50 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8004f50:	4b44      	ldr	r3, [pc, #272]	; (8005064 <HAL_RCCEx_GetPeriphCLKConfig+0x114>)
 8004f52:	6003      	str	r3, [r0, #0]

#endif /* STM32L431xx */

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos);
 8004f54:	4b44      	ldr	r3, [pc, #272]	; (8005068 <HAL_RCCEx_GetPeriphCLKConfig+0x118>)
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	f002 0203 	and.w	r2, r2, #3
 8004f5c:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLSAI1.PLLSAI1M = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004f64:	3201      	adds	r2, #1
 8004f66:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLLSAI1.PLLSAI1N = (uint32_t)((RCC->PLLSAI1CFGR & RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos);
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004f6e:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = (uint32_t)(((RCC->PLLSAI1CFGR & RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	0b52      	lsrs	r2, r2, #13
 8004f74:	f002 0210 	and.w	r2, r2, #16
 8004f78:	3207      	adds	r2, #7
 8004f7a:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = (uint32_t)(((RCC->PLLSAI1CFGR & RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos)+1U) * 2U;
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	f3c2 5241 	ubfx	r2, r2, #21, #2
 8004f82:	3201      	adds	r2, #1
 8004f84:	0052      	lsls	r2, r2, #1
 8004f86:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = (uint32_t)(((RCC->PLLSAI1CFGR & RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos)+1U) * 2U;
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8004f8e:	3201      	adds	r2, #1
 8004f90:	0052      	lsls	r2, r2, #1
 8004f92:	6182      	str	r2, [r0, #24]
   PeriphClkInit->PLLSAI2.PLLSAI2R = (uint32_t)(((RCC->PLLSAI2CFGR & RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos)+1U) * 2U;

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8004f94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f98:	f002 0203 	and.w	r2, r2, #3
 8004f9c:	6382      	str	r2, [r0, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8004f9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fa2:	f002 020c 	and.w	r2, r2, #12
 8004fa6:	63c2      	str	r2, [r0, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8004fa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fac:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8004fb0:	6402      	str	r2, [r0, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8004fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fb6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004fba:	6442      	str	r2, [r0, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8004fbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fc0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004fc4:	6482      	str	r2, [r0, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8004fc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fca:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004fce:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8004fd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fd4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8004fd8:	6502      	str	r2, [r0, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8004fda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fde:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004fe2:	6542      	str	r2, [r0, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8004fe4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fe8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8004fec:	6582      	str	r2, [r0, #88]	; 0x58
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004fee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ff2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004ff6:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004ff8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ffc:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005000:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8005002:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005006:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800500a:	6642      	str	r2, [r0, #100]	; 0x64

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 800500c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005010:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8005014:	6682      	str	r2, [r0, #104]	; 0x68
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8005016:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800501a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800501e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8005022:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005026:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 800502a:	66c2      	str	r2, [r0, #108]	; 0x6c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 800502c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005030:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8005034:	6702      	str	r2, [r0, #112]	; 0x70
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8005036:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800503a:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 800503e:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8005040:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005044:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 8005048:	6782      	str	r2, [r0, #120]	; 0x78

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 800504a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800504e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005052:	67c2      	str	r2, [r0, #124]	; 0x7c
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800505c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	000fffff 	.word	0x000fffff
 8005068:	40021000 	.word	0x40021000

0800506c <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t pllvco = 0U, plln = 0U, pllp = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800506c:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
  @endif
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock (only for devices with USB)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005070:	b410      	push	{r4}
 8005072:	4bc3      	ldr	r3, [pc, #780]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
  uint32_t pllvco = 0U, plln = 0U, pllp = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005074:	d116      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005076:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800507a:	f402 7240 	and.w	r2, r2, #768	; 0x300

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800507e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005082:	f000 81f8 	beq.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
    {
      frequency = LSE_VALUE;
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005086:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800508a:	d102      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800508c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005090:	e1e2      	b.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
    {
      frequency = LSI_VALUE;
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005092:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005096:	f040 81fc 	bne.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 800509a:	681b      	ldr	r3, [r3, #0]
    {
      frequency = HSE_VALUE / 32;
 800509c:	48b9      	ldr	r0, [pc, #740]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 800509e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80050a2:	e1bf      	b.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)        /* MSI ? */
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	f002 0203 	and.w	r2, r2, #3
 80050aa:	2a01      	cmp	r2, #1
 80050ac:	d111      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	f012 0202 	ands.w	r2, r2, #2
 80050b4:	d024      	beq.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	49b3      	ldr	r1, [pc, #716]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 80050ba:	0712      	lsls	r2, r2, #28
 80050bc:	bf4b      	itete	mi
 80050be:	681a      	ldrmi	r2, [r3, #0]
 80050c0:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
 80050c4:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
 80050c8:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
 80050cc:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 80050d0:	e019      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      else
      {
        pllvco = 0U;
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	f002 0203 	and.w	r2, r2, #3
 80050d8:	2a02      	cmp	r2, #2
 80050da:	d104      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050dc:	681a      	ldr	r2, [r3, #0]
      {
        pllvco = HSI_VALUE;
 80050de:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80050e2:	4aaa      	ldr	r2, [pc, #680]	; (800538c <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 80050e4:	e008      	b.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
      else
      {
        pllvco = 0U;
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	f002 0203 	and.w	r2, r2, #3
 80050ec:	2a03      	cmp	r2, #3
 80050ee:	d109      	bne.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050f0:	681a      	ldr	r2, [r3, #0]
      {
        pllvco = HSE_VALUE;
 80050f2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80050f6:	4aa6      	ldr	r2, [pc, #664]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 80050f8:	bf0c      	ite	eq
 80050fa:	2400      	moveq	r4, #0
 80050fc:	4614      	movne	r4, r2
 80050fe:	e002      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        pllvco = HSI_VALUE;
      }
      else
      {
        pllvco = 0U;
 8005100:	4614      	mov	r4, r2
 8005102:	e000      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005104:	2400      	movs	r4, #0
    {
      pllvco = 0U;
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	499d      	ldr	r1, [pc, #628]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 800510a:	f3c2 1202 	ubfx	r2, r2, #4, #3

    switch(PeriphClk)
 800510e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    {
      pllvco = 0U;
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005112:	f102 0201 	add.w	r2, r2, #1
 8005116:	fbb4 f2f2 	udiv	r2, r4, r2

    switch(PeriphClk)
 800511a:	f000 8173 	beq.w	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800511e:	d822      	bhi.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005120:	2810      	cmp	r0, #16
 8005122:	f000 80f7 	beq.w	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8005126:	d80e      	bhi.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005128:	2802      	cmp	r0, #2
 800512a:	f000 80cb 	beq.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800512e:	d803      	bhi.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005130:	2801      	cmp	r0, #1
 8005132:	f000 80b4 	beq.w	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 8005136:	e1ac      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8005138:	2804      	cmp	r0, #4
 800513a:	f000 80d3 	beq.w	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800513e:	2808      	cmp	r0, #8
 8005140:	f000 80dc 	beq.w	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 8005144:	e1a5      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8005146:	2840      	cmp	r0, #64	; 0x40
 8005148:	f000 8134 	beq.w	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800514c:	d803      	bhi.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800514e:	2820      	cmp	r0, #32
 8005150:	f000 80ee 	beq.w	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005154:	e19d      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8005156:	2880      	cmp	r0, #128	; 0x80
 8005158:	f000 8139 	beq.w	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 800515c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005160:	f000 8142 	beq.w	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005164:	e195      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8005166:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800516a:	f000 80f0 	beq.w	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 800516e:	d80e      	bhi.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005170:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005174:	d027      	beq.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005176:	d804      	bhi.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8005178:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800517c:	f000 8161 	beq.w	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005180:	e187      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8005182:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005186:	d013      	beq.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005188:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800518c:	e00e      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 800518e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8005192:	f000 8109 	beq.w	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8005196:	d804      	bhi.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8005198:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800519c:	f000 816e 	beq.w	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80051a0:	e177      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 80051a2:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80051a6:	d039      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80051a8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80051ac:	d036      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80051ae:	e170      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        }
        /* Else, PLL clock output to check below */
      }
      else /* RCC_PERIPHCLK_SAI2 */
      {
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80051b0:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
 80051b4:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000

        if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80051b8:	f1b0 7f40 	cmp.w	r0, #50331648	; 0x3000000
 80051bc:	f000 8166 	beq.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
#endif /* SAI2 */

      if(frequency == 0U)
      {
#if defined(SAI2)
        if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80051c0:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80051c4:	e009      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:

      if(PeriphClk == RCC_PERIPHCLK_SAI1)
      {
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80051c6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80051ca:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000

        if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80051ce:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 80051d2:	f000 815b 	beq.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
#endif /* SAI2 */

      if(frequency == 0U)
      {
#if defined(SAI2)
        if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80051d6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80051da:	d10a      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
        {
          if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != RESET)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	4968      	ldr	r1, [pc, #416]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 80051e0:	f413 3080 	ands.w	r0, r3, #65536	; 0x10000
 80051e4:	f000 8156 	beq.w	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          {
            /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80051e8:	68c8      	ldr	r0, [r1, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
            if(pllp == 0U)
            {
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != RESET)
 80051ea:	68cb      	ldr	r3, [r1, #12]
        if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
        {
          if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != RESET)
          {
            /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80051ec:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80051f0:	e00b      	b.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
              }
            }
            frequency = (pllvco * plln) / pllp;
          }
        }
        else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80051f2:	2800      	cmp	r0, #0
 80051f4:	f040 814d 	bne.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        {
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != RESET)
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	4961      	ldr	r1, [pc, #388]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 80051fc:	03dc      	lsls	r4, r3, #15
 80051fe:	f140 8149 	bpl.w	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          {
            /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005202:	6908      	ldr	r0, [r1, #16]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
            pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
            if(pllp == 0U)
            {
              if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != RESET)
 8005204:	690b      	ldr	r3, [r1, #16]
        else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
        {
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != RESET)
          {
            /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005206:	f3c0 2006 	ubfx	r0, r0, #8, #7
              {
                pllp = 17U;
              }
              else
              {
                pllp = 7U;
 800520a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800520e:	bf14      	ite	ne
 8005210:	2311      	movne	r3, #17
 8005212:	2307      	moveq	r3, #7
              }
            }
            frequency = (pllvco * plln) / pllp;
 8005214:	4350      	muls	r0, r2
 8005216:	fbb0 f0f3 	udiv	r0, r0, r3
 800521a:	e13b      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>

    case RCC_PERIPHCLK_SDMMC1:

#endif /* SDMMC1 */

      srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	4957      	ldr	r1, [pc, #348]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8005222:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000

      if(srcclk == RCC_CCIPR_CLK48SEL)   /* MSI ? */
 8005226:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800522a:	d112      	bne.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      {
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800522c:	6808      	ldr	r0, [r1, #0]
 800522e:	f010 0002 	ands.w	r0, r0, #2
 8005232:	f000 812f 	beq.w	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        {
          /*MSI frequency range in HZ*/
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005236:	680b      	ldr	r3, [r1, #0]
 8005238:	4a53      	ldr	r2, [pc, #332]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 800523a:	071b      	lsls	r3, r3, #28
 800523c:	bf4b      	itete	mi
 800523e:	680b      	ldrmi	r3, [r1, #0]
 8005240:	f8d1 3094 	ldrpl.w	r3, [r1, #148]	; 0x94
 8005244:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 8005248:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800524c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005250:	e120      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        else
        {
          frequency = 0U;
        }
      }
      else if(srcclk == RCC_CCIPR_CLK48SEL_1)  /* PLL ? */
 8005252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005256:	d10c      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
      {
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005258:	680b      	ldr	r3, [r1, #0]
 800525a:	f013 7000 	ands.w	r0, r3, #33554432	; 0x2000000
 800525e:	f000 8119 	beq.w	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 8005262:	68cb      	ldr	r3, [r1, #12]
 8005264:	f413 1080 	ands.w	r0, r3, #1048576	; 0x100000
 8005268:	f000 8114 	beq.w	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        {
          /* f(PLL48M1CLK) = f(VCO input) * PLLN / PLLQ */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800526c:	68c8      	ldr	r0, [r1, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800526e:	68cb      	ldr	r3, [r1, #12]
 8005270:	e00f      	b.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
        else
        {
          frequency = 0U;
        }
      }
      else if(srcclk == RCC_CCIPR_CLK48SEL_0)  /* PLLSAI1 ? */
 8005272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005276:	f040 810c 	bne.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
      {
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800527a:	680b      	ldr	r3, [r1, #0]
 800527c:	f013 6000 	ands.w	r0, r3, #134217728	; 0x8000000
 8005280:	f000 8108 	beq.w	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 8005284:	690b      	ldr	r3, [r1, #16]
 8005286:	f413 1080 	ands.w	r0, r3, #1048576	; 0x100000
 800528a:	f000 8103 	beq.w	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        {
          /* f(PLL48M2CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1Q */
          plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800528e:	6908      	ldr	r0, [r1, #16]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8005290:	690b      	ldr	r3, [r1, #16]
 8005292:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005296:	4350      	muls	r0, r2
 8005298:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800529c:	e06d      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
#endif /* RCC_HSI48_SUPPORT */
      break;

    case RCC_PERIPHCLK_USART1:
      /* Get the current USART1 source */
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800529e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80052a2:	f012 0203 	ands.w	r2, r2, #3
 80052a6:	d103      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
      break;
    }
  }

  return(frequency);
}
 80052a8:	f85d 4b04 	ldr.w	r4, [sp], #4
      /* Get the current USART1 source */
      srcclk = __HAL_RCC_GET_USART1_SOURCE();

      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
      {
        frequency = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7ff bb40 	b.w	8004930 <HAL_RCC_GetPCLK2Freq>
      }
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80052b0:	2a01      	cmp	r2, #1
 80052b2:	d103      	bne.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      break;
    }
  }

  return(frequency);
}
 80052b4:	f85d 4b04 	ldr.w	r4, [sp], #4
      {
        frequency = HAL_RCC_GetPCLK2Freq();
      }
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80052b8:	f7fe bff6 	b.w	80042a8 <HAL_RCC_GetSysClockFreq>
      }
      else if((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80052bc:	2a02      	cmp	r2, #2
 80052be:	f040 80da 	bne.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80052c2:	e0d3      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x400>
      }
      break;

    case RCC_PERIPHCLK_USART2:
      /* Get the current USART2 source */
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80052c4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80052c8:	f013 030c 	ands.w	r3, r3, #12
 80052cc:	d103      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      break;
    }
  }

  return(frequency);
}
 80052ce:	f85d 4b04 	ldr.w	r4, [sp], #4
      /* Get the current USART2 source */
      srcclk = __HAL_RCC_GET_USART2_SOURCE();

      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80052d2:	f7ff bb1d 	b.w	8004910 <HAL_RCC_GetPCLK1Freq>
      }
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d0ec      	beq.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80052da:	2b08      	cmp	r3, #8
 80052dc:	f000 809e 	beq.w	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
      {
        frequency = HSI_VALUE;
      }
      else if((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80052e0:	2b0c      	cmp	r3, #12
 80052e2:	e0a4      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>

#if defined(USART3)

    case RCC_PERIPHCLK_USART3:
      /* Get the current USART3 source */
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80052e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80052e8:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 80052ec:	d0ef      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80052ee:	2a10      	cmp	r2, #16
 80052f0:	d0e0      	beq.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80052f2:	2a20      	cmp	r2, #32
 80052f4:	f000 80ba 	beq.w	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x400>
      {
        frequency = HSI_VALUE;
      }
      else if((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80052f8:	2a30      	cmp	r2, #48	; 0x30
 80052fa:	e0bb      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x408>

#if defined(UART4)

    case RCC_PERIPHCLK_UART4:
      /* Get the current UART4 source */
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80052fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005300:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
 8005304:	d0e3      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005306:	2a40      	cmp	r2, #64	; 0x40
 8005308:	d0d4      	beq.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800530a:	2a80      	cmp	r2, #128	; 0x80
 800530c:	f000 80ae 	beq.w	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x400>
      {
        frequency = HSI_VALUE;
      }
      else if((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8005310:	2ac0      	cmp	r2, #192	; 0xc0
 8005312:	e0af      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x408>

#if defined(UART5)

    case RCC_PERIPHCLK_UART5:
      /* Get the current UART5 source */
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005314:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005318:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800531c:	d0d7      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	d0c7      	beq.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005328:	d078      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
      {
        frequency = HSI_VALUE;
      }
      else if((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800532a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800532e:	e07e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>

#endif /* UART5 */

    case RCC_PERIPHCLK_LPUART1:
      /* Get the current LPUART1 source */
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005330:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005334:	f412 6240 	ands.w	r2, r2, #3072	; 0xc00
 8005338:	d0c9      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800533a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800533e:	d0b9      	beq.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005340:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005344:	f000 8092 	beq.w	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x400>
      {
        frequency = HSI_VALUE;
      }
      else if((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8005348:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800534c:	e092      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
      }
      break;

    case RCC_PERIPHCLK_ADC:

      srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800534e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000

      if(srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005356:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800535a:	d0ab      	beq.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if(srcclk == RCC_ADCCLKSOURCE_PLLSAI1)
 800535c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005360:	d118      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
      {
        if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != RESET)
 8005362:	690b      	ldr	r3, [r1, #16]
 8005364:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 8005368:	f000 8094 	beq.w	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        {
          /* f(PLLADC1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1R */
          plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800536c:	6908      	ldr	r0, [r1, #16]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 800536e:	690b      	ldr	r3, [r1, #16]
 8005370:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005374:	4350      	muls	r0, r2
 8005376:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800537a:	3301      	adds	r3, #1
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	e74a      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005380:	40021000 	.word	0x40021000
 8005384:	0003d090 	.word	0x0003d090
 8005388:	080066b4 	.word	0x080066b4
 800538c:	00f42400 	.word	0x00f42400
 8005390:	007a1200 	.word	0x007a1200
        }
      }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)
      else if(srcclk == RCC_ADCCLKSOURCE_PLLSAI2)
 8005394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005398:	d17b      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
      {
        if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != RESET)
 800539a:	694b      	ldr	r3, [r1, #20]
 800539c:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 80053a0:	d078      	beq.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        {
          /* f(PLLADC2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2R */
          plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80053a2:	6948      	ldr	r0, [r1, #20]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 80053a4:	694b      	ldr	r3, [r1, #20]
 80053a6:	e7e3      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x304>

#if defined(DFSDM1_Filter0)

    case RCC_PERIPHCLK_DFSDM1:
      /* Get the current DFSDM1 source */
      srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80053a8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f6bf af7b 	bge.w	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 80053b2:	e77f      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>

#endif /* DFSDM1_Filter0 */

    case RCC_PERIPHCLK_I2C1:
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80053b4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80053b8:	f413 5340 	ands.w	r3, r3, #12288	; 0x3000
 80053bc:	d087      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c2:	f43f af77 	beq.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80053c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ca:	d162      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 80053cc:	e026      	b.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>

#if defined(I2C2)

    case RCC_PERIPHCLK_I2C2:
      /* Get the current I2C2 source */
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80053ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80053d2:	f412 4240 	ands.w	r2, r2, #49152	; 0xc000
 80053d6:	f43f af7a 	beq.w	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80053da:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80053de:	f43f af69 	beq.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80053e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80053e6:	e00b      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x394>

#endif /* I2C2 */

    case RCC_PERIPHCLK_I2C3:
      /* Get the current I2C3 source */
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80053e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80053ec:	f412 3240 	ands.w	r2, r2, #196608	; 0x30000
 80053f0:	f43f af6d 	beq.w	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80053f4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80053f8:	f43f af5c 	beq.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80053fc:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8005400:	d147      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8005402:	e033      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x400>

#endif /* I2C4 */

    case RCC_PERIPHCLK_LPTIM1:
      /* Get the current LPTIM1 source */
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005404:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8005408:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 800540c:	f43f af5f 	beq.w	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if((srcclk == RCC_LPTIM1CLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005410:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005414:	d01e      	beq.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
      {
        frequency = LSI_VALUE;
      }
      else if((srcclk == RCC_LPTIM1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005416:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800541a:	d106      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800541c:	680b      	ldr	r3, [r1, #0]
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      else if((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
      {
        frequency = HSI_VALUE;
 800541e:	481f      	ldr	r0, [pc, #124]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x430>)
 8005420:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005424:	bf08      	it	eq
 8005426:	2000      	moveq	r0, #0
 8005428:	e034      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
      }
      else if((srcclk == RCC_LPTIM1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
      {
        frequency = HSI_VALUE;
      }
      else if ((srcclk == RCC_LPTIM1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800542a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800542e:	d130      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8005430:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
      {
        frequency = HSI_VALUE;
      }
      else if((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
      {
        frequency = LSE_VALUE;
 8005434:	f013 0f02 	tst.w	r3, #2
 8005438:	bf0c      	ite	eq
 800543a:	2000      	moveq	r0, #0
 800543c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8005440:	e028      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
      }
      break;

    case RCC_PERIPHCLK_LPTIM2:
      /* Get the current LPTIM2 source */
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005442:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

      if(srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005446:	f412 1240 	ands.w	r2, r2, #3145728	; 0x300000
 800544a:	f43f af40 	beq.w	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if((srcclk == RCC_LPTIM2CLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800544e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005452:	d108      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8005454:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if((srcclk == RCC_LPTIM1CLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
      {
        frequency = LSI_VALUE;
 8005458:	f013 0f02 	tst.w	r3, #2
 800545c:	bf0c      	ite	eq
 800545e:	2000      	moveq	r0, #0
 8005460:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8005464:	e016      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
      }
      else if((srcclk == RCC_LPTIM2CLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
      {
        frequency = LSI_VALUE;
      }
      else if((srcclk == RCC_LPTIM2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005466:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800546a:	d101      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	e7d6      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
      {
        frequency = HSI_VALUE;
      }
      else if ((srcclk == RCC_LPTIM2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8005470:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8005474:	d10d      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	e7db      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>

#if defined(SWPMI1)

    case RCC_PERIPHCLK_SWPMI1:
      /* Get the current SWPMI1 source */
      srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800547c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      if(srcclk == RCC_SWPMI1CLKSOURCE_PCLK1)
 8005480:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8005484:	f43f af23 	beq.w	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      else if((srcclk == RCC_SWPMI1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005488:	b11b      	cbz	r3, 8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 800548a:	e7c7      	b.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 800548c:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8005490:	e000      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
      frequency = HSE_VALUE / 32;
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005492:	2000      	movs	r0, #0
      break;
    }
  }

  return(frequency);
}
 8005494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	00f42400 	.word	0x00f42400

080054a0 <HAL_RCCEx_EnablePLLSAI1>:
  * @param  PLLSAI1Init  pointer to an RCC_PLLSAI1InitTypeDef structure that
  *         contains the configuration information for the PLLSAI1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI1(RCC_PLLSAI1InitTypeDef  *PLLSAI1Init)
{
 80054a0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLLSAI1Q_VALUE(PLLSAI1Init->PLLSAI1Q));
  assert_param(IS_RCC_PLLSAI1R_VALUE(PLLSAI1Init->PLLSAI1R));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1Init->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054a2:	4c1d      	ldr	r4, [pc, #116]	; (8005518 <HAL_RCCEx_EnablePLLSAI1+0x78>)
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054aa:	6023      	str	r3, [r4, #0]
  * @param  PLLSAI1Init  pointer to an RCC_PLLSAI1InitTypeDef structure that
  *         contains the configuration information for the PLLSAI1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI1(RCC_PLLSAI1InitTypeDef  *PLLSAI1Init)
{
 80054ac:	4605      	mov	r5, r0

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054ae:	f7fb faf3 	bl	8000a98 <HAL_GetTick>
 80054b2:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	4818      	ldr	r0, [pc, #96]	; (8005518 <HAL_RCCEx_EnablePLLSAI1+0x78>)
 80054b8:	011a      	lsls	r2, r3, #4
 80054ba:	d506      	bpl.n	80054ca <HAL_RCCEx_EnablePLLSAI1+0x2a>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054bc:	f7fb faec 	bl	8000a98 <HAL_GetTick>
 80054c0:	1b80      	subs	r0, r0, r6
 80054c2:	2802      	cmp	r0, #2
 80054c4:	d9f6      	bls.n	80054b4 <HAL_RCCEx_EnablePLLSAI1+0x14>
    {
      status = HAL_TIMEOUT;
 80054c6:	2003      	movs	r0, #3
 80054c8:	bd70      	pop	{r4, r5, r6, pc}

  if(status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    /* Configure the PLLSAI1 Division factors P, Q and R */
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
 80054ca:	68ea      	ldr	r2, [r5, #12]
 80054cc:	68ab      	ldr	r3, [r5, #8]
 80054ce:	0912      	lsrs	r2, r2, #4
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	ea43 4142 	orr.w	r1, r3, r2, lsl #17
 80054d6:	692b      	ldr	r3, [r5, #16]
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	3b01      	subs	r3, #1
 80054dc:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 80054e0:	696b      	ldr	r3, [r5, #20]
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	3b01      	subs	r3, #1
 80054e6:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 80054ea:	6103      	str	r3, [r0, #16]
    /* Configure the PLLSAI1 Clock output(s) */
    __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1Init->PLLSAI1ClockOut);
 80054ec:	6902      	ldr	r2, [r0, #16]
 80054ee:	69ab      	ldr	r3, [r5, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	6103      	str	r3, [r0, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054f4:	6803      	ldr	r3, [r0, #0]
 80054f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054fa:	6003      	str	r3, [r0, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054fc:	f7fb facc 	bl	8000a98 <HAL_GetTick>
 8005500:	4605      	mov	r5, r0

    /* Wait till PLLSAI1 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	d405      	bmi.n	8005514 <HAL_RCCEx_EnablePLLSAI1+0x74>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005508:	f7fb fac6 	bl	8000a98 <HAL_GetTick>
 800550c:	1b40      	subs	r0, r0, r5
 800550e:	2802      	cmp	r0, #2
 8005510:	d9f7      	bls.n	8005502 <HAL_RCCEx_EnablePLLSAI1+0x62>
 8005512:	e7d8      	b.n	80054c6 <HAL_RCCEx_EnablePLLSAI1+0x26>
 8005514:	2000      	movs	r0, #0
        break;
      }
    }
  }

  return status;
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	40021000 	.word	0x40021000

0800551c <HAL_RCCEx_DisablePLLSAI1>:
/**
  * @brief  Disable PLLSAI1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI1(void)
{
 800551c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800551e:	4c10      	ldr	r4, [pc, #64]	; (8005560 <HAL_RCCEx_DisablePLLSAI1+0x44>)
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005526:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005528:	f7fb fab6 	bl	8000a98 <HAL_GetTick>
 800552c:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005534:	d005      	beq.n	8005542 <HAL_RCCEx_DisablePLLSAI1+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005536:	f7fb faaf 	bl	8000a98 <HAL_GetTick>
 800553a:	1b40      	subs	r0, r0, r5
 800553c:	2802      	cmp	r0, #2
 800553e:	d9f6      	bls.n	800552e <HAL_RCCEx_DisablePLLSAI1+0x12>
    {
      status = HAL_TIMEOUT;
 8005540:	2003      	movs	r0, #3
      break;
    }
  }

  /* Disable the PLLSAI1 Clock outputs */
  __HAL_RCC_PLLSAI1CLKOUT_DISABLE(RCC_PLLSAI1CFGR_PLLSAI1PEN|RCC_PLLSAI1CFGR_PLLSAI1QEN|RCC_PLLSAI1CFGR_PLLSAI1REN);
 8005542:	6923      	ldr	r3, [r4, #16]
 8005544:	4a06      	ldr	r2, [pc, #24]	; (8005560 <HAL_RCCEx_DisablePLLSAI1+0x44>)
 8005546:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800554a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554e:	6123      	str	r3, [r4, #16]

  /* Reset PLL source to save power if no PLLs on */
  if((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	019b      	lsls	r3, r3, #6
      &&
     (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
    )
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005554:	bf5e      	ittt	pl
 8005556:	68d3      	ldrpl	r3, [r2, #12]
 8005558:	f023 0303 	bicpl.w	r3, r3, #3
 800555c:	60d3      	strpl	r3, [r2, #12]
  }

  return status;
}
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	40021000 	.word	0x40021000

08005564 <HAL_RCCEx_WakeUpStopCLKConfig>:
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 8005564:	4a03      	ldr	r2, [pc, #12]	; (8005574 <HAL_RCCEx_WakeUpStopCLKConfig+0x10>)
 8005566:	6893      	ldr	r3, [r2, #8]
 8005568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800556c:	4318      	orrs	r0, r3
 800556e:	6090      	str	r0, [r2, #8]
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000

08005578 <HAL_RCCEx_StandbyMSIRangeConfig>:
  */
void HAL_RCCEx_StandbyMSIRangeConfig(uint32_t MSIRange)
{
  assert_param(IS_RCC_MSI_STANDBY_CLOCK_RANGE(MSIRange));

  __HAL_RCC_MSI_STANDBY_RANGE_CONFIG(MSIRange);
 8005578:	4a04      	ldr	r2, [pc, #16]	; (800558c <HAL_RCCEx_StandbyMSIRangeConfig+0x14>)
 800557a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800557e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005582:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8005586:	f8c2 0094 	str.w	r0, [r2, #148]	; 0x94
 800558a:	4770      	bx	lr
 800558c:	40021000 	.word	0x40021000

08005590 <HAL_RCCEx_EnableLSECSS>:
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8005590:	4a03      	ldr	r2, [pc, #12]	; (80055a0 <HAL_RCCEx_EnableLSECSS+0x10>)
 8005592:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005596:	f043 0320 	orr.w	r3, r3, #32
 800559a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800559e:	4770      	bx	lr
 80055a0:	40021000 	.word	0x40021000

080055a4 <HAL_RCCEx_DisableLSECSS>:
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCCEx_DisableLSECSS+0x18>)
 80055a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80055aa:	f022 0220 	bic.w	r2, r2, #32
 80055ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055b8:	619a      	str	r2, [r3, #24]
 80055ba:	4770      	bx	lr
 80055bc:	40021000 	.word	0x40021000

080055c0 <HAL_RCCEx_EnableLSECSS_IT>:
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <HAL_RCCEx_EnableLSECSS_IT+0x2c>)
 80055c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80055c6:	f042 0220 	orr.w	r2, r2, #32
 80055ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d4:	619a      	str	r2, [r3, #24]

  /* Enable IT on EXTI Line 19 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 80055d6:	f5a3 3386 	sub.w	r3, r3, #68608	; 0x10c00
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80055e0:	601a      	str	r2, [r3, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80055e8:	609a      	str	r2, [r3, #8]
 80055ea:	4770      	bx	lr
 80055ec:	40021000 	.word	0x40021000

080055f0 <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
 80055f0:	4770      	bx	lr
	...

080055f4 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
 80055f4:	b510      	push	{r4, lr}
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 80055f6:	4c05      	ldr	r4, [pc, #20]	; (800560c <HAL_RCCEx_LSECSS_IRQHandler+0x18>)
 80055f8:	69e3      	ldr	r3, [r4, #28]
 80055fa:	059b      	lsls	r3, r3, #22
 80055fc:	d504      	bpl.n	8005608 <HAL_RCCEx_LSECSS_IRQHandler+0x14>
  {
    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
 80055fe:	f7ff fff7 	bl	80055f0 <HAL_RCCEx_LSECSS_Callback>

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 8005602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005606:	6223      	str	r3, [r4, #32]
 8005608:	bd10      	pop	{r4, pc}
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000

08005610 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005610:	4a02      	ldr	r2, [pc, #8]	; (800561c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	f043 0304 	orr.w	r3, r3, #4
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	4770      	bx	lr
 800561c:	40021000 	.word	0x40021000

08005620 <HAL_RCCEx_DisableMSIPLLMode>:
  * @note   PLL-mode of the MSI is automatically reset when LSE oscillator is disabled.
  * @retval None
  */
void HAL_RCCEx_DisableMSIPLLMode(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005620:	4a02      	ldr	r2, [pc, #8]	; (800562c <HAL_RCCEx_DisableMSIPLLMode+0xc>)
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	f023 0304 	bic.w	r3, r3, #4
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4770      	bx	lr
 800562c:	40021000 	.word	0x40021000

08005630 <sha256_transform>:
	0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

/*********************** FUNCTION DEFINITIONS ***********************/
void sha256_transform(SHA256_CTX *ctx, const BYTE data[])
{
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
 8005634:	2200      	movs	r2, #0
	0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

/*********************** FUNCTION DEFINITIONS ***********************/
void sha256_transform(SHA256_CTX *ctx, const BYTE data[])
{
 8005636:	b0cb      	sub	sp, #300	; 0x12c
 8005638:	460c      	mov	r4, r1
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
 800563a:	5c8d      	ldrb	r5, [r1, r2]
 800563c:	78e3      	ldrb	r3, [r4, #3]
 800563e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005642:	7865      	ldrb	r5, [r4, #1]
 8005644:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005648:	78a5      	ldrb	r5, [r4, #2]
 800564a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800564e:	ad0a      	add	r5, sp, #40	; 0x28
 8005650:	3404      	adds	r4, #4
 8005652:	50ab      	str	r3, [r5, r2]
/*********************** FUNCTION DEFINITIONS ***********************/
void sha256_transform(SHA256_CTX *ctx, const BYTE data[])
{
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
 8005654:	3204      	adds	r2, #4
 8005656:	2a40      	cmp	r2, #64	; 0x40
 8005658:	d1ef      	bne.n	800563a <sha256_transform+0xa>
 800565a:	462b      	mov	r3, r5
 800565c:	2610      	movs	r6, #16
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];
 800565e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	ea4f 44f5 	mov.w	r4, r5, ror #19
 8005668:	ea84 4475 	eor.w	r4, r4, r5, ror #17
 800566c:	ea84 2595 	eor.w	r5, r4, r5, lsr #10
 8005670:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005672:	4421      	add	r1, r4
 8005674:	186c      	adds	r4, r5, r1
 8005676:	ea4f 41b2 	mov.w	r1, r2, ror #18
 800567a:	ea81 11f2 	eor.w	r1, r1, r2, ror #7
 800567e:	ea81 02d2 	eor.w	r2, r1, r2, lsr #3
{
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
 8005682:	3601      	adds	r6, #1
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];
 8005684:	4422      	add	r2, r4
{
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
 8005686:	2e40      	cmp	r6, #64	; 0x40
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
 800568a:	f103 0304 	add.w	r3, r3, #4
{
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
 800568e:	d1e6      	bne.n	800565e <sha256_transform+0x2e>
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
 8005690:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005692:	9301      	str	r3, [sp, #4]
	b = ctx->state[1];
 8005694:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005696:	9302      	str	r3, [sp, #8]
	c = ctx->state[2];
 8005698:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800569a:	9303      	str	r3, [sp, #12]
	d = ctx->state[3];
 800569c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800569e:	9304      	str	r3, [sp, #16]
	e = ctx->state[4];
 80056a0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80056a2:	9305      	str	r3, [sp, #20]
	f = ctx->state[5];
 80056a4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80056a6:	9306      	str	r3, [sp, #24]
	g = ctx->state[6];
 80056a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80056aa:	9307      	str	r3, [sp, #28]
	h = ctx->state[7];
 80056ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80056ae:	9308      	str	r3, [sp, #32]
 80056b0:	469b      	mov	fp, r3
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
 80056b2:	9f07      	ldr	r7, [sp, #28]
	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
	e = ctx->state[4];
	f = ctx->state[5];
 80056b4:	f8dd e018 	ldr.w	lr, [sp, #24]

	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
	e = ctx->state[4];
 80056b8:	9b05      	ldr	r3, [sp, #20]
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
 80056ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
 80056be:	9d03      	ldr	r5, [sp, #12]
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
	b = ctx->state[1];
 80056c0:	9e02      	ldr	r6, [sp, #8]
	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
 80056c2:	9901      	ldr	r1, [sp, #4]
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (i = 0; i < 64; ++i) {
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
 80056c4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005774 <sha256_transform+0x144>
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (i = 0; i < 64; ++i) {
 80056c8:	f04f 0c00 	mov.w	ip, #0
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
 80056cc:	ea4f 22f3 	mov.w	r2, r3, ror #11
 80056d0:	ea82 12b3 	eor.w	r2, r2, r3, ror #6
 80056d4:	ea82 6a73 	eor.w	sl, r2, r3, ror #25
 80056d8:	aa0a      	add	r2, sp, #40	; 0x28
 80056da:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 80056de:	4622      	mov	r2, r4
 80056e0:	f859 402c 	ldr.w	r4, [r9, ip, lsl #2]
 80056e4:	4414      	add	r4, r2
 80056e6:	eb0a 0204 	add.w	r2, sl, r4
 80056ea:	ea03 0a0e 	and.w	sl, r3, lr
 80056ee:	ea27 0403 	bic.w	r4, r7, r3
 80056f2:	ea84 040a 	eor.w	r4, r4, sl
 80056f6:	4414      	add	r4, r2
 80056f8:	445c      	add	r4, fp
		t2 = EP0(a) + MAJ(a,b,c);
 80056fa:	ea4f 3a71 	mov.w	sl, r1, ror #13
 80056fe:	ea85 0b06 	eor.w	fp, r5, r6
 8005702:	ea0b 0b01 	and.w	fp, fp, r1
 8005706:	ea8a 0ab1 	eor.w	sl, sl, r1, ror #2
 800570a:	ea06 0205 	and.w	r2, r6, r5
 800570e:	ea8b 0202 	eor.w	r2, fp, r2
 8005712:	ea8a 5ab1 	eor.w	sl, sl, r1, ror #22
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (i = 0; i < 64; ++i) {
 8005716:	f10c 0c01 	add.w	ip, ip, #1
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
		t2 = EP0(a) + MAJ(a,b,c);
 800571a:	4492      	add	sl, r2
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (i = 0; i < 64; ++i) {
 800571c:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
		t2 = EP0(a) + MAJ(a,b,c);
		h = g;
		g = f;
		f = e;
		e = d + t1;
 8005720:	eb04 0208 	add.w	r2, r4, r8
 8005724:	9209      	str	r2, [sp, #36]	; 0x24
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
 8005726:	4454      	add	r4, sl
 8005728:	46a8      	mov	r8, r5
 800572a:	46bb      	mov	fp, r7
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (i = 0; i < 64; ++i) {
 800572c:	d006      	beq.n	800573c <sha256_transform+0x10c>
 800572e:	4677      	mov	r7, lr
 8005730:	4635      	mov	r5, r6
 8005732:	469e      	mov	lr, r3
 8005734:	460e      	mov	r6, r1
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
		t2 = EP0(a) + MAJ(a,b,c);
		h = g;
		g = f;
		f = e;
		e = d + t1;
 8005736:	9b09      	ldr	r3, [sp, #36]	; 0x24
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
 8005738:	4621      	mov	r1, r4
 800573a:	e7c7      	b.n	80056cc <sha256_transform+0x9c>
	}

	ctx->state[0] += a;
 800573c:	9a01      	ldr	r2, [sp, #4]
 800573e:	4422      	add	r2, r4
 8005740:	6502      	str	r2, [r0, #80]	; 0x50
	ctx->state[1] += b;
 8005742:	9a02      	ldr	r2, [sp, #8]
 8005744:	440a      	add	r2, r1
 8005746:	6542      	str	r2, [r0, #84]	; 0x54
	ctx->state[2] += c;
 8005748:	9a03      	ldr	r2, [sp, #12]
	ctx->state[3] += d;
	ctx->state[4] += e;
 800574a:	9909      	ldr	r1, [sp, #36]	; 0x24
		a = t1 + t2;
	}

	ctx->state[0] += a;
	ctx->state[1] += b;
	ctx->state[2] += c;
 800574c:	4432      	add	r2, r6
 800574e:	6582      	str	r2, [r0, #88]	; 0x58
	ctx->state[3] += d;
 8005750:	9a04      	ldr	r2, [sp, #16]
 8005752:	442a      	add	r2, r5
 8005754:	65c2      	str	r2, [r0, #92]	; 0x5c
	ctx->state[4] += e;
 8005756:	9a05      	ldr	r2, [sp, #20]
 8005758:	440a      	add	r2, r1
 800575a:	6602      	str	r2, [r0, #96]	; 0x60
	ctx->state[5] += f;
 800575c:	9a06      	ldr	r2, [sp, #24]
 800575e:	441a      	add	r2, r3
	ctx->state[6] += g;
 8005760:	9b07      	ldr	r3, [sp, #28]
	ctx->state[0] += a;
	ctx->state[1] += b;
	ctx->state[2] += c;
	ctx->state[3] += d;
	ctx->state[4] += e;
	ctx->state[5] += f;
 8005762:	6642      	str	r2, [r0, #100]	; 0x64
	ctx->state[6] += g;
 8005764:	4473      	add	r3, lr
 8005766:	6683      	str	r3, [r0, #104]	; 0x68
	ctx->state[7] += h;
 8005768:	9b08      	ldr	r3, [sp, #32]
 800576a:	443b      	add	r3, r7
 800576c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800576e:	b04b      	add	sp, #300	; 0x12c
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005774:	08006fb8 	.word	0x08006fb8

08005778 <sha256_init>:

void sha256_init(SHA256_CTX *ctx)
{
	ctx->datalen = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	6403      	str	r3, [r0, #64]	; 0x40
	ctx->bitlen = 0;
 800577c:	2200      	movs	r2, #0
 800577e:	2300      	movs	r3, #0
 8005780:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
	ctx->state[0] = 0x6a09e667;
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <sha256_init+0x38>)
 8005786:	6503      	str	r3, [r0, #80]	; 0x50
	ctx->state[1] = 0xbb67ae85;
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <sha256_init+0x3c>)
 800578a:	6543      	str	r3, [r0, #84]	; 0x54
	ctx->state[2] = 0x3c6ef372;
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <sha256_init+0x40>)
 800578e:	6583      	str	r3, [r0, #88]	; 0x58
	ctx->state[3] = 0xa54ff53a;
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <sha256_init+0x44>)
 8005792:	65c3      	str	r3, [r0, #92]	; 0x5c
	ctx->state[4] = 0x510e527f;
 8005794:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <sha256_init+0x48>)
 8005796:	6603      	str	r3, [r0, #96]	; 0x60
	ctx->state[5] = 0x9b05688c;
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <sha256_init+0x4c>)
 800579a:	6643      	str	r3, [r0, #100]	; 0x64
	ctx->state[6] = 0x1f83d9ab;
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <sha256_init+0x50>)
 800579e:	6683      	str	r3, [r0, #104]	; 0x68
	ctx->state[7] = 0x5be0cd19;
 80057a0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80057a4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80057a8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80057ac:	66c3      	str	r3, [r0, #108]	; 0x6c
 80057ae:	4770      	bx	lr
 80057b0:	6a09e667 	.word	0x6a09e667
 80057b4:	bb67ae85 	.word	0xbb67ae85
 80057b8:	3c6ef372 	.word	0x3c6ef372
 80057bc:	a54ff53a 	.word	0xa54ff53a
 80057c0:	510e527f 	.word	0x510e527f
 80057c4:	9b05688c 	.word	0x9b05688c
 80057c8:	1f83d9ab 	.word	0x1f83d9ab

080057cc <sha256_update>:
}

void sha256_update(SHA256_CTX *ctx, const BYTE data[], size_t len)
{
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	4604      	mov	r4, r0
 80057d0:	460d      	mov	r5, r1
 80057d2:	188e      	adds	r6, r1, r2
		ctx->data[ctx->datalen] = data[i];
		ctx->datalen++;
		if (ctx->datalen == 64) {
			sha256_transform(ctx, ctx->data);
			ctx->bitlen += 512;
			ctx->datalen = 0;
 80057d4:	2700      	movs	r7, #0

void sha256_update(SHA256_CTX *ctx, const BYTE data[], size_t len)
{
	WORD i;

	for (i = 0; i < len; ++i) {
 80057d6:	42b5      	cmp	r5, r6
 80057d8:	d015      	beq.n	8005806 <sha256_update+0x3a>
		ctx->data[ctx->datalen] = data[i];
 80057da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057dc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80057e0:	54e2      	strb	r2, [r4, r3]
		ctx->datalen++;
 80057e2:	3301      	adds	r3, #1
		if (ctx->datalen == 64) {
 80057e4:	2b40      	cmp	r3, #64	; 0x40
{
	WORD i;

	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
		ctx->datalen++;
 80057e6:	6423      	str	r3, [r4, #64]	; 0x40
		if (ctx->datalen == 64) {
 80057e8:	d1f5      	bne.n	80057d6 <sha256_update+0xa>
			sha256_transform(ctx, ctx->data);
 80057ea:	4621      	mov	r1, r4
 80057ec:	4620      	mov	r0, r4
 80057ee:	f7ff ff1f 	bl	8005630 <sha256_transform>
			ctx->bitlen += 512;
 80057f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057f6:	f510 7000 	adds.w	r0, r0, #512	; 0x200
 80057fa:	f141 0100 	adc.w	r1, r1, #0
 80057fe:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
			ctx->datalen = 0;
 8005802:	6427      	str	r7, [r4, #64]	; 0x40
 8005804:	e7e7      	b.n	80057d6 <sha256_update+0xa>
		}
	}
}
 8005806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005808 <sha256_final>:

void sha256_final(SHA256_CTX *ctx, BYTE hash[])
{
 8005808:	b538      	push	{r3, r4, r5, lr}
	WORD i;

	i = ctx->datalen;
 800580a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800580c:	2280      	movs	r2, #128	; 0x80

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
 800580e:	2b37      	cmp	r3, #55	; 0x37
		}
	}
}

void sha256_final(SHA256_CTX *ctx, BYTE hash[])
{
 8005810:	4604      	mov	r4, r0
 8005812:	460d      	mov	r5, r1

	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
		ctx->data[i++] = 0x80;
 8005814:	54c2      	strb	r2, [r0, r3]
	WORD i;

	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
 8005816:	d808      	bhi.n	800582a <sha256_final+0x22>
 8005818:	4403      	add	r3, r0
 800581a:	f100 0237 	add.w	r2, r0, #55	; 0x37
		ctx->data[i++] = 0x80;
		while (i < 56)
			ctx->data[i++] = 0x00;
 800581e:	2100      	movs	r1, #0
	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
		ctx->data[i++] = 0x80;
		while (i < 56)
 8005820:	429a      	cmp	r2, r3
 8005822:	d014      	beq.n	800584e <sha256_final+0x46>
			ctx->data[i++] = 0x00;
 8005824:	f803 1f01 	strb.w	r1, [r3, #1]!
 8005828:	e7fa      	b.n	8005820 <sha256_final+0x18>
 800582a:	3301      	adds	r3, #1
 800582c:	4403      	add	r3, r0
	}
	else {
		ctx->data[i++] = 0x80;
		while (i < 64)
			ctx->data[i++] = 0x00;
 800582e:	2100      	movs	r1, #0
		while (i < 56)
			ctx->data[i++] = 0x00;
	}
	else {
		ctx->data[i++] = 0x80;
		while (i < 64)
 8005830:	1b1a      	subs	r2, r3, r4
 8005832:	2a3f      	cmp	r2, #63	; 0x3f
 8005834:	d802      	bhi.n	800583c <sha256_final+0x34>
			ctx->data[i++] = 0x00;
 8005836:	f803 1b01 	strb.w	r1, [r3], #1
 800583a:	e7f9      	b.n	8005830 <sha256_final+0x28>
		sha256_transform(ctx, ctx->data);
 800583c:	4621      	mov	r1, r4
 800583e:	4620      	mov	r0, r4
 8005840:	f7ff fef6 	bl	8005630 <sha256_transform>
		memset(ctx->data, 0, 56);
 8005844:	2238      	movs	r2, #56	; 0x38
 8005846:	2100      	movs	r1, #0
 8005848:	4620      	mov	r0, r4
 800584a:	f000 fee4 	bl	8006616 <memset>
	}

	// Append to the padding the total message's length in bits and transform.
	ctx->bitlen += ctx->datalen * 8;
 800584e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005850:	00d9      	lsls	r1, r3, #3
 8005852:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8005856:	1852      	adds	r2, r2, r1
 8005858:	f143 0300 	adc.w	r3, r3, #0
	ctx->data[63] = ctx->bitlen;
	ctx->data[62] = ctx->bitlen >> 8;
 800585c:	0a11      	lsrs	r1, r2, #8
		sha256_transform(ctx, ctx->data);
		memset(ctx->data, 0, 56);
	}

	// Append to the padding the total message's length in bits and transform.
	ctx->bitlen += ctx->datalen * 8;
 800585e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
	ctx->data[63] = ctx->bitlen;
 8005862:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	ctx->data[62] = ctx->bitlen >> 8;
 8005866:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
	ctx->data[61] = ctx->bitlen >> 16;
 800586a:	0c11      	lsrs	r1, r2, #16
	ctx->data[60] = ctx->bitlen >> 24;
 800586c:	0e12      	lsrs	r2, r2, #24
 800586e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	ctx->data[59] = ctx->bitlen >> 32;
	ctx->data[58] = ctx->bitlen >> 40;
 8005872:	0a1a      	lsrs	r2, r3, #8
	ctx->bitlen += ctx->datalen * 8;
	ctx->data[63] = ctx->bitlen;
	ctx->data[62] = ctx->bitlen >> 8;
	ctx->data[61] = ctx->bitlen >> 16;
	ctx->data[60] = ctx->bitlen >> 24;
	ctx->data[59] = ctx->bitlen >> 32;
 8005874:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	ctx->data[58] = ctx->bitlen >> 40;
 8005878:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
	ctx->data[57] = ctx->bitlen >> 48;
 800587c:	0c1a      	lsrs	r2, r3, #16
	ctx->data[56] = ctx->bitlen >> 56;
 800587e:	0e1b      	lsrs	r3, r3, #24

	// Append to the padding the total message's length in bits and transform.
	ctx->bitlen += ctx->datalen * 8;
	ctx->data[63] = ctx->bitlen;
	ctx->data[62] = ctx->bitlen >> 8;
	ctx->data[61] = ctx->bitlen >> 16;
 8005880:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
	ctx->data[60] = ctx->bitlen >> 24;
	ctx->data[59] = ctx->bitlen >> 32;
	ctx->data[58] = ctx->bitlen >> 40;
	ctx->data[57] = ctx->bitlen >> 48;
 8005884:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
	ctx->data[56] = ctx->bitlen >> 56;
 8005888:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	sha256_transform(ctx, ctx->data);
 800588c:	4621      	mov	r1, r4
 800588e:	4620      	mov	r0, r4
 8005890:	f7ff fece 	bl	8005630 <sha256_transform>
 8005894:	2203      	movs	r2, #3

	// Since this implementation uses little endian byte ordering and SHA uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
		hash[i]      = (ctx->state[0] >> (24 - i * 8)) & 0x000000ff;
 8005896:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005898:	00d3      	lsls	r3, r2, #3
 800589a:	40d9      	lsrs	r1, r3
 800589c:	7029      	strb	r1, [r5, #0]
		hash[i + 4]  = (ctx->state[1] >> (24 - i * 8)) & 0x000000ff;
 800589e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80058a0:	40d9      	lsrs	r1, r3
 80058a2:	7129      	strb	r1, [r5, #4]
		hash[i + 8]  = (ctx->state[2] >> (24 - i * 8)) & 0x000000ff;
 80058a4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80058a6:	40d9      	lsrs	r1, r3
 80058a8:	7229      	strb	r1, [r5, #8]
		hash[i + 12] = (ctx->state[3] >> (24 - i * 8)) & 0x000000ff;
 80058aa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80058ac:	40d9      	lsrs	r1, r3
 80058ae:	7329      	strb	r1, [r5, #12]
		hash[i + 16] = (ctx->state[4] >> (24 - i * 8)) & 0x000000ff;
 80058b0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80058b2:	40d9      	lsrs	r1, r3
 80058b4:	7429      	strb	r1, [r5, #16]
		hash[i + 20] = (ctx->state[5] >> (24 - i * 8)) & 0x000000ff;
 80058b6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80058b8:	40d9      	lsrs	r1, r3
 80058ba:	7529      	strb	r1, [r5, #20]
		hash[i + 24] = (ctx->state[6] >> (24 - i * 8)) & 0x000000ff;
 80058bc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80058be:	40d9      	lsrs	r1, r3
 80058c0:	7629      	strb	r1, [r5, #24]
		hash[i + 28] = (ctx->state[7] >> (24 - i * 8)) & 0x000000ff;
 80058c2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80058c4:	3a01      	subs	r2, #1
 80058c6:	fa21 f303 	lsr.w	r3, r1, r3
 80058ca:	772b      	strb	r3, [r5, #28]
	ctx->data[56] = ctx->bitlen >> 56;
	sha256_transform(ctx, ctx->data);

	// Since this implementation uses little endian byte ordering and SHA uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
 80058cc:	1c53      	adds	r3, r2, #1
 80058ce:	f105 0501 	add.w	r5, r5, #1
 80058d2:	d1e0      	bne.n	8005896 <sha256_final+0x8e>
		hash[i + 16] = (ctx->state[4] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 20] = (ctx->state[5] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 24] = (ctx->state[6] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 28] = (ctx->state[7] >> (24 - i * 8)) & 0x000000ff;
	}
}
 80058d4:	bd38      	pop	{r3, r4, r5, pc}

080058d6 <uECC_vli_mult>:

#if !asm_mult
uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
                                const uECC_word_t *left,
                                const uECC_word_t *right,
                                wordcount_t num_words) {
 80058d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    );
    
#else /* Thumb-1 */
    uint32_t r4, r5, r6, r7;

    __asm__ volatile (
 80058da:	3b01      	subs	r3, #1
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4698      	mov	r8, r3
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4699      	mov	r9, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	2400      	movs	r4, #0
 80058e8:	2500      	movs	r5, #0
 80058ea:	2600      	movs	r6, #0
 80058ec:	b401      	push	{r0}
 80058ee:	2700      	movs	r7, #0
 80058f0:	e002      	b.n	80058f8 <uECC_vli_mult+0x22>
 80058f2:	0037      	movs	r7, r6
 80058f4:	4640      	mov	r0, r8
 80058f6:	1a3f      	subs	r7, r7, r0
 80058f8:	b478      	push	{r3, r4, r5, r6}
 80058fa:	1bf0      	subs	r0, r6, r7
 80058fc:	5814      	ldr	r4, [r2, r0]
 80058fe:	59c8      	ldr	r0, [r1, r7]
 8005900:	0c03      	lsrs	r3, r0, #16
 8005902:	b280      	uxth	r0, r0
 8005904:	0c25      	lsrs	r5, r4, #16
 8005906:	b2a4      	uxth	r4, r4
 8005908:	001e      	movs	r6, r3
 800590a:	436e      	muls	r6, r5
 800590c:	4363      	muls	r3, r4
 800590e:	4345      	muls	r5, r0
 8005910:	4360      	muls	r0, r4
 8005912:	2400      	movs	r4, #0
 8005914:	195b      	adds	r3, r3, r5
 8005916:	4164      	adcs	r4, r4
 8005918:	0424      	lsls	r4, r4, #16
 800591a:	1936      	adds	r6, r6, r4
 800591c:	041c      	lsls	r4, r3, #16
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	1900      	adds	r0, r0, r4
 8005922:	415e      	adcs	r6, r3
 8005924:	bc38      	pop	{r3, r4, r5}
 8005926:	181b      	adds	r3, r3, r0
 8005928:	4174      	adcs	r4, r6
 800592a:	2000      	movs	r0, #0
 800592c:	4145      	adcs	r5, r0
 800592e:	bc40      	pop	{r6}
 8005930:	3704      	adds	r7, #4
 8005932:	4547      	cmp	r7, r8
 8005934:	dc01      	bgt.n	800593a <uECC_vli_mult+0x64>
 8005936:	42b7      	cmp	r7, r6
 8005938:	ddde      	ble.n	80058f8 <uECC_vli_mult+0x22>
 800593a:	9800      	ldr	r0, [sp, #0]
 800593c:	5183      	str	r3, [r0, r6]
 800593e:	4623      	mov	r3, r4
 8005940:	462c      	mov	r4, r5
 8005942:	2500      	movs	r5, #0
 8005944:	3604      	adds	r6, #4
 8005946:	4546      	cmp	r6, r8
 8005948:	ddd1      	ble.n	80058ee <uECC_vli_mult+0x18>
 800594a:	454e      	cmp	r6, r9
 800594c:	ddd1      	ble.n	80058f2 <uECC_vli_mult+0x1c>
 800594e:	5183      	str	r3, [r0, r6]
 8005950:	bc01      	pop	{r0}
 8005952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005956 <uECC_vli_clear>:
}

#if !asm_clear
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 8005956:	2200      	movs	r2, #0
void uECC_set_rng(uECC_RNG_Function rng_function) {
    g_rng_function = rng_function;
}

#if !asm_clear
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
 8005958:	b510      	push	{r4, lr}
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
        vli[i] = 0;
 800595a:	4614      	mov	r4, r2
}

#if !asm_clear
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 800595c:	b253      	sxtb	r3, r2
 800595e:	428b      	cmp	r3, r1
 8005960:	da04      	bge.n	800596c <uECC_vli_clear+0x16>
        vli[i] = 0;
 8005962:	b21b      	sxth	r3, r3
 8005964:	3201      	adds	r2, #1
 8005966:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 800596a:	e7f7      	b.n	800595c <uECC_vli_clear+0x6>
    }
}
 800596c:	bd10      	pop	{r4, pc}

0800596e <uECC_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
 800596e:	b510      	push	{r4, lr}
    uECC_word_t bits = 0;
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 8005970:	2300      	movs	r3, #0
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
    uECC_word_t bits = 0;
 8005972:	461a      	mov	r2, r3
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 8005974:	b25c      	sxtb	r4, r3
 8005976:	428c      	cmp	r4, r1
 8005978:	da04      	bge.n	8005984 <uECC_vli_isZero+0x16>
        bits |= vli[i];
 800597a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800597e:	3301      	adds	r3, #1
 8005980:	4322      	orrs	r2, r4
 8005982:	e7f7      	b.n	8005974 <uECC_vli_isZero+0x6>
    }
    return (bits == 0);
}
 8005984:	fab2 f082 	clz	r0, r2
 8005988:	0940      	lsrs	r0, r0, #5
 800598a:	bd10      	pop	{r4, pc}

0800598c <uECC_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
uECC_VLI_API uECC_word_t uECC_vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 800598c:	114a      	asrs	r2, r1, #5
 800598e:	2301      	movs	r3, #1
 8005990:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8005994:	f001 011f 	and.w	r1, r1, #31
 8005998:	fa03 f101 	lsl.w	r1, r3, r1
}
 800599c:	4008      	ands	r0, r1
 800599e:	4770      	bx	lr

080059a0 <uECC_vli_numBits>:

    return (i + 1);
}

/* Counts the number of bits required to represent vli. */
uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli, const wordcount_t max_words) {
 80059a0:	3901      	subs	r1, #1
 80059a2:	b2c9      	uxtb	r1, r1
/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const uECC_word_t *vli, const wordcount_t max_words) {
    wordcount_t i;
    /* Search from the end until we find a non-zero digit.
       We do it in reverse because we expect that most digits will be nonzero. */
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 80059a4:	b24b      	sxtb	r3, r1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	da0b      	bge.n	80059c2 <uECC_vli_numBits+0x22>
    }

    return (i + 1);
 80059aa:	3101      	adds	r1, #1
uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli, const wordcount_t max_words) {
    uECC_word_t i;
    uECC_word_t digit;

    wordcount_t num_digits = vli_numDigits(vli, max_words);
    if (num_digits == 0) {
 80059ac:	f011 03ff 	ands.w	r3, r1, #255	; 0xff
 80059b0:	d015      	beq.n	80059de <uECC_vli_numBits+0x3e>
        return 0;
    }

    digit = vli[num_digits - 1];
 80059b2:	b259      	sxtb	r1, r3
 80059b4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80059b8:	3b01      	subs	r3, #1
 80059ba:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    for (i = 0; digit; ++i) {
 80059be:	2300      	movs	r3, #0
 80059c0:	e004      	b.n	80059cc <uECC_vli_numBits+0x2c>
/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const uECC_word_t *vli, const wordcount_t max_words) {
    wordcount_t i;
    /* Search from the end until we find a non-zero digit.
       We do it in reverse because we expect that most digits will be nonzero. */
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 80059c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0ea      	beq.n	80059a0 <uECC_vli_numBits>
 80059ca:	e7ee      	b.n	80059aa <uECC_vli_numBits+0xa>
    if (num_digits == 0) {
        return 0;
    }

    digit = vli[num_digits - 1];
    for (i = 0; digit; ++i) {
 80059cc:	b112      	cbz	r2, 80059d4 <uECC_vli_numBits+0x34>
        digit >>= 1;
 80059ce:	0852      	lsrs	r2, r2, #1
    if (num_digits == 0) {
        return 0;
    }

    digit = vli[num_digits - 1];
    for (i = 0; digit; ++i) {
 80059d0:	3301      	adds	r3, #1
 80059d2:	e7fb      	b.n	80059cc <uECC_vli_numBits+0x2c>
        digit >>= 1;
    }

    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 80059d4:	1e48      	subs	r0, r1, #1
 80059d6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 80059da:	b280      	uxth	r0, r0
 80059dc:	e000      	b.n	80059e0 <uECC_vli_numBits+0x40>
    uECC_word_t i;
    uECC_word_t digit;

    wordcount_t num_digits = vli_numDigits(vli, max_words);
    if (num_digits == 0) {
        return 0;
 80059de:	4618      	mov	r0, r3
    for (i = 0; digit; ++i) {
        digit >>= 1;
    }

    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
}
 80059e0:	b200      	sxth	r0, r0
 80059e2:	4770      	bx	lr

080059e4 <uECC_vli_set>:

/* Sets dest = src. */
#if !asm_set
uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src, wordcount_t num_words) {
 80059e4:	b530      	push	{r4, r5, lr}
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 80059e6:	2400      	movs	r4, #0
 80059e8:	b263      	sxtb	r3, r4
 80059ea:	4293      	cmp	r3, r2
 80059ec:	da06      	bge.n	80059fc <uECC_vli_set+0x18>
        dest[i] = src[i];
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	3401      	adds	r4, #1
 80059f2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 80059f6:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
 80059fa:	e7f5      	b.n	80059e8 <uECC_vli_set+0x4>
    }
}
 80059fc:	bd30      	pop	{r4, r5, pc}

080059fe <uECC_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
 80059fe:	b510      	push	{r4, lr}
 8005a00:	3a01      	subs	r2, #1
 8005a02:	b2d2      	uxtb	r2, r2
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 8005a04:	b253      	sxtb	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	db09      	blt.n	8005a1e <uECC_vli_cmp_unsafe+0x20>
        if (left[i] > right[i]) {
 8005a0a:	b21b      	sxth	r3, r3
 8005a0c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8005a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a14:	429c      	cmp	r4, r3
 8005a16:	d804      	bhi.n	8005a22 <uECC_vli_cmp_unsafe+0x24>
            return 1;
        } else if (left[i] < right[i]) {
 8005a18:	d2f2      	bcs.n	8005a00 <uECC_vli_cmp_unsafe+0x2>
            return -1;
 8005a1a:	20ff      	movs	r0, #255	; 0xff
 8005a1c:	e002      	b.n	8005a24 <uECC_vli_cmp_unsafe+0x26>
        }
    }
    return 0;
 8005a1e:	2000      	movs	r0, #0
 8005a20:	e000      	b.n	8005a24 <uECC_vli_cmp_unsafe+0x26>
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
        if (left[i] > right[i]) {
            return 1;
 8005a22:	2001      	movs	r0, #1
        } else if (left[i] < right[i]) {
            return -1;
        }
    }
    return 0;
}
 8005a24:	b240      	sxtb	r0, r0
 8005a26:	bd10      	pop	{r4, pc}

08005a28 <uECC_vli_rshift1>:
}
#endif

/* Computes vli = vli >> 1. */
#if !asm_rshift1
uECC_VLI_API void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words) {
 8005a28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    uECC_word_t *end = vli;
    uECC_word_t carry = 0;
 8005a2c:	2300      	movs	r3, #0
    
    vli += num_words;
    while (vli-- > end) {
 8005a2e:	4288      	cmp	r0, r1
 8005a30:	d206      	bcs.n	8005a40 <uECC_vli_rshift1+0x18>
        uECC_word_t temp = *vli;
 8005a32:	f851 2d04 	ldr.w	r2, [r1, #-4]!
        *vli = (temp >> 1) | carry;
 8005a36:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8005a3a:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
 8005a3c:	07d3      	lsls	r3, r2, #31
 8005a3e:	e7f6      	b.n	8005a2e <uECC_vli_rshift1+0x6>
    }
}
 8005a40:	4770      	bx	lr
	...

08005a44 <uECC_vli_modMult>:
/* Computes result = (left * right) % mod. */
uECC_VLI_API void uECC_vli_modMult(uECC_word_t *result,
                                   const uECC_word_t *left,
                                   const uECC_word_t *right,
                                   const uECC_word_t *mod,
                                   wordcount_t num_words) {
 8005a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a48:	b0b5      	sub	sp, #212	; 0xd4
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, num_words);
 8005a4a:	ad04      	add	r5, sp, #16
/* Computes result = (left * right) % mod. */
uECC_VLI_API void uECC_vli_modMult(uECC_word_t *result,
                                   const uECC_word_t *left,
                                   const uECC_word_t *right,
                                   const uECC_word_t *mod,
                                   wordcount_t num_words) {
 8005a4c:	f99d 40f8 	ldrsb.w	r4, [sp, #248]	; 0xf8
 8005a50:	4699      	mov	r9, r3
 8005a52:	4680      	mov	r8, r0
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, num_words);
 8005a54:	4623      	mov	r3, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7ff ff3d 	bl	80058d6 <uECC_vli_mult>
                                uECC_word_t *product,
                                const uECC_word_t *mod,
                                wordcount_t num_words) {
    uECC_word_t mod_multiple[2 * uECC_MAX_WORDS];
    uECC_word_t tmp[2 * uECC_MAX_WORDS];
    uECC_word_t *v[2] = {tmp, product};
 8005a5c:	ab24      	add	r3, sp, #144	; 0x90
    uECC_word_t index;
    
    /* Shift mod so its highest set bit is at the maximum position. */
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4648      	mov	r0, r9
                                uECC_word_t *product,
                                const uECC_word_t *mod,
                                wordcount_t num_words) {
    uECC_word_t mod_multiple[2 * uECC_MAX_WORDS];
    uECC_word_t tmp[2 * uECC_MAX_WORDS];
    uECC_word_t *v[2] = {tmp, product};
 8005a62:	9302      	str	r3, [sp, #8]
 8005a64:	9503      	str	r5, [sp, #12]
    uECC_word_t index;
    
    /* Shift mod so its highest set bit is at the maximum position. */
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
 8005a66:	f7ff ff9b 	bl	80059a0 <uECC_vli_numBits>
 8005a6a:	ebc0 1084 	rsb	r0, r0, r4, lsl #6
 8005a6e:	b285      	uxth	r5, r0
    wordcount_t word_shift = shift / uECC_WORD_BITS;
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8005a70:	4b49      	ldr	r3, [pc, #292]	; (8005b98 <uECC_vli_modMult+0x154>)
    uECC_word_t *v[2] = {tmp, product};
    uECC_word_t index;
    
    /* Shift mod so its highest set bit is at the maximum position. */
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
    wordcount_t word_shift = shift / uECC_WORD_BITS;
 8005a72:	b22a      	sxth	r2, r5
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8005a74:	4013      	ands	r3, r2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	bfbc      	itt	lt
 8005a7a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8005a7e:	f063 031f 	ornlt	r3, r3, #31
    uECC_word_t *v[2] = {tmp, product};
    uECC_word_t index;
    
    /* Shift mod so its highest set bit is at the maximum position. */
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
    wordcount_t word_shift = shift / uECC_WORD_BITS;
 8005a82:	f04f 0720 	mov.w	r7, #32
 8005a86:	fb92 f7f7 	sdiv	r7, r2, r7
 8005a8a:	b2ff      	uxtb	r7, r7
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8005a8c:	bfb8      	it	lt
 8005a8e:	3301      	addlt	r3, #1
    uECC_word_t carry = 0;
    uECC_vli_clear(mod_multiple, word_shift);
 8005a90:	b27f      	sxtb	r7, r7
    uECC_word_t index;
    
    /* Shift mod so its highest set bit is at the maximum position. */
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
    wordcount_t word_shift = shift / uECC_WORD_BITS;
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8005a92:	b29e      	uxth	r6, r3
    uECC_word_t carry = 0;
    uECC_vli_clear(mod_multiple, word_shift);
 8005a94:	a814      	add	r0, sp, #80	; 0x50
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7ff ff5d 	bl	8005956 <uECC_vli_clear>
    if (bit_shift > 0) {
 8005a9c:	b233      	sxth	r3, r6
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	b238      	sxth	r0, r7
 8005aa2:	dd14      	ble.n	8005ace <uECC_vli_modMult+0x8a>
 8005aa4:	aa14      	add	r2, sp, #80	; 0x50
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 8005aac:	f1c3 0720 	rsb	r7, r3, #32
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
    wordcount_t word_shift = shift / uECC_WORD_BITS;
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
    uECC_word_t carry = 0;
    uECC_vli_clear(mod_multiple, word_shift);
    if (bit_shift > 0) {
 8005ab0:	460a      	mov	r2, r1
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 8005ab2:	42a2      	cmp	r2, r4
 8005ab4:	d212      	bcs.n	8005adc <uECC_vli_modMult+0x98>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 8005ab6:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8005aba:	fa06 fe03 	lsl.w	lr, r6, r3
 8005abe:	ea4e 0101 	orr.w	r1, lr, r1
 8005ac2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 8005ac6:	fa26 f107 	lsr.w	r1, r6, r7
    wordcount_t word_shift = shift / uECC_WORD_BITS;
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
    uECC_word_t carry = 0;
    uECC_vli_clear(mod_multiple, word_shift);
    if (bit_shift > 0) {
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 8005aca:	3201      	adds	r2, #1
 8005acc:	e7f1      	b.n	8005ab2 <uECC_vli_modMult+0x6e>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
        }
    } else {
        uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 8005ace:	ab14      	add	r3, sp, #80	; 0x50
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ad8:	f7ff ff84 	bl	80059e4 <uECC_vli_set>
 8005adc:	b227      	sxth	r7, r4
 8005ade:	007b      	lsls	r3, r7, #1
 8005ae0:	9301      	str	r3, [sp, #4]
            v[1 - index][i] = diff;
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
        uECC_vli_rshift1(mod_multiple, num_words);
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8005ae2:	ab14      	add	r3, sp, #80	; 0x50
 8005ae4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
            }
            v[1 - index][i] = diff;
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
        uECC_vli_rshift1(mod_multiple, num_words);
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 8005ae8:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8005aec:	ab34      	add	r3, sp, #208	; 0xd0
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8005aee:	2601      	movs	r6, #1
            }
            v[1 - index][i] = diff;
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
        uECC_vli_rshift1(mod_multiple, num_words);
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 8005af0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
        }
    } else {
        uECC_vli_set(mod_multiple + word_shift, mod, num_words);
    }

    for (index = 1; shift >= 0; --shift) {
 8005af4:	042b      	lsls	r3, r5, #16
 8005af6:	d442      	bmi.n	8005b7e <uECC_vli_modMult+0x13a>
        uECC_word_t borrow = 0;
        wordcount_t i;
        for (i = 0; i < num_words * 2; ++i) {
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8005af8:	ab34      	add	r3, sp, #208	; 0xd0
        }
    } else {
        uECC_vli_set(mod_multiple + word_shift, mod, num_words);
    }

    for (index = 1; shift >= 0; --shift) {
 8005afa:	2200      	movs	r2, #0
        for (i = 0; i < num_words * 2; ++i) {
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
            if (diff != v[index][i]) {
                borrow = (diff > v[index][i]);
            }
            v[1 - index][i] = diff;
 8005afc:	f1c6 0001 	rsb	r0, r6, #1
        }
    } else {
        uECC_vli_set(mod_multiple + word_shift, mod, num_words);
    }

    for (index = 1; shift >= 0; --shift) {
 8005b00:	4696      	mov	lr, r2
        uECC_word_t borrow = 0;
        wordcount_t i;
        for (i = 0; i < num_words * 2; ++i) {
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8005b02:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
            if (diff != v[index][i]) {
                borrow = (diff > v[index][i]);
            }
            v[1 - index][i] = diff;
 8005b06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }

    for (index = 1; shift >= 0; --shift) {
        uECC_word_t borrow = 0;
        wordcount_t i;
        for (i = 0; i < num_words * 2; ++i) {
 8005b0a:	9b01      	ldr	r3, [sp, #4]
 8005b0c:	b251      	sxtb	r1, r2
 8005b0e:	4299      	cmp	r1, r3
 8005b10:	da1b      	bge.n	8005b4a <uECC_vli_modMult+0x106>
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8005b12:	fa0f fc81 	sxth.w	ip, r1
 8005b16:	f85a 3cc8 	ldr.w	r3, [sl, #-200]
 8005b1a:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
 8005b1e:	ab34      	add	r3, sp, #208	; 0xd0
 8005b20:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005b24:	f851 3c80 	ldr.w	r3, [r1, #-128]
 8005b28:	ebc3 030b 	rsb	r3, r3, fp
 8005b2c:	ebce 0303 	rsb	r3, lr, r3
            if (diff != v[index][i]) {
 8005b30:	459b      	cmp	fp, r3
 8005b32:	d004      	beq.n	8005b3e <uECC_vli_modMult+0xfa>
                borrow = (diff > v[index][i]);
 8005b34:	bf34      	ite	cc
 8005b36:	f04f 0e01 	movcc.w	lr, #1
 8005b3a:	f04f 0e00 	movcs.w	lr, #0
            }
            v[1 - index][i] = diff;
 8005b3e:	f850 1cc8 	ldr.w	r1, [r0, #-200]
 8005b42:	3201      	adds	r2, #1
 8005b44:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
 8005b48:	e7df      	b.n	8005b0a <uECC_vli_modMult+0xc6>
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8005b4a:	ebce 0206 	rsb	r2, lr, r6
 8005b4e:	4256      	negs	r6, r2
        uECC_vli_rshift1(mod_multiple, num_words);
 8005b50:	4621      	mov	r1, r4
 8005b52:	a814      	add	r0, sp, #80	; 0x50
            if (diff != v[index][i]) {
                borrow = (diff > v[index][i]);
            }
            v[1 - index][i] = diff;
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8005b54:	4156      	adcs	r6, r2
        uECC_vli_rshift1(mod_multiple, num_words);
 8005b56:	f7ff ff67 	bl	8005a28 <uECC_vli_rshift1>
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 8005b5a:	ab34      	add	r3, sp, #208	; 0xd0
 8005b5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8005b60:	4621      	mov	r1, r4
            }
            v[1 - index][i] = diff;
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
        uECC_vli_rshift1(mod_multiple, num_words);
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 8005b62:	f853 2c80 	ldr.w	r2, [r3, #-128]
 8005b66:	f859 3c80 	ldr.w	r3, [r9, #-128]
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8005b6a:	4638      	mov	r0, r7
            }
            v[1 - index][i] = diff;
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
        uECC_vli_rshift1(mod_multiple, num_words);
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 8005b6c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8005b70:	3d01      	subs	r5, #1
 8005b72:	f849 3c80 	str.w	r3, [r9, #-128]
 8005b76:	b2ad      	uxth	r5, r5
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8005b78:	f7ff ff56 	bl	8005a28 <uECC_vli_rshift1>
 8005b7c:	e7ba      	b.n	8005af4 <uECC_vli_modMult+0xb0>
    }
    uECC_vli_set(result, v[index], num_words);
 8005b7e:	ab34      	add	r3, sp, #208	; 0xd0
 8005b80:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8005b84:	4622      	mov	r2, r4
 8005b86:	f856 1cc8 	ldr.w	r1, [r6, #-200]
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	f7ff ff2a 	bl	80059e4 <uECC_vli_set>
                                   const uECC_word_t *mod,
                                   wordcount_t num_words) {
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, num_words);
    uECC_vli_mmod(result, product, mod, num_words);
}
 8005b90:	b035      	add	sp, #212	; 0xd4
 8005b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b96:	bf00      	nop
 8005b98:	8000001f 	.word	0x8000001f

08005b9c <uECC_vli_modMult_fast>:

uECC_VLI_API void uECC_vli_modMult_fast(uECC_word_t *result,
                                        const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        uECC_Curve curve) {
 8005b9c:	b530      	push	{r4, r5, lr}
 8005b9e:	461c      	mov	r4, r3
 8005ba0:	b091      	sub	sp, #68	; 0x44
 8005ba2:	4605      	mov	r5, r0
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, curve->num_words);
 8005ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8005ba8:	4668      	mov	r0, sp
 8005baa:	f7ff fe94 	bl	80058d6 <uECC_vli_mult>
#if (uECC_OPTIMIZATION_LEVEL > 0)
    curve->mmod_fast(result, product);
 8005bae:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005bb2:	4669      	mov	r1, sp
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	4798      	blx	r3
#else
    uECC_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 8005bb8:	b011      	add	sp, #68	; 0x44
 8005bba:	bd30      	pop	{r4, r5, pc}

08005bbc <uECC_vli_modSquare_fast>:
#endif /* uECC_ENABLE_VLI_API */

uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,
                                          const uECC_word_t *left,
                                          uECC_Curve curve) {
    uECC_vli_modMult_fast(result, left, left, curve);
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	f7ff bfec 	b.w	8005b9c <uECC_vli_modMult_fast>

08005bc4 <apply_z>:

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(uECC_word_t * X1,
                    uECC_word_t * Y1,
                    const uECC_word_t * const Z,
                    uECC_Curve curve) {
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	b089      	sub	sp, #36	; 0x24
 8005bca:	461c      	mov	r4, r3
 8005bcc:	4607      	mov	r7, r0
 8005bce:	460e      	mov	r6, r1
    uECC_word_t t1[uECC_MAX_WORDS];

    uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	4668      	mov	r0, sp
 8005bd6:	f7ff fff1 	bl	8005bbc <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8005bda:	4623      	mov	r3, r4
 8005bdc:	466a      	mov	r2, sp
 8005bde:	4639      	mov	r1, r7
 8005be0:	4638      	mov	r0, r7
 8005be2:	f7ff ffdb 	bl	8005b9c <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 8005be6:	4623      	mov	r3, r4
 8005be8:	462a      	mov	r2, r5
 8005bea:	4669      	mov	r1, sp
 8005bec:	4668      	mov	r0, sp
 8005bee:	f7ff ffd5 	bl	8005b9c <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	466a      	mov	r2, sp
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f7ff ffcf 	bl	8005b9c <uECC_vli_modMult_fast>
}
 8005bfe:	b009      	add	sp, #36	; 0x24
 8005c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c02 <uECC_vli_nativeToBytes>:

#else

uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes,
                                         int num_bytes,
                                         const uECC_word_t *native) {
 8005c02:	b5f0      	push	{r4, r5, r6, r7, lr}
    wordcount_t i;
    for (i = 0; i < num_bytes; ++i) {
 8005c04:	2500      	movs	r5, #0
        unsigned b = num_bytes - 1 - i;
 8005c06:	1e4f      	subs	r7, r1, #1

uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes,
                                         int num_bytes,
                                         const uECC_word_t *native) {
    wordcount_t i;
    for (i = 0; i < num_bytes; ++i) {
 8005c08:	b26c      	sxtb	r4, r5
 8005c0a:	428c      	cmp	r4, r1
 8005c0c:	f105 0501 	add.w	r5, r5, #1
 8005c10:	da0a      	bge.n	8005c28 <uECC_vli_nativeToBytes+0x26>
        unsigned b = num_bytes - 1 - i;
 8005c12:	1b3b      	subs	r3, r7, r4
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 8005c14:	089e      	lsrs	r6, r3, #2
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	fa26 f303 	lsr.w	r3, r6, r3
 8005c24:	5503      	strb	r3, [r0, r4]
 8005c26:	e7ef      	b.n	8005c08 <uECC_vli_nativeToBytes+0x6>
    }
}
 8005c28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c2a <uECC_vli_bytesToNative>:

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
 8005c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2c:	4616      	mov	r6, r2
    wordcount_t i;
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8005c2e:	1cd3      	adds	r3, r2, #3
    }
}

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
 8005c30:	460d      	mov	r5, r1
    wordcount_t i;
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8005c32:	2104      	movs	r1, #4
 8005c34:	fb93 f1f1 	sdiv	r1, r3, r1
 8005c38:	b249      	sxtb	r1, r1
    }
}

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
 8005c3a:	4604      	mov	r4, r0
    wordcount_t i;
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    for (i = 0; i < num_bytes; ++i) {
        unsigned b = num_bytes - 1 - i;
 8005c3c:	1e77      	subs	r7, r6, #1

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    wordcount_t i;
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8005c3e:	f7ff fe8a 	bl	8005956 <uECC_vli_clear>
    for (i = 0; i < num_bytes; ++i) {
 8005c42:	2200      	movs	r2, #0
 8005c44:	b251      	sxtb	r1, r2
 8005c46:	428e      	cmp	r6, r1
 8005c48:	f102 0201 	add.w	r2, r2, #1
 8005c4c:	dd0d      	ble.n	8005c6a <uECC_vli_bytesToNative+0x40>
        unsigned b = num_bytes - 1 - i;
 8005c4e:	1a7b      	subs	r3, r7, r1
        native[b / uECC_WORD_SIZE] |= 
 8005c50:	0898      	lsrs	r0, r3, #2
 8005c52:	5c69      	ldrb	r1, [r5, r1]
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8005c62:	430b      	orrs	r3, r1
 8005c64:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8005c68:	e7ec      	b.n	8005c44 <uECC_vli_bytesToNative+0x1a>
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    }
}
 8005c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c6c <uECC_vli_add.isra.0>:
    #define RESUME_SYNTAX ".syntax divided \n\t"
#endif

#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
 8005c6c:	b530      	push	{r4, r5, lr}
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2000      	movs	r0, #0
 8005c72:	c910      	ldmia	r1!, {r4}
 8005c74:	ca20      	ldmia	r2!, {r5}
 8005c76:	1964      	adds	r4, r4, r5
 8005c78:	c310      	stmia	r3!, {r4}
 8005c7a:	c910      	ldmia	r1!, {r4}
 8005c7c:	ca20      	ldmia	r2!, {r5}
 8005c7e:	416c      	adcs	r4, r5
 8005c80:	c310      	stmia	r3!, {r4}
 8005c82:	c910      	ldmia	r1!, {r4}
 8005c84:	ca20      	ldmia	r2!, {r5}
 8005c86:	416c      	adcs	r4, r5
 8005c88:	c310      	stmia	r3!, {r4}
 8005c8a:	c910      	ldmia	r1!, {r4}
 8005c8c:	ca20      	ldmia	r2!, {r5}
 8005c8e:	416c      	adcs	r4, r5
 8005c90:	c310      	stmia	r3!, {r4}
 8005c92:	c910      	ldmia	r1!, {r4}
 8005c94:	ca20      	ldmia	r2!, {r5}
 8005c96:	416c      	adcs	r4, r5
 8005c98:	c310      	stmia	r3!, {r4}
 8005c9a:	c910      	ldmia	r1!, {r4}
 8005c9c:	ca20      	ldmia	r2!, {r5}
 8005c9e:	416c      	adcs	r4, r5
 8005ca0:	c310      	stmia	r3!, {r4}
 8005ca2:	c910      	ldmia	r1!, {r4}
 8005ca4:	ca20      	ldmia	r2!, {r5}
 8005ca6:	416c      	adcs	r4, r5
 8005ca8:	c310      	stmia	r3!, {r4}
 8005caa:	c910      	ldmia	r1!, {r4}
 8005cac:	ca20      	ldmia	r2!, {r5}
 8005cae:	416c      	adcs	r4, r5
 8005cb0:	c310      	stmia	r3!, {r4}
 8005cb2:	4140      	adcs	r0, r0
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
}
 8005cb4:	bd30      	pop	{r4, r5, pc}

08005cb6 <mod_sqrt_default>:

#if uECC_SUPPORT_COMPRESSED_POINT
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8005cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cba:	b090      	sub	sp, #64	; 0x40
 8005cbc:	460e      	mov	r6, r1
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	2100      	movs	r1, #0

#if uECC_SUPPORT_COMPRESSED_POINT
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8005cc2:	4607      	mov	r7, r0
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8005cc4:	4668      	mov	r0, sp
 8005cc6:	f000 fca6 	bl	8006616 <memset>
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8005cca:	2220      	movs	r2, #32
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8005ccc:	2401      	movs	r4, #1
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8005cce:	2100      	movs	r1, #0
 8005cd0:	eb0d 0002 	add.w	r0, sp, r2
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8005cd4:	9400      	str	r4, [sp, #0]
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8005cd6:	f000 fc9e 	bl	8006616 <memset>
    wordcount_t num_words = curve->num_words;
 8005cda:	4631      	mov	r1, r6
    
    /* When curve->p == 3 (mod 4), we can compute
       sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8005cdc:	466a      	mov	r2, sp
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    wordcount_t num_words = curve->num_words;
 8005cde:	f811 5b04 	ldrb.w	r5, [r1], #4
    uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8005ce2:	9408      	str	r4, [sp, #32]
    wordcount_t num_words = curve->num_words;
    
    /* When curve->p == 3 (mod 4), we can compute
       sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8005ce4:	4668      	mov	r0, sp
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8005ce6:	b26d      	sxtb	r5, r5
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    wordcount_t num_words = curve->num_words;
    
    /* When curve->p == 3 (mod 4), we can compute
       sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8005ce8:	f7ff ffc0 	bl	8005c6c <uECC_vli_add.isra.0>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8005cec:	4629      	mov	r1, r5
 8005cee:	4668      	mov	r0, sp
 8005cf0:	f7ff fe56 	bl	80059a0 <uECC_vli_numBits>
 8005cf4:	3801      	subs	r0, #1
 8005cf6:	b284      	uxth	r4, r0
 8005cf8:	fa0f f884 	sxth.w	r8, r4
 8005cfc:	f1b8 0f01 	cmp.w	r8, #1
 8005d00:	dd12      	ble.n	8005d28 <mod_sqrt_default+0x72>
        uECC_vli_modSquare_fast(l_result, l_result, curve);
 8005d02:	a908      	add	r1, sp, #32
 8005d04:	4608      	mov	r0, r1
 8005d06:	4632      	mov	r2, r6
 8005d08:	f7ff ff58 	bl	8005bbc <uECC_vli_modSquare_fast>
        if (uECC_vli_testBit(p1, i)) {
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	4668      	mov	r0, sp
 8005d10:	f7ff fe3c 	bl	800598c <uECC_vli_testBit>
 8005d14:	b128      	cbz	r0, 8005d22 <mod_sqrt_default+0x6c>
            uECC_vli_modMult_fast(l_result, l_result, a, curve);
 8005d16:	a908      	add	r1, sp, #32
 8005d18:	4633      	mov	r3, r6
 8005d1a:	463a      	mov	r2, r7
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	f7ff ff3d 	bl	8005b9c <uECC_vli_modMult_fast>
 8005d22:	3c01      	subs	r4, #1
 8005d24:	b2a4      	uxth	r4, r4
 8005d26:	e7e7      	b.n	8005cf8 <mod_sqrt_default+0x42>
        }
    }
    uECC_vli_set(a, l_result, num_words);
 8005d28:	462a      	mov	r2, r5
 8005d2a:	a908      	add	r1, sp, #32
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f7ff fe59 	bl	80059e4 <uECC_vli_set>
}
 8005d32:	b010      	add	sp, #64	; 0x40
 8005d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d38 <omega_mult_secp256k1>:
    /* add the 2^32 multiple */
    result[4 + num_words_secp256k1] =
        uECC_vli_add(result + 4, result + 4, right, num_words_secp256k1); 
}
#elif uECC_WORD_SIZE == 4
static void omega_mult_secp256k1(uint32_t * result, const uint32_t * right) {
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	460a      	mov	r2, r1
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	1f0d      	subs	r5, r1, #4
 8005d40:	1f06      	subs	r6, r0, #4
 8005d42:	f101 071c 	add.w	r7, r1, #28
    /* Multiply by (2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1). */
    uint32_t carry = 0;
 8005d46:	2300      	movs	r3, #0
    wordcount_t k;
    
    for (k = 0; k < num_words_secp256k1; ++k) {
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
 8005d48:	f240 3ed1 	movw	lr, #977	; 0x3d1
 8005d4c:	f855 cf04 	ldr.w	ip, [r5, #4]!
 8005d50:	4618      	mov	r0, r3
 8005d52:	2100      	movs	r1, #0
 8005d54:	fbee 010c 	umlal	r0, r1, lr, ip
static void omega_mult_secp256k1(uint32_t * result, const uint32_t * right) {
    /* Multiply by (2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1). */
    uint32_t carry = 0;
    wordcount_t k;
    
    for (k = 0; k < num_words_secp256k1; ++k) {
 8005d58:	42af      	cmp	r7, r5
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
        result[k] = p;
 8005d5a:	f846 0f04 	str.w	r0, [r6, #4]!
        carry = p >> 32;
 8005d5e:	460b      	mov	r3, r1
static void omega_mult_secp256k1(uint32_t * result, const uint32_t * right) {
    /* Multiply by (2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1). */
    uint32_t carry = 0;
    wordcount_t k;
    
    for (k = 0; k < num_words_secp256k1; ++k) {
 8005d60:	d1f4      	bne.n	8005d4c <omega_mult_secp256k1+0x14>
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
        result[k] = p;
        carry = p >> 32;
    }
    result[num_words_secp256k1] = carry;
 8005d62:	6221      	str	r1, [r4, #32]
    /* add the 2^32 multiple */
    result[1 + num_words_secp256k1] =
        uECC_vli_add(result + 1, result + 1, right, num_words_secp256k1); 
 8005d64:	1d21      	adds	r1, r4, #4
 8005d66:	4608      	mov	r0, r1
 8005d68:	f7ff ff80 	bl	8005c6c <uECC_vli_add.isra.0>
        result[k] = p;
        carry = p >> 32;
    }
    result[num_words_secp256k1] = carry;
    /* add the 2^32 multiple */
    result[1 + num_words_secp256k1] =
 8005d6c:	6260      	str	r0, [r4, #36]	; 0x24
 8005d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d70 <uECC_vli_sub.isra.1>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
 8005d70:	b530      	push	{r4, r5, lr}
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 8005d72:	2300      	movs	r3, #0
 8005d74:	c910      	ldmia	r1!, {r4}
 8005d76:	ca20      	ldmia	r2!, {r5}
 8005d78:	1b64      	subs	r4, r4, r5
 8005d7a:	c010      	stmia	r0!, {r4}
 8005d7c:	c910      	ldmia	r1!, {r4}
 8005d7e:	ca20      	ldmia	r2!, {r5}
 8005d80:	41ac      	sbcs	r4, r5
 8005d82:	c010      	stmia	r0!, {r4}
 8005d84:	c910      	ldmia	r1!, {r4}
 8005d86:	ca20      	ldmia	r2!, {r5}
 8005d88:	41ac      	sbcs	r4, r5
 8005d8a:	c010      	stmia	r0!, {r4}
 8005d8c:	c910      	ldmia	r1!, {r4}
 8005d8e:	ca20      	ldmia	r2!, {r5}
 8005d90:	41ac      	sbcs	r4, r5
 8005d92:	c010      	stmia	r0!, {r4}
 8005d94:	c910      	ldmia	r1!, {r4}
 8005d96:	ca20      	ldmia	r2!, {r5}
 8005d98:	41ac      	sbcs	r4, r5
 8005d9a:	c010      	stmia	r0!, {r4}
 8005d9c:	c910      	ldmia	r1!, {r4}
 8005d9e:	ca20      	ldmia	r2!, {r5}
 8005da0:	41ac      	sbcs	r4, r5
 8005da2:	c010      	stmia	r0!, {r4}
 8005da4:	c910      	ldmia	r1!, {r4}
 8005da6:	ca20      	ldmia	r2!, {r5}
 8005da8:	41ac      	sbcs	r4, r5
 8005daa:	c010      	stmia	r0!, {r4}
 8005dac:	c910      	ldmia	r1!, {r4}
 8005dae:	ca20      	ldmia	r2!, {r5}
 8005db0:	41ac      	sbcs	r4, r5
 8005db2:	c010      	stmia	r0!, {r4}
 8005db4:	415b      	adcs	r3, r3
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
                      (for some reason...) */
}
 8005db6:	fab3 f083 	clz	r0, r3
 8005dba:	0940      	lsrs	r0, r0, #5
 8005dbc:	bd30      	pop	{r4, r5, pc}
	...

08005dc0 <vli_mmod_fast_secp256k1>:
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words_secp256k1); /* r = x^3 + b */
}

#if (uECC_OPTIMIZATION_LEVEL > 0)
static void omega_mult_secp256k1(uECC_word_t *result, const uECC_word_t *right);
static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	b090      	sub	sp, #64	; 0x40
 8005dc4:	460e      	mov	r6, r1
 8005dc6:	4604      	mov	r4, r0
    uECC_word_t tmp[2 * num_words_secp256k1];
    uECC_word_t carry;
    
    uECC_vli_clear(tmp, num_words_secp256k1);
 8005dc8:	2108      	movs	r1, #8
 8005dca:	4668      	mov	r0, sp
 8005dcc:	f7ff fdc3 	bl	8005956 <uECC_vli_clear>
    uECC_vli_clear(tmp + num_words_secp256k1, num_words_secp256k1);
 8005dd0:	2108      	movs	r1, #8
 8005dd2:	a808      	add	r0, sp, #32
 8005dd4:	f7ff fdbf 	bl	8005956 <uECC_vli_clear>
    
    omega_mult_secp256k1(tmp, product + num_words_secp256k1); /* (Rq, q) = q * c */
 8005dd8:	f106 0120 	add.w	r1, r6, #32
 8005ddc:	4668      	mov	r0, sp
 8005dde:	f7ff ffab 	bl	8005d38 <omega_mult_secp256k1>
    
    carry = uECC_vli_add(result, product, tmp, num_words_secp256k1); /* (C, r) = r + q       */
 8005de2:	466a      	mov	r2, sp
 8005de4:	4631      	mov	r1, r6
 8005de6:	4620      	mov	r0, r4
 8005de8:	f7ff ff40 	bl	8005c6c <uECC_vli_add.isra.0>
    uECC_vli_clear(product, num_words_secp256k1);
 8005dec:	2108      	movs	r1, #8
    uECC_vli_clear(tmp, num_words_secp256k1);
    uECC_vli_clear(tmp + num_words_secp256k1, num_words_secp256k1);
    
    omega_mult_secp256k1(tmp, product + num_words_secp256k1); /* (Rq, q) = q * c */
    
    carry = uECC_vli_add(result, product, tmp, num_words_secp256k1); /* (C, r) = r + q       */
 8005dee:	4605      	mov	r5, r0
    uECC_vli_clear(product, num_words_secp256k1);
 8005df0:	4630      	mov	r0, r6
 8005df2:	f7ff fdb0 	bl	8005956 <uECC_vli_clear>
    omega_mult_secp256k1(product, tmp + num_words_secp256k1); /* Rq*c */
 8005df6:	a908      	add	r1, sp, #32
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7ff ff9d 	bl	8005d38 <omega_mult_secp256k1>
    carry += uECC_vli_add(result, result, product, num_words_secp256k1); /* (C1, r) = r + Rq*c */
 8005dfe:	4632      	mov	r2, r6
 8005e00:	4621      	mov	r1, r4
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7ff ff32 	bl	8005c6c <uECC_vli_add.isra.0>
 8005e08:	4405      	add	r5, r0
    
    while (carry > 0) {
 8005e0a:	b135      	cbz	r5, 8005e1a <vli_mmod_fast_secp256k1+0x5a>
        --carry;
        uECC_vli_sub(result, result, curve_secp256k1.p, num_words_secp256k1);
 8005e0c:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <vli_mmod_fast_secp256k1+0x78>)
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4620      	mov	r0, r4
    uECC_vli_clear(product, num_words_secp256k1);
    omega_mult_secp256k1(product, tmp + num_words_secp256k1); /* Rq*c */
    carry += uECC_vli_add(result, result, product, num_words_secp256k1); /* (C1, r) = r + Rq*c */
    
    while (carry > 0) {
        --carry;
 8005e12:	3d01      	subs	r5, #1
        uECC_vli_sub(result, result, curve_secp256k1.p, num_words_secp256k1);
 8005e14:	f7ff ffac 	bl	8005d70 <uECC_vli_sub.isra.1>
 8005e18:	e7f7      	b.n	8005e0a <vli_mmod_fast_secp256k1+0x4a>
    }
    if (uECC_vli_cmp_unsafe(result, curve_secp256k1.p, num_words_secp256k1) > 0) {
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	4906      	ldr	r1, [pc, #24]	; (8005e38 <vli_mmod_fast_secp256k1+0x78>)
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f7ff fded 	bl	80059fe <uECC_vli_cmp_unsafe>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	dd04      	ble.n	8005e32 <vli_mmod_fast_secp256k1+0x72>
        uECC_vli_sub(result, result, curve_secp256k1.p, num_words_secp256k1);
 8005e28:	4a03      	ldr	r2, [pc, #12]	; (8005e38 <vli_mmod_fast_secp256k1+0x78>)
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f7ff ff9f 	bl	8005d70 <uECC_vli_sub.isra.1>
    }
}
 8005e32:	b010      	add	sp, #64	; 0x40
 8005e34:	bd70      	pop	{r4, r5, r6, pc}
 8005e36:	bf00      	nop
 8005e38:	080070bc 	.word	0x080070bc

08005e3c <uECC_vli_modSub.isra.2>:
    }
}

/* Computes result = (left - right) % mod.
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modSub(uECC_word_t *result,
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4604      	mov	r4, r0
 8005e40:	461d      	mov	r5, r3
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 8005e42:	f7ff ff95 	bl	8005d70 <uECC_vli_sub.isra.1>
    if (l_borrow) {
 8005e46:	b130      	cbz	r0, 8005e56 <uECC_vli_modSub.isra.2+0x1a>
        /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
           we can get the correct result from result + mod (with overflow). */
        uECC_vli_add(result, result, mod, num_words);
 8005e48:	462a      	mov	r2, r5
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4620      	mov	r0, r4
    }
}
 8005e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                                  wordcount_t num_words) {
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    if (l_borrow) {
        /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
           we can get the correct result from result + mod (with overflow). */
        uECC_vli_add(result, result, mod, num_words);
 8005e52:	f7ff bf0b 	b.w	8005c6c <uECC_vli_add.isra.0>
 8005e56:	bd38      	pop	{r3, r4, r5, pc}

08005e58 <XYcZ_add>:
*/
static void XYcZ_add(uECC_word_t * X1,
                     uECC_word_t * Y1,
                     uECC_word_t * X2,
                     uECC_word_t * Y2,
                     uECC_Curve curve) {
 8005e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e5c:	b089      	sub	sp, #36	; 0x24
 8005e5e:	4614      	mov	r4, r2
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 8005e60:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e62:	f815 9b04 	ldrb.w	r9, [r5], #4
*/
static void XYcZ_add(uECC_word_t * X1,
                     uECC_word_t * Y1,
                     uECC_word_t * X2,
                     uECC_word_t * Y2,
                     uECC_Curve curve) {
 8005e66:	461e      	mov	r6, r3
 8005e68:	4607      	mov	r7, r0
 8005e6a:	4688      	mov	r8, r1
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
    
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	4602      	mov	r2, r0
 8005e70:	4621      	mov	r1, r4
 8005e72:	4668      	mov	r0, sp
 8005e74:	f7ff ffe2 	bl	8005e3c <uECC_vli_modSub.isra.2>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 8005e78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e7a:	4669      	mov	r1, sp
 8005e7c:	4668      	mov	r0, sp
 8005e7e:	f7ff fe9d 	bl	8005bbc <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 8005e82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e84:	466a      	mov	r2, sp
 8005e86:	4639      	mov	r1, r7
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff fe87 	bl	8005b9c <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 8005e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e90:	466a      	mov	r2, sp
 8005e92:	4621      	mov	r1, r4
 8005e94:	4620      	mov	r0, r4
 8005e96:	f7ff fe81 	bl	8005b9c <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7ff ffcb 	bl	8005e3c <uECC_vli_modSub.isra.2>
    uECC_vli_modSquare_fast(t5, Y2, curve);                  /* t5 = (y2 - y1)^2 = D */
 8005ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	4668      	mov	r0, sp
 8005eac:	f7ff fe86 	bl	8005bbc <uECC_vli_modSquare_fast>
                                                        
    uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	463a      	mov	r2, r7
 8005eb4:	4669      	mov	r1, sp
 8005eb6:	4668      	mov	r0, sp
 8005eb8:	f7ff ffc0 	bl	8005e3c <uECC_vli_modSub.isra.2>
    uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	4669      	mov	r1, sp
 8005ec2:	4668      	mov	r0, sp
 8005ec4:	f7ff ffba 	bl	8005e3c <uECC_vli_modSub.isra.2>
    uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 8005ec8:	462b      	mov	r3, r5
 8005eca:	463a      	mov	r2, r7
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7ff ffb4 	bl	8005e3c <uECC_vli_modSub.isra.2>
    uECC_vli_modMult_fast(Y1, Y1, X2, curve);                /* t2 = y1*(C - B) */
 8005ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	4641      	mov	r1, r8
 8005eda:	4640      	mov	r0, r8
 8005edc:	f7ff fe5e 	bl	8005b9c <uECC_vli_modMult_fast>
    uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	466a      	mov	r2, sp
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f7ff ffa8 	bl	8005e3c <uECC_vli_modSub.isra.2>
    uECC_vli_modMult_fast(Y2, Y2, X2, curve);                /* t4 = (y2 - y1)*(B - x3) */
 8005eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005eee:	4622      	mov	r2, r4
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff fe52 	bl	8005b9c <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8005ef8:	462b      	mov	r3, r5
 8005efa:	4642      	mov	r2, r8
 8005efc:	4631      	mov	r1, r6
 8005efe:	4630      	mov	r0, r6
 8005f00:	f7ff ff9c 	bl	8005e3c <uECC_vli_modSub.isra.2>
    
    uECC_vli_set(X2, t5, num_words);
 8005f04:	fa4f f289 	sxtb.w	r2, r9
 8005f08:	4669      	mov	r1, sp
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f7ff fd6a 	bl	80059e4 <uECC_vli_set>
}
 8005f10:	b009      	add	sp, #36	; 0x24
 8005f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005f16 <vli_modInv_update>:
#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(uECC_word_t *uv,
                              const uECC_word_t *mod,
                              wordcount_t num_words) {
    uECC_word_t carry = 0;
    if (!EVEN(uv)) {
 8005f16:	6803      	ldr	r3, [r0, #0]
#endif /* uECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(uECC_word_t *uv,
                              const uECC_word_t *mod,
                              wordcount_t num_words) {
 8005f18:	b570      	push	{r4, r5, r6, lr}
    uECC_word_t carry = 0;
    if (!EVEN(uv)) {
 8005f1a:	f013 0501 	ands.w	r5, r3, #1
#endif /* uECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(uECC_word_t *uv,
                              const uECC_word_t *mod,
                              wordcount_t num_words) {
 8005f1e:	4606      	mov	r6, r0
 8005f20:	4614      	mov	r4, r2
    uECC_word_t carry = 0;
    if (!EVEN(uv)) {
 8005f22:	d004      	beq.n	8005f2e <vli_modInv_update+0x18>
        carry = uECC_vli_add(uv, uv, mod, num_words);
 8005f24:	460a      	mov	r2, r1
 8005f26:	4601      	mov	r1, r0
 8005f28:	f7ff fea0 	bl	8005c6c <uECC_vli_add.isra.0>
 8005f2c:	4605      	mov	r5, r0
    }
    uECC_vli_rshift1(uv, num_words);
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7ff fd79 	bl	8005a28 <uECC_vli_rshift1>
    if (carry) {
 8005f36:	b145      	cbz	r5, 8005f4a <vli_modInv_update+0x34>
        uv[num_words - 1] |= HIGH_BIT_SET;
 8005f38:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8005f3c:	3a01      	subs	r2, #1
 8005f3e:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 8005f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f46:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}

08005f4c <uECC_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result,
                                  const uECC_word_t *input,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	460f      	mov	r7, r1
 8005f50:	b0a1      	sub	sp, #132	; 0x84
 8005f52:	4606      	mov	r6, r0
    uECC_word_t a[uECC_MAX_WORDS], b[uECC_MAX_WORDS], u[uECC_MAX_WORDS], v[uECC_MAX_WORDS];
    cmpresult_t cmpResult;
    
    if (uECC_vli_isZero(input, num_words)) {
 8005f54:	4619      	mov	r1, r3
 8005f56:	4638      	mov	r0, r7
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result,
                                  const uECC_word_t *input,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 8005f58:	4615      	mov	r5, r2
 8005f5a:	461c      	mov	r4, r3
    uECC_word_t a[uECC_MAX_WORDS], b[uECC_MAX_WORDS], u[uECC_MAX_WORDS], v[uECC_MAX_WORDS];
    cmpresult_t cmpResult;
    
    if (uECC_vli_isZero(input, num_words)) {
 8005f5c:	f7ff fd07 	bl	800596e <uECC_vli_isZero>
 8005f60:	b120      	cbz	r0, 8005f6c <uECC_vli_modInv+0x20>
        uECC_vli_clear(result, num_words);
 8005f62:	4621      	mov	r1, r4
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff fcf6 	bl	8005956 <uECC_vli_clear>
 8005f6a:	e06f      	b.n	800604c <uECC_vli_modInv+0x100>
        return;
    }

    uECC_vli_set(a, input, num_words);
 8005f6c:	4622      	mov	r2, r4
 8005f6e:	4639      	mov	r1, r7
 8005f70:	4668      	mov	r0, sp
 8005f72:	f7ff fd37 	bl	80059e4 <uECC_vli_set>
    uECC_vli_set(b, mod, num_words);
 8005f76:	4622      	mov	r2, r4
 8005f78:	4629      	mov	r1, r5
 8005f7a:	a808      	add	r0, sp, #32
 8005f7c:	f7ff fd32 	bl	80059e4 <uECC_vli_set>
    uECC_vli_clear(u, num_words);
 8005f80:	4621      	mov	r1, r4
 8005f82:	a810      	add	r0, sp, #64	; 0x40
 8005f84:	f7ff fce7 	bl	8005956 <uECC_vli_clear>
    u[0] = 1;
 8005f88:	2301      	movs	r3, #1
    uECC_vli_clear(v, num_words);
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	a818      	add	r0, sp, #96	; 0x60
    }

    uECC_vli_set(a, input, num_words);
    uECC_vli_set(b, mod, num_words);
    uECC_vli_clear(u, num_words);
    u[0] = 1;
 8005f8e:	9310      	str	r3, [sp, #64]	; 0x40
    uECC_vli_clear(v, num_words);
 8005f90:	f7ff fce1 	bl	8005956 <uECC_vli_clear>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8005f94:	4622      	mov	r2, r4
 8005f96:	a908      	add	r1, sp, #32
 8005f98:	4668      	mov	r0, sp
 8005f9a:	f7ff fd30 	bl	80059fe <uECC_vli_cmp_unsafe>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d04f      	beq.n	8006042 <uECC_vli_modInv+0xf6>
        if (EVEN(a)) {
 8005fa2:	9b00      	ldr	r3, [sp, #0]
 8005fa4:	07da      	lsls	r2, r3, #31
 8005fa6:	d404      	bmi.n	8005fb2 <uECC_vli_modInv+0x66>
            uECC_vli_rshift1(a, num_words);
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4668      	mov	r0, sp
 8005fac:	f7ff fd3c 	bl	8005a28 <uECC_vli_rshift1>
 8005fb0:	e023      	b.n	8005ffa <uECC_vli_modInv+0xae>
            vli_modInv_update(u, mod, num_words);
        } else if (EVEN(b)) {
 8005fb2:	9b08      	ldr	r3, [sp, #32]
 8005fb4:	07db      	lsls	r3, r3, #31
 8005fb6:	d404      	bmi.n	8005fc2 <uECC_vli_modInv+0x76>
            uECC_vli_rshift1(b, num_words);
 8005fb8:	4621      	mov	r1, r4
 8005fba:	a808      	add	r0, sp, #32
 8005fbc:	f7ff fd34 	bl	8005a28 <uECC_vli_rshift1>
 8005fc0:	e039      	b.n	8006036 <uECC_vli_modInv+0xea>
            vli_modInv_update(v, mod, num_words);
        } else if (cmpResult > 0) {
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	dd1d      	ble.n	8006002 <uECC_vli_modInv+0xb6>
            uECC_vli_sub(a, a, b, num_words);
 8005fc6:	aa08      	add	r2, sp, #32
 8005fc8:	4669      	mov	r1, sp
 8005fca:	4668      	mov	r0, sp
 8005fcc:	f7ff fed0 	bl	8005d70 <uECC_vli_sub.isra.1>
            uECC_vli_rshift1(a, num_words);
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4668      	mov	r0, sp
 8005fd4:	f7ff fd28 	bl	8005a28 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 8005fd8:	4622      	mov	r2, r4
 8005fda:	a918      	add	r1, sp, #96	; 0x60
 8005fdc:	a810      	add	r0, sp, #64	; 0x40
 8005fde:	f7ff fd0e 	bl	80059fe <uECC_vli_cmp_unsafe>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	da04      	bge.n	8005ff0 <uECC_vli_modInv+0xa4>
                uECC_vli_add(u, u, mod, num_words);
 8005fe6:	a910      	add	r1, sp, #64	; 0x40
 8005fe8:	462a      	mov	r2, r5
 8005fea:	4608      	mov	r0, r1
 8005fec:	f7ff fe3e 	bl	8005c6c <uECC_vli_add.isra.0>
            }
            uECC_vli_sub(u, u, v, num_words);
 8005ff0:	a910      	add	r1, sp, #64	; 0x40
 8005ff2:	aa18      	add	r2, sp, #96	; 0x60
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	f7ff febb 	bl	8005d70 <uECC_vli_sub.isra.1>
            vli_modInv_update(u, mod, num_words);
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	a810      	add	r0, sp, #64	; 0x40
 8006000:	e01c      	b.n	800603c <uECC_vli_modInv+0xf0>
        } else {
            uECC_vli_sub(b, b, a, num_words);
 8006002:	a908      	add	r1, sp, #32
 8006004:	466a      	mov	r2, sp
 8006006:	4608      	mov	r0, r1
 8006008:	f7ff feb2 	bl	8005d70 <uECC_vli_sub.isra.1>
            uECC_vli_rshift1(b, num_words);
 800600c:	4621      	mov	r1, r4
 800600e:	a808      	add	r0, sp, #32
 8006010:	f7ff fd0a 	bl	8005a28 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 8006014:	4622      	mov	r2, r4
 8006016:	a910      	add	r1, sp, #64	; 0x40
 8006018:	a818      	add	r0, sp, #96	; 0x60
 800601a:	f7ff fcf0 	bl	80059fe <uECC_vli_cmp_unsafe>
 800601e:	2800      	cmp	r0, #0
 8006020:	da04      	bge.n	800602c <uECC_vli_modInv+0xe0>
                uECC_vli_add(v, v, mod, num_words);
 8006022:	a918      	add	r1, sp, #96	; 0x60
 8006024:	462a      	mov	r2, r5
 8006026:	4608      	mov	r0, r1
 8006028:	f7ff fe20 	bl	8005c6c <uECC_vli_add.isra.0>
            }
            uECC_vli_sub(v, v, u, num_words);
 800602c:	a918      	add	r1, sp, #96	; 0x60
 800602e:	aa10      	add	r2, sp, #64	; 0x40
 8006030:	4608      	mov	r0, r1
 8006032:	f7ff fe9d 	bl	8005d70 <uECC_vli_sub.isra.1>
            vli_modInv_update(v, mod, num_words);
 8006036:	4622      	mov	r2, r4
 8006038:	4629      	mov	r1, r5
 800603a:	a818      	add	r0, sp, #96	; 0x60
 800603c:	f7ff ff6b 	bl	8005f16 <vli_modInv_update>
 8006040:	e7a8      	b.n	8005f94 <uECC_vli_modInv+0x48>
        }
    }
    uECC_vli_set(result, u, num_words);
 8006042:	4622      	mov	r2, r4
 8006044:	a910      	add	r1, sp, #64	; 0x40
 8006046:	4630      	mov	r0, r6
 8006048:	f7ff fccc 	bl	80059e4 <uECC_vli_set>
}
 800604c:	b021      	add	sp, #132	; 0x84
 800604e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006050 <uECC_vli_modAdd.constprop.6>:
    
#endif /* uECC_SQUARE_FUNC */

/* Computes result = (left + right) % mod.
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modAdd(uECC_word_t *result,
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4604      	mov	r4, r0
 8006054:	461d      	mov	r5, r3
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8006056:	f7ff fe09 	bl	8005c6c <uECC_vli_add.isra.0>
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 800605a:	b930      	cbnz	r0, 800606a <uECC_vli_modAdd.constprop.6+0x1a>
 800605c:	2208      	movs	r2, #8
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f7ff fccc 	bl	80059fe <uECC_vli_cmp_unsafe>
 8006066:	2801      	cmp	r0, #1
 8006068:	d006      	beq.n	8006078 <uECC_vli_modAdd.constprop.6+0x28>
        /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
        uECC_vli_sub(result, result, mod, num_words);
 800606a:	462a      	mov	r2, r5
 800606c:	4621      	mov	r1, r4
 800606e:	4620      	mov	r0, r4
    }
}
 8006070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
        /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
        uECC_vli_sub(result, result, mod, num_words);
 8006074:	f7ff be7c 	b.w	8005d70 <uECC_vli_sub.isra.1>
 8006078:	bd38      	pop	{r3, r4, r5, pc}

0800607a <x_side_secp256k1>:
    uECC_vli_modMult_fast(Y1, Y1, t4, curve);                   /* t2 = B * (A - x3) */
    uECC_vli_modSub(Y1, Y1, t5, curve->p, num_words_secp256k1); /* t2 = B * (A - x3) - y1^4 = y3 */
}

/* Computes result = x^3 + b. result must not overlap x. */
static void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 800607a:	b570      	push	{r4, r5, r6, lr}
 800607c:	4604      	mov	r4, r0
 800607e:	4615      	mov	r5, r2
 8006080:	460e      	mov	r6, r1
    uECC_vli_modSquare_fast(result, x, curve);                                /* r = x^2 */
 8006082:	f7ff fd9b 	bl	8005bbc <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(result, result, x, curve);                          /* r = x^3 */
 8006086:	462b      	mov	r3, r5
 8006088:	4632      	mov	r2, r6
 800608a:	4621      	mov	r1, r4
 800608c:	4620      	mov	r0, r4
 800608e:	f7ff fd85 	bl	8005b9c <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words_secp256k1); /* r = x^3 + b */
 8006092:	1d2b      	adds	r3, r5, #4
 8006094:	f105 0284 	add.w	r2, r5, #132	; 0x84
 8006098:	4621      	mov	r1, r4
 800609a:	4620      	mov	r0, r4
}
 800609c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

/* Computes result = x^3 + b. result must not overlap x. */
static void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
    uECC_vli_modSquare_fast(result, x, curve);                                /* r = x^2 */
    uECC_vli_modMult_fast(result, result, x, curve);                          /* r = x^3 */
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words_secp256k1); /* r = x^3 + b */
 80060a0:	f7ff bfd6 	b.w	8006050 <uECC_vli_modAdd.constprop.6>

080060a4 <double_jacobian_secp256k1>:

/* Double in place */
static void double_jacobian_secp256k1(uECC_word_t * X1,
                                      uECC_word_t * Y1,
                                      uECC_word_t * Z1,
                                      uECC_Curve curve) {
 80060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a8:	4605      	mov	r5, r0
 80060aa:	b090      	sub	sp, #64	; 0x40
 80060ac:	460c      	mov	r4, r1
    /* t1 = X, t2 = Y, t3 = Z */
    uECC_word_t t4[num_words_secp256k1];
    uECC_word_t t5[num_words_secp256k1];
    
    if (uECC_vli_isZero(Z1, num_words_secp256k1)) {
 80060ae:	4610      	mov	r0, r2
 80060b0:	2108      	movs	r1, #8

/* Double in place */
static void double_jacobian_secp256k1(uECC_word_t * X1,
                                      uECC_word_t * Y1,
                                      uECC_word_t * Z1,
                                      uECC_Curve curve) {
 80060b2:	4617      	mov	r7, r2
 80060b4:	461e      	mov	r6, r3
    /* t1 = X, t2 = Y, t3 = Z */
    uECC_word_t t4[num_words_secp256k1];
    uECC_word_t t5[num_words_secp256k1];
    
    if (uECC_vli_isZero(Z1, num_words_secp256k1)) {
 80060b6:	f7ff fc5a 	bl	800596e <uECC_vli_isZero>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d160      	bne.n	8006180 <double_jacobian_secp256k1+0xdc>
        return;
    }
    
    uECC_vli_modSquare_fast(t5, Y1, curve);   /* t5 = y1^2 */
 80060be:	4632      	mov	r2, r6
 80060c0:	4621      	mov	r1, r4
 80060c2:	a808      	add	r0, sp, #32
 80060c4:	f7ff fd7a 	bl	8005bbc <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t4, X1, t5, curve); /* t4 = x1*y1^2 = A */
 80060c8:	4633      	mov	r3, r6
 80060ca:	aa08      	add	r2, sp, #32
 80060cc:	4629      	mov	r1, r5
 80060ce:	4668      	mov	r0, sp
 80060d0:	f7ff fd64 	bl	8005b9c <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(X1, X1, curve);   /* t1 = x1^2 */
 80060d4:	4632      	mov	r2, r6
 80060d6:	4629      	mov	r1, r5
 80060d8:	4628      	mov	r0, r5
 80060da:	f7ff fd6f 	bl	8005bbc <uECC_vli_modSquare_fast>
    uECC_vli_modSquare_fast(t5, t5, curve);   /* t5 = y1^4 */
 80060de:	a908      	add	r1, sp, #32
 80060e0:	4608      	mov	r0, r1
 80060e2:	4632      	mov	r2, r6
 80060e4:	f7ff fd6a 	bl	8005bbc <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(Z1, Y1, Z1, curve); /* t3 = y1*z1 = z3 */
 80060e8:	463a      	mov	r2, r7
 80060ea:	4638      	mov	r0, r7
 80060ec:	4633      	mov	r3, r6
 80060ee:	4621      	mov	r1, r4
    
    uECC_vli_modAdd(Y1, X1, X1, curve->p, num_words_secp256k1); /* t2 = 2*x1^2 */
 80060f0:	1d37      	adds	r7, r6, #4
    
    uECC_vli_modSquare_fast(t5, Y1, curve);   /* t5 = y1^2 */
    uECC_vli_modMult_fast(t4, X1, t5, curve); /* t4 = x1*y1^2 = A */
    uECC_vli_modSquare_fast(X1, X1, curve);   /* t1 = x1^2 */
    uECC_vli_modSquare_fast(t5, t5, curve);   /* t5 = y1^4 */
    uECC_vli_modMult_fast(Z1, Y1, Z1, curve); /* t3 = y1*z1 = z3 */
 80060f2:	f7ff fd53 	bl	8005b9c <uECC_vli_modMult_fast>
    
    uECC_vli_modAdd(Y1, X1, X1, curve->p, num_words_secp256k1); /* t2 = 2*x1^2 */
 80060f6:	463b      	mov	r3, r7
 80060f8:	462a      	mov	r2, r5
 80060fa:	4629      	mov	r1, r5
 80060fc:	4620      	mov	r0, r4
 80060fe:	f7ff ffa7 	bl	8006050 <uECC_vli_modAdd.constprop.6>
    uECC_vli_modAdd(Y1, Y1, X1, curve->p, num_words_secp256k1); /* t2 = 3*x1^2 */
 8006102:	463b      	mov	r3, r7
 8006104:	462a      	mov	r2, r5
 8006106:	4621      	mov	r1, r4
 8006108:	4620      	mov	r0, r4
 800610a:	f7ff ffa1 	bl	8006050 <uECC_vli_modAdd.constprop.6>
    if (uECC_vli_testBit(Y1, 0)) {
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	07db      	lsls	r3, r3, #31
 8006112:	d50e      	bpl.n	8006132 <double_jacobian_secp256k1+0x8e>
        uECC_word_t carry = uECC_vli_add(Y1, Y1, curve->p, num_words_secp256k1);
 8006114:	463a      	mov	r2, r7
 8006116:	4621      	mov	r1, r4
 8006118:	4620      	mov	r0, r4
 800611a:	f7ff fda7 	bl	8005c6c <uECC_vli_add.isra.0>
        uECC_vli_rshift1(Y1, num_words_secp256k1);
 800611e:	2108      	movs	r1, #8
    uECC_vli_modMult_fast(Z1, Y1, Z1, curve); /* t3 = y1*z1 = z3 */
    
    uECC_vli_modAdd(Y1, X1, X1, curve->p, num_words_secp256k1); /* t2 = 2*x1^2 */
    uECC_vli_modAdd(Y1, Y1, X1, curve->p, num_words_secp256k1); /* t2 = 3*x1^2 */
    if (uECC_vli_testBit(Y1, 0)) {
        uECC_word_t carry = uECC_vli_add(Y1, Y1, curve->p, num_words_secp256k1);
 8006120:	4680      	mov	r8, r0
        uECC_vli_rshift1(Y1, num_words_secp256k1);
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff fc80 	bl	8005a28 <uECC_vli_rshift1>
        Y1[num_words_secp256k1 - 1] |= carry << (uECC_WORD_BITS - 1);
 8006128:	69e0      	ldr	r0, [r4, #28]
 800612a:	ea40 70c8 	orr.w	r0, r0, r8, lsl #31
 800612e:	61e0      	str	r0, [r4, #28]
 8006130:	e003      	b.n	800613a <double_jacobian_secp256k1+0x96>
    } else {
        uECC_vli_rshift1(Y1, num_words_secp256k1);
 8006132:	2108      	movs	r1, #8
 8006134:	4620      	mov	r0, r4
 8006136:	f7ff fc77 	bl	8005a28 <uECC_vli_rshift1>
    }
    /* t2 = 3/2*(x1^2) = B */
    
    uECC_vli_modSquare_fast(X1, Y1, curve);                     /* t1 = B^2 */
 800613a:	4632      	mov	r2, r6
 800613c:	4621      	mov	r1, r4
 800613e:	4628      	mov	r0, r5
 8006140:	f7ff fd3c 	bl	8005bbc <uECC_vli_modSquare_fast>
    uECC_vli_modSub(X1, X1, t4, curve->p, num_words_secp256k1); /* t1 = B^2 - A */
 8006144:	463b      	mov	r3, r7
 8006146:	466a      	mov	r2, sp
 8006148:	4629      	mov	r1, r5
 800614a:	4628      	mov	r0, r5
 800614c:	f7ff fe76 	bl	8005e3c <uECC_vli_modSub.isra.2>
    uECC_vli_modSub(X1, X1, t4, curve->p, num_words_secp256k1); /* t1 = B^2 - 2A = x3 */
 8006150:	463b      	mov	r3, r7
 8006152:	466a      	mov	r2, sp
 8006154:	4629      	mov	r1, r5
 8006156:	4628      	mov	r0, r5
 8006158:	f7ff fe70 	bl	8005e3c <uECC_vli_modSub.isra.2>
    
    uECC_vli_modSub(t4, t4, X1, curve->p, num_words_secp256k1); /* t4 = A - x3 */
 800615c:	463b      	mov	r3, r7
 800615e:	462a      	mov	r2, r5
 8006160:	4669      	mov	r1, sp
 8006162:	4668      	mov	r0, sp
 8006164:	f7ff fe6a 	bl	8005e3c <uECC_vli_modSub.isra.2>
    uECC_vli_modMult_fast(Y1, Y1, t4, curve);                   /* t2 = B * (A - x3) */
 8006168:	4633      	mov	r3, r6
 800616a:	466a      	mov	r2, sp
 800616c:	4621      	mov	r1, r4
 800616e:	4620      	mov	r0, r4
 8006170:	f7ff fd14 	bl	8005b9c <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y1, Y1, t5, curve->p, num_words_secp256k1); /* t2 = B * (A - x3) - y1^4 = y3 */
 8006174:	463b      	mov	r3, r7
 8006176:	aa08      	add	r2, sp, #32
 8006178:	4621      	mov	r1, r4
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff fe5e 	bl	8005e3c <uECC_vli_modSub.isra.2>
}
 8006180:	b010      	add	sp, #64	; 0x40
 8006182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006186 <uECC_set_rng>:
#endif

// PDG: added prototype
int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve);

void uECC_set_rng(uECC_RNG_Function rng_function) {
 8006186:	4770      	bx	lr

08006188 <uECC_secp256k1>:
#if (uECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256k1
#endif
};

uECC_Curve uECC_secp256k1(void) { return &curve_secp256k1; }
 8006188:	4800      	ldr	r0, [pc, #0]	; (800618c <uECC_secp256k1+0x4>)
 800618a:	4770      	bx	lr
 800618c:	080070b8 	.word	0x080070b8

08006190 <uECC_compress>:
    return !EccPoint_isZero(public, curve);
}
#endif

#if uECC_SUPPORT_COMPRESSED_POINT
void uECC_compress(const uint8_t *public_key, uint8_t *compressed, uECC_Curve curve) {
 8006190:	b530      	push	{r4, r5, lr}
    wordcount_t i;
    for (i = 0; i < curve->num_bytes; ++i) {
 8006192:	2400      	movs	r4, #0
 8006194:	b2e3      	uxtb	r3, r4
 8006196:	f992 5001 	ldrsb.w	r5, [r2, #1]
 800619a:	b25b      	sxtb	r3, r3
 800619c:	42ab      	cmp	r3, r5
 800619e:	f104 0401 	add.w	r4, r4, #1
 80061a2:	da03      	bge.n	80061ac <uECC_compress+0x1c>
        compressed[i+1] = public_key[i];
 80061a4:	5cc5      	ldrb	r5, [r0, r3]
 80061a6:	440b      	add	r3, r1
 80061a8:	705d      	strb	r5, [r3, #1]
 80061aa:	e7f3      	b.n	8006194 <uECC_compress+0x4>
    }
    compressed[0] = 2 + (public_key[curve->num_bytes * 2 - 1] & 0x01);
 80061ac:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 80061b0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	3302      	adds	r3, #2
 80061ba:	700b      	strb	r3, [r1, #0]
 80061bc:	bd30      	pop	{r4, r5, pc}

080061be <uECC_decompress>:
}

void uECC_decompress(const uint8_t *compressed, uint8_t *public_key, uECC_Curve curve) {
 80061be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uECC_word_t point[uECC_MAX_WORDS * 2];
    uECC_word_t *y = point + curve->num_words;
 80061c2:	f992 7000 	ldrsb.w	r7, [r2]
        compressed[i+1] = public_key[i];
    }
    compressed[0] = 2 + (public_key[curve->num_bytes * 2 - 1] & 0x01);
}

void uECC_decompress(const uint8_t *compressed, uint8_t *public_key, uECC_Curve curve) {
 80061c6:	b090      	sub	sp, #64	; 0x40
 80061c8:	4614      	mov	r4, r2
 80061ca:	4680      	mov	r8, r0
    uECC_word_t point[uECC_MAX_WORDS * 2];
    uECC_word_t *y = point + curve->num_words;
 80061cc:	eb0d 0587 	add.w	r5, sp, r7, lsl #2
    uECC_vli_bytesToNative(point, compressed + 1, curve->num_bytes);
 80061d0:	f992 2001 	ldrsb.w	r2, [r2, #1]
        compressed[i+1] = public_key[i];
    }
    compressed[0] = 2 + (public_key[curve->num_bytes * 2 - 1] & 0x01);
}

void uECC_decompress(const uint8_t *compressed, uint8_t *public_key, uECC_Curve curve) {
 80061d4:	460e      	mov	r6, r1
    uECC_word_t point[uECC_MAX_WORDS * 2];
    uECC_word_t *y = point + curve->num_words;
    uECC_vli_bytesToNative(point, compressed + 1, curve->num_bytes);
 80061d6:	1c41      	adds	r1, r0, #1
 80061d8:	4668      	mov	r0, sp
 80061da:	f7ff fd26 	bl	8005c2a <uECC_vli_bytesToNative>
    curve->x_side(y, point, curve);
 80061de:	4622      	mov	r2, r4
 80061e0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80061e4:	4669      	mov	r1, sp
 80061e6:	4628      	mov	r0, r5
 80061e8:	4798      	blx	r3
    curve->mod_sqrt(y, curve);
 80061ea:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80061ee:	4621      	mov	r1, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	4798      	blx	r3
    
    if ((y[0] & 0x01) != (compressed[0] & 0x01)) {
 80061f4:	f898 2000 	ldrb.w	r2, [r8]
 80061f8:	f85d 3027 	ldr.w	r3, [sp, r7, lsl #2]
 80061fc:	4053      	eors	r3, r2
 80061fe:	07db      	lsls	r3, r3, #31
 8006200:	d504      	bpl.n	800620c <uECC_decompress+0x4e>
        uECC_vli_sub(y, curve->p, y, curve->num_words);
 8006202:	462a      	mov	r2, r5
 8006204:	1d21      	adds	r1, r4, #4
 8006206:	4628      	mov	r0, r5
 8006208:	f7ff fdb2 	bl	8005d70 <uECC_vli_sub.isra.1>
    }
    
    uECC_vli_nativeToBytes(public_key, curve->num_bytes, point);
 800620c:	466a      	mov	r2, sp
 800620e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8006212:	4630      	mov	r0, r6
 8006214:	f7ff fcf5 	bl	8005c02 <uECC_vli_nativeToBytes>
    uECC_vli_nativeToBytes(public_key + curve->num_bytes, curve->num_bytes, y);
 8006218:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800621c:	462a      	mov	r2, r5
 800621e:	1870      	adds	r0, r6, r1
 8006220:	f7ff fcef 	bl	8005c02 <uECC_vli_nativeToBytes>
}
 8006224:	b010      	add	sp, #64	; 0x40
 8006226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800622a <uECC_verify>:

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
 800622a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622e:	b0fd      	sub	sp, #500	; 0x1f4
 8006230:	461d      	mov	r5, r3
 8006232:	9c86      	ldr	r4, [sp, #536]	; 0x218
 8006234:	9106      	str	r1, [sp, #24]
    const uECC_word_t *points[4];
    const uECC_word_t *point;
    bitcount_t num_bits;
    bitcount_t i;
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 8006236:	7823      	ldrb	r3, [r4, #0]
 8006238:	9302      	str	r3, [sp, #8]
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800623a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
 800623e:	9207      	str	r2, [sp, #28]
    const uECC_word_t *point;
    bitcount_t num_bits;
    bitcount_t i;
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8006240:	331f      	adds	r3, #31
 8006242:	f04f 0a20 	mov.w	sl, #32
 8006246:	fb93 f3fa 	sdiv	r3, r3, sl
 800624a:	b2db      	uxtb	r3, r3
 800624c:	9304      	str	r3, [sp, #16]
    
    rx[num_n_words - 1] = 0;
 800624e:	f99d 7010 	ldrsb.w	r7, [sp, #16]
    r[num_n_words - 1] = 0;
    s[num_n_words - 1] = 0;

    uECC_vli_bytesToNative(public, public_key, curve->num_bytes);
 8006252:	f994 2001 	ldrsb.w	r2, [r4, #1]
    bitcount_t i;
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    
    rx[num_n_words - 1] = 0;
 8006256:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 800625a:	ab24      	add	r3, sp, #144	; 0x90
 800625c:	2600      	movs	r6, #0
 800625e:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
    r[num_n_words - 1] = 0;
 8006262:	ab7c      	add	r3, sp, #496	; 0x1f0
 8006264:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    s[num_n_words - 1] = 0;

    uECC_vli_bytesToNative(public, public_key, curve->num_bytes);
 8006268:	4601      	mov	r1, r0

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
 800626a:	4681      	mov	r9, r0
    
    rx[num_n_words - 1] = 0;
    r[num_n_words - 1] = 0;
    s[num_n_words - 1] = 0;

    uECC_vli_bytesToNative(public, public_key, curve->num_bytes);
 800626c:	a85c      	add	r0, sp, #368	; 0x170
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    
    rx[num_n_words - 1] = 0;
    r[num_n_words - 1] = 0;
 800626e:	f843 6cc0 	str.w	r6, [r3, #-192]
    s[num_n_words - 1] = 0;
 8006272:	f843 6ca0 	str.w	r6, [r3, #-160]

    uECC_vli_bytesToNative(public, public_key, curve->num_bytes);
 8006276:	f7ff fcd8 	bl	8005c2a <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(
        public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 800627a:	f99d b008 	ldrsb.w	fp, [sp, #8]
 800627e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8006282:	9303      	str	r3, [sp, #12]
    rx[num_n_words - 1] = 0;
    r[num_n_words - 1] = 0;
    s[num_n_words - 1] = 0;

    uECC_vli_bytesToNative(public, public_key, curve->num_bytes);
    uECC_vli_bytesToNative(
 8006284:	9a03      	ldr	r2, [sp, #12]
 8006286:	ab5c      	add	r3, sp, #368	; 0x170
 8006288:	4413      	add	r3, r2
 800628a:	f994 2001 	ldrsb.w	r2, [r4, #1]
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	4618      	mov	r0, r3
 8006292:	eb09 0102 	add.w	r1, r9, r2
 8006296:	f7ff fcc8 	bl	8005c2a <uECC_vli_bytesToNative>
        public + num_words, public_key + curve->num_bytes, curve->num_bytes);
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
 800629a:	4629      	mov	r1, r5
 800629c:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80062a0:	a84c      	add	r0, sp, #304	; 0x130
 80062a2:	f7ff fcc2 	bl	8005c2a <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 80062a6:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80062aa:	a854      	add	r0, sp, #336	; 0x150
 80062ac:	18a9      	adds	r1, r5, r2
 80062ae:	f7ff fcbc 	bl	8005c2a <uECC_vli_bytesToNative>
    
    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 80062b2:	4659      	mov	r1, fp
 80062b4:	a84c      	add	r0, sp, #304	; 0x130
 80062b6:	f7ff fb5a 	bl	800596e <uECC_vli_isZero>
 80062ba:	4605      	mov	r5, r0
 80062bc:	2800      	cmp	r0, #0
 80062be:	f040 8171 	bne.w	80065a4 <uECC_verify+0x37a>
 80062c2:	4659      	mov	r1, fp
 80062c4:	a854      	add	r0, sp, #336	; 0x150
 80062c6:	f7ff fb52 	bl	800596e <uECC_vli_isZero>
 80062ca:	4606      	mov	r6, r0
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f040 8167 	bne.w	80065a0 <uECC_verify+0x376>
        return 0;
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 80062d2:	f104 0924 	add.w	r9, r4, #36	; 0x24
 80062d6:	463a      	mov	r2, r7
 80062d8:	a94c      	add	r1, sp, #304	; 0x130
 80062da:	4648      	mov	r0, r9
 80062dc:	f7ff fb8f 	bl	80059fe <uECC_vli_cmp_unsafe>
 80062e0:	2801      	cmp	r0, #1
 80062e2:	f040 815f 	bne.w	80065a4 <uECC_verify+0x37a>
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 80062e6:	463a      	mov	r2, r7
 80062e8:	a954      	add	r1, sp, #336	; 0x150
 80062ea:	4648      	mov	r0, r9
 80062ec:	f7ff fb87 	bl	80059fe <uECC_vli_cmp_unsafe>
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
        return 0;
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 80062f0:	2801      	cmp	r0, #1
 80062f2:	f040 8157 	bne.w	80065a4 <uECC_verify+0x37a>
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
        return 0;
    }

    /* Calculate u1 and u2. */
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 80062f6:	ad1c      	add	r5, sp, #112	; 0x70
 80062f8:	463b      	mov	r3, r7
 80062fa:	464a      	mov	r2, r9
 80062fc:	a954      	add	r1, sp, #336	; 0x150
 80062fe:	4628      	mov	r0, r5
 8006300:	f7ff fe24 	bl	8005f4c <uECC_vli_modInv>

static void bits2int(uECC_word_t *native,
                     const uint8_t *bits,
                     unsigned bits_size,
                     uECC_Curve curve) {
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8006304:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        return 0;
    }

    /* Calculate u1 and u2. */
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
    u1[num_n_words - 1] = 0;
 8006308:	af0c      	add	r7, sp, #48	; 0x30

static void bits2int(uECC_word_t *native,
                     const uint8_t *bits,
                     unsigned bits_size,
                     uECC_Curve curve) {
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 800630a:	1dda      	adds	r2, r3, #7
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800630c:	331f      	adds	r3, #31
 800630e:	fb93 fafa 	sdiv	sl, r3, sl
 8006312:	9b07      	ldr	r3, [sp, #28]
        return 0;
    }

    /* Calculate u1 and u2. */
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
    u1[num_n_words - 1] = 0;
 8006314:	f847 6028 	str.w	r6, [r7, r8, lsl #2]

static void bits2int(uECC_word_t *native,
                     const uint8_t *bits,
                     unsigned bits_size,
                     uECC_Curve curve) {
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8006318:	f04f 0808 	mov.w	r8, #8
 800631c:	fb92 f8f8 	sdiv	r8, r2, r8
 8006320:	4543      	cmp	r3, r8
 8006322:	bf28      	it	cs
 8006324:	4643      	movcs	r3, r8
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    if (bits_size > num_n_bytes) {
        bits_size = num_n_bytes;
    }
    uECC_vli_clear(native, num_n_words);
 8006326:	fa4f fb8a 	sxtb.w	fp, sl
 800632a:	4698      	mov	r8, r3
 800632c:	4659      	mov	r1, fp
 800632e:	4638      	mov	r0, r7
 8006330:	f7ff fb11 	bl	8005956 <uECC_vli_clear>
    uECC_vli_bytesToNative(native, bits, bits_size);
 8006334:	4642      	mov	r2, r8
 8006336:	9906      	ldr	r1, [sp, #24]
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff fc76 	bl	8005c2a <uECC_vli_bytesToNative>
    if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 800633e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8006342:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8006346:	4598      	cmp	r8, r3
 8006348:	d91d      	bls.n	8006386 <uECC_verify+0x15c>
        return;
    }
    int shift = bits_size * 8 - curve->num_n_bits;
 800634a:	ebc3 0808 	rsb	r8, r3, r8
 800634e:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    uECC_word_t carry = 0;
    uECC_word_t *ptr = native + num_n_words;
    while (ptr-- > native) {
        uECC_word_t temp = *ptr;
        *ptr = (temp >> shift) | carry;
        carry = temp << (uECC_WORD_BITS - shift);
 8006352:	f1c8 0120 	rsb	r1, r8, #32
        return;
    }
    int shift = bits_size * 8 - curve->num_n_bits;
    uECC_word_t carry = 0;
    uECC_word_t *ptr = native + num_n_words;
    while (ptr-- > native) {
 8006356:	4557      	cmp	r7, sl
 8006358:	d209      	bcs.n	800636e <uECC_verify+0x144>
        uECC_word_t temp = *ptr;
 800635a:	f85a 2d04 	ldr.w	r2, [sl, #-4]!
        *ptr = (temp >> shift) | carry;
 800635e:	fa22 f308 	lsr.w	r3, r2, r8
 8006362:	431e      	orrs	r6, r3
 8006364:	f8ca 6000 	str.w	r6, [sl]
        carry = temp << (uECC_WORD_BITS - shift);
 8006368:	fa02 f601 	lsl.w	r6, r2, r1
 800636c:	e7f3      	b.n	8006356 <uECC_verify+0x12c>
    }

    /* Reduce mod curve_n */
    if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 800636e:	465a      	mov	r2, fp
 8006370:	4639      	mov	r1, r7
 8006372:	4648      	mov	r0, r9
 8006374:	f7ff fb43 	bl	80059fe <uECC_vli_cmp_unsafe>
 8006378:	2801      	cmp	r0, #1
 800637a:	d004      	beq.n	8006386 <uECC_verify+0x15c>
        uECC_vli_sub(native, native, curve->n, num_n_words);
 800637c:	464a      	mov	r2, r9
 800637e:	4639      	mov	r1, r7
 8006380:	4638      	mov	r0, r7
 8006382:	f7ff fcf5 	bl	8005d70 <uECC_vli_sub.isra.1>

    /* Calculate u1 and u2. */
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
    u1[num_n_words - 1] = 0;
    bits2int(u1, message_hash, hash_size, curve);
    uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 8006386:	f99d 8010 	ldrsb.w	r8, [sp, #16]
 800638a:	f8cd 8000 	str.w	r8, [sp]
 800638e:	4639      	mov	r1, r7
 8006390:	4638      	mov	r0, r7
 8006392:	464b      	mov	r3, r9
 8006394:	462a      	mov	r2, r5
 8006396:	f7ff fb55 	bl	8005a44 <uECC_vli_modMult>
    uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
 800639a:	464b      	mov	r3, r9
 800639c:	f8cd 8000 	str.w	r8, [sp]
 80063a0:	462a      	mov	r2, r5
 80063a2:	a94c      	add	r1, sp, #304	; 0x130
 80063a4:	a814      	add	r0, sp, #80	; 0x50
 80063a6:	f7ff fb4d 	bl	8005a44 <uECC_vli_modMult>
    
    /* Calculate sum = G + Q. */
    uECC_vli_set(sum, public, num_words);
 80063aa:	f99d a008 	ldrsb.w	sl, [sp, #8]
 80063ae:	ae6c      	add	r6, sp, #432	; 0x1b0
 80063b0:	4652      	mov	r2, sl
 80063b2:	4630      	mov	r0, r6
 80063b4:	a95c      	add	r1, sp, #368	; 0x170
 80063b6:	f7ff fb15 	bl	80059e4 <uECC_vli_set>
    uECC_vli_set(sum + num_words, public + num_words, num_words);
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	9905      	ldr	r1, [sp, #20]
 80063be:	eb06 0b03 	add.w	fp, r6, r3
 80063c2:	4652      	mov	r2, sl
 80063c4:	4658      	mov	r0, fp
 80063c6:	f7ff fb0d 	bl	80059e4 <uECC_vli_set>
    uECC_vli_set(tx, curve->G, num_words);
 80063ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063ce:	4652      	mov	r2, sl
 80063d0:	4619      	mov	r1, r3
 80063d2:	a834      	add	r0, sp, #208	; 0xd0
 80063d4:	9305      	str	r3, [sp, #20]
 80063d6:	f7ff fb05 	bl	80059e4 <uECC_vli_set>
    uECC_vli_set(ty, curve->G + num_words, num_words);
 80063da:	9b05      	ldr	r3, [sp, #20]
 80063dc:	9903      	ldr	r1, [sp, #12]
 80063de:	4652      	mov	r2, sl
 80063e0:	1859      	adds	r1, r3, r1
 80063e2:	a83c      	add	r0, sp, #240	; 0xf0
 80063e4:	f7ff fafe 	bl	80059e4 <uECC_vli_set>
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 80063e8:	1d23      	adds	r3, r4, #4
 80063ea:	4631      	mov	r1, r6
 80063ec:	aa34      	add	r2, sp, #208	; 0xd0
 80063ee:	4628      	mov	r0, r5
 80063f0:	9306      	str	r3, [sp, #24]
 80063f2:	f7ff fd23 	bl	8005e3c <uECC_vli_modSub.isra.2>
    XYcZ_add(tx, ty, sum, sum + num_words, curve);
 80063f6:	465b      	mov	r3, fp
 80063f8:	4632      	mov	r2, r6
 80063fa:	a93c      	add	r1, sp, #240	; 0xf0
 80063fc:	a834      	add	r0, sp, #208	; 0xd0
 80063fe:	9400      	str	r4, [sp, #0]
 8006400:	f7ff fd2a 	bl	8005e58 <XYcZ_add>
    uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8006404:	4653      	mov	r3, sl
 8006406:	1d22      	adds	r2, r4, #4
 8006408:	4629      	mov	r1, r5
 800640a:	4628      	mov	r0, r5
 800640c:	f7ff fd9e 	bl	8005f4c <uECC_vli_modInv>
    apply_z(sum, sum + num_words, z, curve);
 8006410:	462a      	mov	r2, r5
 8006412:	4659      	mov	r1, fp
 8006414:	4630      	mov	r0, r6
 8006416:	4623      	mov	r3, r4
 8006418:	f7ff fbd4 	bl	8005bc4 <apply_z>
    
    /* Use Shamir's trick to calculate u1*G + u2*Q */
    points[0] = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	9308      	str	r3, [sp, #32]
    points[1] = curve->G;
 8006420:	9b05      	ldr	r3, [sp, #20]
 8006422:	9309      	str	r3, [sp, #36]	; 0x24
    points[2] = public;
    points[3] = sum;
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 8006424:	4641      	mov	r1, r8
    apply_z(sum, sum + num_words, z, curve);
    
    /* Use Shamir's trick to calculate u1*G + u2*Q */
    points[0] = 0;
    points[1] = curve->G;
    points[2] = public;
 8006426:	ab5c      	add	r3, sp, #368	; 0x170
    points[3] = sum;
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 8006428:	4638      	mov	r0, r7
    apply_z(sum, sum + num_words, z, curve);
    
    /* Use Shamir's trick to calculate u1*G + u2*Q */
    points[0] = 0;
    points[1] = curve->G;
    points[2] = public;
 800642a:	930a      	str	r3, [sp, #40]	; 0x28
    points[3] = sum;
 800642c:	960b      	str	r6, [sp, #44]	; 0x2c
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 800642e:	f7ff fab7 	bl	80059a0 <uECC_vli_numBits>
 8006432:	4641      	mov	r1, r8
 8006434:	4606      	mov	r6, r0
 8006436:	a814      	add	r0, sp, #80	; 0x50
 8006438:	f7ff fab2 	bl	80059a0 <uECC_vli_numBits>
                    uECC_vli_numBits(u2, num_n_words));
    
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 800643c:	42b0      	cmp	r0, r6
 800643e:	bfb8      	it	lt
 8006440:	4630      	movlt	r0, r6
 8006442:	b286      	uxth	r6, r0
 8006444:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8006448:	fa0f f888 	sxth.w	r8, r8
 800644c:	4641      	mov	r1, r8
 800644e:	4638      	mov	r0, r7
 8006450:	f7ff fa9c 	bl	800598c <uECC_vli_testBit>
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 8006454:	4641      	mov	r1, r8
    points[2] = public;
    points[3] = sum;
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
                    uECC_vli_numBits(u2, num_n_words));
    
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8006456:	1c07      	adds	r7, r0, #0
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 8006458:	a814      	add	r0, sp, #80	; 0x50
    points[2] = public;
    points[3] = sum;
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
                    uECC_vli_numBits(u2, num_n_words));
    
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 800645a:	bf18      	it	ne
 800645c:	2701      	movne	r7, #1
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 800645e:	f7ff fa95 	bl	800598c <uECC_vli_testBit>
 8006462:	2800      	cmp	r0, #0
 8006464:	bf14      	ite	ne
 8006466:	2302      	movne	r3, #2
 8006468:	2300      	moveq	r3, #0
    points[2] = public;
    points[3] = sum;
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
                    uECC_vli_numBits(u2, num_n_words));
    
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 800646a:	431f      	orrs	r7, r3
    XYcZ_add(tx, ty, sum, sum + num_words, curve);
    uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
    apply_z(sum, sum + num_words, z, curve);
    
    /* Use Shamir's trick to calculate u1*G + u2*Q */
    points[0] = 0;
 800646c:	f10d 0b20 	add.w	fp, sp, #32
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
                    uECC_vli_numBits(u2, num_n_words));
    
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    uECC_vli_set(rx, point, num_words);
 8006470:	f10d 0890 	add.w	r8, sp, #144	; 0x90
    points[2] = public;
    points[3] = sum;
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
                    uECC_vli_numBits(u2, num_n_words));
    
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8006474:	f85b b027 	ldr.w	fp, [fp, r7, lsl #2]
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    uECC_vli_set(rx, point, num_words);
 8006478:	4652      	mov	r2, sl
 800647a:	4659      	mov	r1, fp
 800647c:	4640      	mov	r0, r8
 800647e:	f7ff fab1 	bl	80059e4 <uECC_vli_set>
    uECC_vli_set(ry, point + num_words, num_words);
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	af2c      	add	r7, sp, #176	; 0xb0
 8006486:	eb0b 0103 	add.w	r1, fp, r3
 800648a:	4652      	mov	r2, sl
 800648c:	4638      	mov	r0, r7
 800648e:	f7ff faa9 	bl	80059e4 <uECC_vli_set>
    uECC_vli_clear(z, num_words);
 8006492:	4651      	mov	r1, sl
 8006494:	4628      	mov	r0, r5
 8006496:	f7ff fa5e 	bl	8005956 <uECC_vli_clear>
    z[0] = 1;

    for (i = num_bits - 2; i >= 0; --i) {
 800649a:	3e02      	subs	r6, #2
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    uECC_vli_set(rx, point, num_words);
    uECC_vli_set(ry, point + num_words, num_words);
    uECC_vli_clear(z, num_words);
    z[0] = 1;
 800649c:	2301      	movs	r3, #1
 800649e:	602b      	str	r3, [r5, #0]

    for (i = num_bits - 2; i >= 0; --i) {
 80064a0:	b2b6      	uxth	r6, r6
 80064a2:	46ba      	mov	sl, r7
 80064a4:	fa0f fb86 	sxth.w	fp, r6
 80064a8:	f1bb 0f00 	cmp.w	fp, #0
 80064ac:	db46      	blt.n	800653c <uECC_verify+0x312>
        uECC_word_t index;
        curve->double_jacobian(rx, ry, z, curve);
 80064ae:	4623      	mov	r3, r4
 80064b0:	462a      	mov	r2, r5
 80064b2:	f8d4 70a4 	ldr.w	r7, [r4, #164]	; 0xa4
 80064b6:	4651      	mov	r1, sl
 80064b8:	4640      	mov	r0, r8
 80064ba:	47b8      	blx	r7
        
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 80064bc:	4659      	mov	r1, fp
 80064be:	a80c      	add	r0, sp, #48	; 0x30
 80064c0:	f7ff fa64 	bl	800598c <uECC_vli_testBit>
 80064c4:	4659      	mov	r1, fp
 80064c6:	1c07      	adds	r7, r0, #0
 80064c8:	a814      	add	r0, sp, #80	; 0x50
 80064ca:	bf18      	it	ne
 80064cc:	2701      	movne	r7, #1
 80064ce:	f7ff fa5d 	bl	800598c <uECC_vli_testBit>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	bf14      	ite	ne
 80064d6:	2302      	movne	r3, #2
 80064d8:	2300      	moveq	r3, #0
        point = points[index];
 80064da:	431f      	orrs	r7, r3
 80064dc:	ab08      	add	r3, sp, #32
 80064de:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
        if (point) {
 80064e2:	f1bb 0f00 	cmp.w	fp, #0
 80064e6:	d026      	beq.n	8006536 <uECC_verify+0x30c>
            uECC_vli_set(tx, point, num_words);
 80064e8:	f99d 7008 	ldrsb.w	r7, [sp, #8]
 80064ec:	4659      	mov	r1, fp
 80064ee:	463a      	mov	r2, r7
 80064f0:	a834      	add	r0, sp, #208	; 0xd0
 80064f2:	f7ff fa77 	bl	80059e4 <uECC_vli_set>
            uECC_vli_set(ty, point + num_words, num_words);
 80064f6:	9b03      	ldr	r3, [sp, #12]
 80064f8:	463a      	mov	r2, r7
 80064fa:	eb0b 0103 	add.w	r1, fp, r3
 80064fe:	a83c      	add	r0, sp, #240	; 0xf0
 8006500:	f7ff fa70 	bl	80059e4 <uECC_vli_set>
            apply_z(tx, ty, z, curve);
 8006504:	4623      	mov	r3, r4
 8006506:	462a      	mov	r2, r5
 8006508:	a93c      	add	r1, sp, #240	; 0xf0
 800650a:	a834      	add	r0, sp, #208	; 0xd0
 800650c:	f7ff fb5a 	bl	8005bc4 <apply_z>
            uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 8006510:	9b06      	ldr	r3, [sp, #24]
 8006512:	aa34      	add	r2, sp, #208	; 0xd0
 8006514:	4641      	mov	r1, r8
 8006516:	a844      	add	r0, sp, #272	; 0x110
 8006518:	f7ff fc90 	bl	8005e3c <uECC_vli_modSub.isra.2>
            XYcZ_add(tx, ty, rx, ry, curve);
 800651c:	4653      	mov	r3, sl
 800651e:	4642      	mov	r2, r8
 8006520:	a93c      	add	r1, sp, #240	; 0xf0
 8006522:	a834      	add	r0, sp, #208	; 0xd0
 8006524:	9400      	str	r4, [sp, #0]
 8006526:	f7ff fc97 	bl	8005e58 <XYcZ_add>
            uECC_vli_modMult_fast(z, z, tz, curve);
 800652a:	4623      	mov	r3, r4
 800652c:	aa44      	add	r2, sp, #272	; 0x110
 800652e:	4629      	mov	r1, r5
 8006530:	4628      	mov	r0, r5
 8006532:	f7ff fb33 	bl	8005b9c <uECC_vli_modMult_fast>
 8006536:	3e01      	subs	r6, #1
 8006538:	b2b6      	uxth	r6, r6
 800653a:	e7b3      	b.n	80064a4 <uECC_verify+0x27a>
        }
    }

    uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 800653c:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8006540:	9a06      	ldr	r2, [sp, #24]
 8006542:	4629      	mov	r1, r5
 8006544:	4628      	mov	r0, r5
 8006546:	f7ff fd01 	bl	8005f4c <uECC_vli_modInv>
    apply_z(rx, ry, z, curve);
 800654a:	4623      	mov	r3, r4
 800654c:	462a      	mov	r2, r5
 800654e:	4651      	mov	r1, sl
 8006550:	4640      	mov	r0, r8
 8006552:	f7ff fb37 	bl	8005bc4 <apply_z>
    
    /* v = x1 (mod n) */
    if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8006556:	f99d 2010 	ldrsb.w	r2, [sp, #16]
 800655a:	4641      	mov	r1, r8
 800655c:	4648      	mov	r0, r9
 800655e:	f7ff fa4e 	bl	80059fe <uECC_vli_cmp_unsafe>
 8006562:	2801      	cmp	r0, #1
 8006564:	d004      	beq.n	8006570 <uECC_verify+0x346>
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
 8006566:	464a      	mov	r2, r9
 8006568:	4641      	mov	r1, r8
 800656a:	4640      	mov	r0, r8
 800656c:	f7ff fc00 	bl	8005d70 <uECC_vli_sub.isra.1>
uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        wordcount_t num_words) {
    uECC_word_t diff = 0;
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 8006570:	9b02      	ldr	r3, [sp, #8]
 8006572:	3b01      	subs	r3, #1
 8006574:	b2db      	uxtb	r3, r3
/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        wordcount_t num_words) {
    uECC_word_t diff = 0;
 8006576:	2600      	movs	r6, #0
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 8006578:	b25a      	sxtb	r2, r3
 800657a:	2a00      	cmp	r2, #0
 800657c:	db0c      	blt.n	8006598 <uECC_verify+0x36e>
        diff |= (left[i] ^ right[i]);
 800657e:	b212      	sxth	r2, r2
 8006580:	a97c      	add	r1, sp, #496	; 0x1f0
 8006582:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8006586:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
 800658a:	f850 2cc0 	ldr.w	r2, [r0, #-192]
 800658e:	3b01      	subs	r3, #1
 8006590:	404a      	eors	r2, r1
 8006592:	4316      	orrs	r6, r2
 8006594:	b2db      	uxtb	r3, r3
 8006596:	e7ef      	b.n	8006578 <uECC_verify+0x34e>
    if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
 8006598:	fab6 f086 	clz	r0, r6
 800659c:	0940      	lsrs	r0, r0, #5
 800659e:	e002      	b.n	80065a6 <uECC_verify+0x37c>
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
    
    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
        return 0;
 80065a0:	4628      	mov	r0, r5
 80065a2:	e000      	b.n	80065a6 <uECC_verify+0x37c>
 80065a4:	4630      	mov	r0, r6
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
}
 80065a6:	b07d      	add	sp, #500	; 0x1f4
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065ac <memcmp>:
 80065ac:	b510      	push	{r4, lr}
 80065ae:	3901      	subs	r1, #1
 80065b0:	4402      	add	r2, r0
 80065b2:	4290      	cmp	r0, r2
 80065b4:	d007      	beq.n	80065c6 <memcmp+0x1a>
 80065b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80065ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80065be:	42a3      	cmp	r3, r4
 80065c0:	d0f7      	beq.n	80065b2 <memcmp+0x6>
 80065c2:	1b18      	subs	r0, r3, r4
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	2000      	movs	r0, #0
 80065c8:	bd10      	pop	{r4, pc}

080065ca <memcpy>:
 80065ca:	b510      	push	{r4, lr}
 80065cc:	1e43      	subs	r3, r0, #1
 80065ce:	440a      	add	r2, r1
 80065d0:	4291      	cmp	r1, r2
 80065d2:	d004      	beq.n	80065de <memcpy+0x14>
 80065d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065dc:	e7f8      	b.n	80065d0 <memcpy+0x6>
 80065de:	bd10      	pop	{r4, pc}

080065e0 <memmove>:
 80065e0:	4288      	cmp	r0, r1
 80065e2:	b510      	push	{r4, lr}
 80065e4:	eb01 0302 	add.w	r3, r1, r2
 80065e8:	d801      	bhi.n	80065ee <memmove+0xe>
 80065ea:	1e42      	subs	r2, r0, #1
 80065ec:	e00b      	b.n	8006606 <memmove+0x26>
 80065ee:	4298      	cmp	r0, r3
 80065f0:	d2fb      	bcs.n	80065ea <memmove+0xa>
 80065f2:	1881      	adds	r1, r0, r2
 80065f4:	1ad2      	subs	r2, r2, r3
 80065f6:	42d3      	cmn	r3, r2
 80065f8:	d004      	beq.n	8006604 <memmove+0x24>
 80065fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006602:	e7f8      	b.n	80065f6 <memmove+0x16>
 8006604:	bd10      	pop	{r4, pc}
 8006606:	4299      	cmp	r1, r3
 8006608:	d004      	beq.n	8006614 <memmove+0x34>
 800660a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006612:	e7f8      	b.n	8006606 <memmove+0x26>
 8006614:	bd10      	pop	{r4, pc}

08006616 <memset>:
 8006616:	4402      	add	r2, r0
 8006618:	4603      	mov	r3, r0
 800661a:	4293      	cmp	r3, r2
 800661c:	d002      	beq.n	8006624 <memset+0xe>
 800661e:	f803 1b01 	strb.w	r1, [r3], #1
 8006622:	e7fa      	b.n	800661a <memset+0x4>
 8006624:	4770      	bx	lr

08006626 <strlcpy>:
 8006626:	b510      	push	{r4, lr}
 8006628:	460b      	mov	r3, r1
 800662a:	b152      	cbz	r2, 8006642 <strlcpy+0x1c>
 800662c:	3a01      	subs	r2, #1
 800662e:	d006      	beq.n	800663e <strlcpy+0x18>
 8006630:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006634:	f800 4b01 	strb.w	r4, [r0], #1
 8006638:	2c00      	cmp	r4, #0
 800663a:	d1f7      	bne.n	800662c <strlcpy+0x6>
 800663c:	e005      	b.n	800664a <strlcpy+0x24>
 800663e:	2200      	movs	r2, #0
 8006640:	7002      	strb	r2, [r0, #0]
 8006642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006646:	2a00      	cmp	r2, #0
 8006648:	d1fb      	bne.n	8006642 <strlcpy+0x1c>
 800664a:	1a58      	subs	r0, r3, r1
 800664c:	3801      	subs	r0, #1
 800664e:	bd10      	pop	{r4, pc}

08006650 <strlen>:
 8006650:	4603      	mov	r3, r0
 8006652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006656:	2a00      	cmp	r2, #0
 8006658:	d1fb      	bne.n	8006652 <strlen+0x2>
 800665a:	1a18      	subs	r0, r3, r0
 800665c:	3801      	subs	r0, #1
 800665e:	4770      	bx	lr

08006660 <__flash_burn_veneer>:
 8006660:	b401      	push	{r0}
 8006662:	4802      	ldr	r0, [pc, #8]	; (800666c <__flash_burn_veneer+0xc>)
 8006664:	4684      	mov	ip, r0
 8006666:	bc01      	pop	{r0}
 8006668:	4760      	bx	ip
 800666a:	bf00      	nop
 800666c:	10006001 	.word	0x10006001

08006670 <__flash_page_erase_veneer>:
 8006670:	b401      	push	{r0}
 8006672:	4802      	ldr	r0, [pc, #8]	; (800667c <__flash_page_erase_veneer+0xc>)
 8006674:	4684      	mov	ip, r0
 8006676:	bc01      	pop	{r0}
 8006678:	4760      	bx	ip
 800667a:	bf00      	nop
 800667c:	10006111 	.word	0x10006111
 8006680:	6f636e69 	.word	0x6f636e69
 8006684:	006e      	.short	0x006e
 8006686:	7361      	.short	0x7361
 8006688:	74726573 	.word	0x74726573
 800668c:	6f6f4200 	.word	0x6f6f4200
 8006690:	46443274 	.word	0x46443274
 8006694:	524c0055 	.word	0x524c0055
	...

08006699 <AHBPrescTable>:
	...
 80066a1:	04030201 09080706                       ........

080066a9 <APBPrescTable>:
 80066a9:	00000000 04030201 a0000000                       ...........

080066b4 <MSIRangeTable>:
 80066b4:	000186a0 00030d40 00061a80 000c3500     ....@........5..
 80066c4:	000f4240 001e8480 003d0900 007a1200     @B........=...z.
 80066d4:	00f42400 016e3600 01e84800 02dc6c00     .$...6n..H...l..
 80066e4:	00000150 00000001 00000000 00000001     P...............
 80066f4:	00000000                                ....

080066f8 <before_show>:
 80066f8:	227f0021 00210700                                !.."..

080066fe <setup.7335>:
 80066fe:	227f0021 262e0707                                !.."..

08006704 <animate.7336>:
 8006704:	0700262e ff000707 0020ae2f                       .&....../

0800670d <reset_commands>:
 800670d:	400020ae c83fa8a1 12da00d3 f1d980d5     . .@..?.........
 800671d:	ff8130db 148da6a4 35007faf                       .0.......

08006726 <screen_logout>:
 8006726:	0035007f c0078081 00064081 6f808082     ..5......@.....o
 8006736:	ffff8200 c0070006 c7c3c189 f0f8dcce     ................
 8006746:	0068c0e0 07ff7f82 88000680 1c387060     ..h.........`p8.
 8006756:	0103070e 0050007f 0006f881 40048081     ......P........@
 8006766:	80008083 80844003 048000c0 00808340     .....@......@...
 8006776:	840004c0 f04000c0 00094003 0803f881     ......@..@......
 8006786:	00e01084 84400480 80c00080 80834003     ......@......@..
 8006796:	40048000 00348081 10051f81 040f0082     ...@..4.........
 80067a6:	000f8310 84880347 0f007f84 0f831004     ....G...........
 80067b6:	10030f00 001f0885 10030f00 00080881     ................
 80067c6:	10031f81 00070884 8310040f 041f000f     ................
 80067d6:	001f8300 8112040f 1b007f13 007f0000              ..............

080067e4 <screen_verify>:
 80067e4:	0038007f 60c0808a 10303060 03181810     ..8....``00.....
 80067f4:	20308510 6b80c060 fce08400 0007030f     ..0 `..k........
 8006804:	07ffff82 07018400 0068e0fc 3c0f0187     ..........h....<
 8006814:	8080c060 018c0005 00060703 70c08080     `..............p
 8006824:	6d010f38 01018e00 02020303 02020606     8..m............
 8006834:	01010303 f881005a f8830004 40048000     ....Z..........@
 8006844:	c0008084 86400380 40000080 0004d840     ......@....@@...
 8006854:	0803f081 c0001083 c0860004 40400000     ..............@@
 8006864:	820003d8 400380c0 80008083 80824003     .......@.....@..
 8006874:	880042c0 18180601 0f000106 13831204     .B..............
 8006884:	00091f00 00031f81 031f0182 00008301     ................
 8006894:	82880347 00047f84 00031f81 00041f81     G...............
 80068a4:	47001f83 84828803 22007f7f 007f0000              ...G......."..

080068b2 <screen_upgrading>:
 80068b2:	007f007f 0024007f 0004f881 c000f884     ......$.........
 80068c2:	83400380 03800080 c0808540 0380c000     ..@.....@.......
 80068d2:	00808340 83400400 03800080 f8808740     @.....@.....@...
 80068e2:	40400000 820003d8 400380c0 80008083     ..@@.......@....
 80068f2:	80824003 810042c0 8410040f 047f000f     .@...B..........
 8006902:	07830803 88034700 007f8484 8100061f     .....G..........
 8006912:	8411030e 0f001f09 08821003 8100041f     ................
 8006922:	8100031f 8300041f 0347001f 7f848288     ..........G.....
 8006932:	007f007f 0024007f 7f007f00                       ......$..

0800693b <screen_fatal>:
 800693b:	007f007f 0036007f 90fc9089 0090fc90     ......6.........
 800694b:	4203fc40 f000048b 00c00000 fc4000f0     @..B..........@.
 800695b:	04814203 03840066 03030000 05078100     .B..f...........
 800696b:	04038900 03040302 7f070000 7f007f00     ................
 800697b:	00003900                                .9..

0800697f <screen_blankish>:
 800697f:	007f007f 0034007f 000d8081 000d8081     ......4.........
 800698f:	00628081 01030183 0183000b 000b0103     ..b.............
 800699f:	01030183 007f007f 0034007f 7f007f00              ..........4..

080069ac <screen_dfu>:
 80069ac:	007f007f 0039007f 0103ff81 00fc0284     ......9.........
 80069bc:	831104ff 04ff0001 6cff8100 03038100     ...........l....
 80069cc:	00018402 00060300 02040181 007f0181     ................
 80069dc:	007f007f 7f000039                                ....9..

080069e3 <screen_replug>:
 80069e3:	007f007f 002f007f 0804f881 8000f083     ....../.........
 80069f3:	80844004 0380c000 00808440 0005f800     .@......@.......
 8006a03:	0004c081 8000c083 80824003 880057c0     .........@...W..
 8006a13:	0503011f 0f001009 13841204 03047f00     ................
 8006a23:	00078408 10030f00 0f000083 08841003     ................
 8006a33:	0347001f 7f848288 007f007f 002e007f     ..G.............
	...

08006a44 <screen_brick>:
 8006a44:	007f007f 002b007f 8803f881 0000f085     ......+.........
 8006a54:	400380c0 00008086 03d84040 04808100     ...@....@@......
 8006a64:	00808a40 800000f8 80000040 80834004     @.......@....@..
 8006a74:	40038000 50f88082 041f8100 000f8310     ...@...P........
 8006a84:	8100091f 8100031f 8a10040f 021f0008     ................
 8006a94:	10080403 12040f00 0f001383 08821003     ................
 8006aa4:	7f007f1f 2b007f00 007f0000                       .......+..

08006aae <screen_devmode>:
 8006aae:	002e007f 00888003 98f09000 1540d0a0     ..............@.
 8006abe:	80808400 180330e0 18031081 80e03084     .....0.......0..
 8006ace:	89004480 0c18f0c0 191373e6 89010519     .D.......s......
 8006ade:	07030100 000039ef 92001401 f9cdc702     .....9..........
 8006aee:	783818c8 78381838 f9c81838 0043e7ed     ..8x8.8x8.....C.
 8006afe:	e03f0f85 000a0180 70c08085 0016023f     ..?........p?...
 8006b0e:	07fcf883 7e870304 640464fc 03047efc     .......~.d.d.~..
 8006b1e:	f0fc0783 01840044 06020301 03028306     ....D...........
 8006b2e:	82001a01 04060703 04030781 04060781     ................
 8006b3e:	2a030782 03f88100 e0108408 40040000     ...*...........@
 8006b4e:	c0008084 83400380 03800080 c0808440     ......@.....@...
 8006b5e:	40048000 c0008084 81400380 81000380     ...@......@.....
 8006b6e:	81000bf8 830804f0 04000030 00808340     ........0...@...
 8006b7e:	840004c0 f04000c0 00034003 d8404083     ......@..@...@@.
 8006b8e:	80810003 80844004 0380c000 03808140     .....@......@...
 8006b9e:	14f88100 031f8100 07088410 11030e00     ................
 8006bae:	001f0984 8300041f 0347001f 7f848488     ..........G.....
 8006bbe:	12040f00 1f001383 1b810008 0f81000b     ................
 8006bce:	0c831004 11030e00 001f0984 8510030f     ................
 8006bde:	00001f08 8110030f 81000408 8100031f     ................
 8006bee:	8310040f 041f000f 031f8100 7f1b8100     ................
 8006bfe:	00000c00                                ....

08006c02 <screen_mitm>:
 8006c02:	007f007f 0043007f 0c30c083 01060073     ......C...0.s...
 8006c12:	0c300084 06000403 7f007f01 39007f00     ..0............9
	...

08006c24 <screen_downgrade>:
 8006c24:	007f007f 0021007f 0803f881 00e01084     ......!.........
 8006c34:	83400480 04c00080 00c08400 400380c0     ..@............@
 8006c44:	80008083 80854003 80c000c0 80834003     .....@.......@..
 8006c54:	40040000 80008083 80844003 048000f8     ...@.....@......
 8006c64:	00808740 48880808 81003c30 8410031f     @......H0<......
 8006c74:	0f000708 0f8a1004 08100f00 000f100f     ................
 8006c84:	8300041f 0347001f 7f848488 00061f00     ......G.........
 8006c94:	11030e81 001f0984 8410030f 0f001f08     ................
 8006ca4:	13841204 7f1b0000 7f007f00 00002400     .............$..

08006cb4 <screen_corrupt>:
 8006cb4:	007f007f 0024007f 8804f881 00000886     ......$.........
 8006cc4:	03d84040 80c08200 808a4003 4040c000     @@.......@....@@
 8006cd4:	00804080 830004c0 040000c0 00808440     .@..........@...
 8006ce4:	400380c0 80008083 80874004 88080800     ...@.....@......
 8006cf4:	00433048 00091f81 00031f81 00061f81     H0C.............
 8006d04:	00001f8f 001f0007 0f08100f 0e000f10     ................
 8006d14:	09841103 061f001f 040f8100 00138412     ................
 8006d24:	007f1b00 007f007f b4000028                       ........(..

08006d2f <approved_pubkeys>:
 8006d2f:	2641cbb4 f36ce1f7 71b4f28f 0123fb1d     ..A&..l....q..#.
 8006d3f:	66d6760d 6ca38aa7 f6f9539b 0518587b     .v.f...l.S..{X..
 8006d4f:	e93b0b58 b89fc431 113c0444 470f0896     X.;.1...D.<....G
 8006d5f:	37ed2581 4a9e237a 3818b7af da0438ba     .%.7z#.J...8.8..
 8006d6f:	1dc8a2d6 df5e811c 6d290ca6 8d8f57b8     ......^...)m.W..
 8006d7f:	9269295e c178d1ce 31d7207b b596a17b     ^)i...x.{ .1{...
 8006d8f:	0c1bef3d c31a79aa c8c45845 ffeb2d8a     =....y..EX...-..
 8006d9f:	01829bfe bc5e5f87 4fe5a596 9ffe68c7     ....._^....O.h..
 8006daf:	0166ef42 95cfc456 38f0b5f4 c5261164     B.f.V......8d.&.
 8006dbf:	66c13999 14120632 689c254c bad38c35     .9.f2...L%.h5...
 8006dcf:	8cde7824 6cdfab52 7809bfb8 3a63bb03     $x..R..l...x..c:
 8006ddf:	0ed90111 8f737aa4 7f3b18bf c87b0af0     .....zs...;...{.
 8006def:	56546067 c5ec0c82 0882bc1d ef39c116     g`TV..........9.
 8006dff:	32babff5 e35fce7c d7621e74 4cc5fce9     ...2|._.t.b....L
 8006e0f:	8d11e88a 13c2adc3 2a4f2992 a4f8d2ea     .........)O*....
 8006e1f:	fe7cd5c4 3b450512 07598954 88d7d6da     ..|...E;T.Y.....
 8006e2f:	37cfb143 1f897cd2 f3acfe5b 95fc33ba     C..7.|..[....3..
 8006e3f:	dde7d981 14ef9525 bb97efdd a7d8f333     ....%.......3...
 8006e4f:	977a2b34 73aab3ba 32419de7 17a1fcd8     4+z....s..A2....
 8006e5f:	fe0bb566 89214063 8e7b92c9 590bdf72     f...c@!...{.r..Y
	...
 8006eaf:	00014108 00000000 00000000 ee000000     .A..............
 8006ebf:	6f432301 69727970 20746867 38313032     .#Copyright 2018
 8006ecf:	7962202d 696f4320 74696b6e 6e492065     - by Coinkite In
 8006edf:	77002e63 6c66206b 206f6e00 00726573     c..wk fl.no ser.

08006eef <config_2.8503>:
 8006eef:	00001502 003c0000 01bc005c 01bc01fc     ......<.\.......
 8006eff:	019c019c 03dc01fc 07dc03dc 003c019c     ..............<.
 8006f0f:	01dc01fc 00e1003c                                ....<.

08006f15 <config_1.8502>:
 8006f15:	006100e1 2d8f0000 438f808f 430080af     ..a....-...C...C
 8006f25:	478f4300 43c343c3 470047c7 4d8f0000     .C.G.C.C.G.G...M
 8006f35:	0000438f ffffffff 00000000 ffffffff     .C..............
	...
 8006f4d:	000000f0 00000000 00000000 01000000     ................
 8006f5d:	12000000 00000000 01000000 08000000     ................
 8006f6d:	32000000                                         ...

08006f70 <version_string>:
 8006f70:	2e302e32 69742031 323d656d 30303230     2.0.1 time=20200
 8006f80:	2e323136 32333830 67203232 6d3d7469     612.083222 git=m
 8006f90:	65747361 30614072 33393132 45532062     aster@a02193b SE
 8006fa0:	0000363d 00000200 00000001 00000000     =6..............
 8006fb0:	00000001 00000000                       ........

08006fb8 <k>:
 8006fb8:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
 8006fc8:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
 8006fd8:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
 8006fe8:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
 8006ff8:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
 8007008:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
 8007018:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
 8007028:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
 8007038:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
 8007048:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
 8007058:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
 8007068:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
 8007078:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
 8007088:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
 8007098:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
 80070a8:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

080070b8 <curve_secp256k1>:
 80070b8:	01002008 fffffc2f fffffffe ffffffff     . ../...........
 80070c8:	ffffffff ffffffff ffffffff ffffffff     ................
 80070d8:	ffffffff d0364141 bfd25e8c af48a03b     ....AA6..^..;.H.
 80070e8:	baaedce6 fffffffe ffffffff ffffffff     ................
 80070f8:	ffffffff 16f81798 59f2815b 2dce28d9     ........[..Y.(.-
 8007108:	029bfcdb ce870b07 55a06295 f9dcbbac     .........b.U....
 8007118:	79be667e fb10d4b8 9c47d08f a6855419     ~f.y......G..T..
 8007128:	fd17b448 0e1108a8 5da4fbfc 26a3c465     H..........]e..&
 8007138:	483ada77 00000007 00000000 00000000     w.:H............
	...
 800715c:	080060a5 08005cb7 0800607b 08005dc1     .`...\..{`...]..

Disassembly of section .relocate:

10006000 <flash_burn>:
//
    __attribute__((section(".ramfunc")))
    __attribute__((noinline))
    int
flash_burn(uint32_t address, uint64_t val)
{
10006000:	b530      	push	{r4, r5, lr}
    __attribute__((section(".ramfunc")))
    __attribute__((always_inline))
    static inline uint32_t
_flash_wait_done(void)
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
10006002:	4d42      	ldr	r5, [pc, #264]	; (1000610c <BL_SRAM_BASE+0x10c>)
10006004:	692c      	ldr	r4, [r5, #16]
10006006:	4941      	ldr	r1, [pc, #260]	; (1000610c <BL_SRAM_BASE+0x10c>)
10006008:	03e4      	lsls	r4, r4, #15
1000600a:	d4fb      	bmi.n	10006004 <flash_burn+0x4>
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
1000600c:	690c      	ldr	r4, [r1, #16]
1000600e:	07a5      	lsls	r5, r4, #30
10006010:	d41e      	bmi.n	10006050 <flash_burn+0x50>
10006012:	690c      	ldr	r4, [r1, #16]
10006014:	0724      	lsls	r4, r4, #28
10006016:	d41b      	bmi.n	10006050 <flash_burn+0x50>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
10006018:	690c      	ldr	r4, [r1, #16]
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
1000601a:	06e5      	lsls	r5, r4, #27
1000601c:	d418      	bmi.n	10006050 <flash_burn+0x50>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
1000601e:	690c      	ldr	r4, [r1, #16]
10006020:	06a4      	lsls	r4, r4, #26
10006022:	d415      	bmi.n	10006050 <flash_burn+0x50>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
10006024:	690c      	ldr	r4, [r1, #16]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
10006026:	0665      	lsls	r5, r4, #25
10006028:	d412      	bmi.n	10006050 <flash_burn+0x50>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
1000602a:	690c      	ldr	r4, [r1, #16]
1000602c:	0624      	lsls	r4, r4, #24
1000602e:	d40f      	bmi.n	10006050 <flash_burn+0x50>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
10006030:	690c      	ldr	r4, [r1, #16]
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
10006032:	05e5      	lsls	r5, r4, #23
10006034:	d40c      	bmi.n	10006050 <flash_burn+0x50>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
10006036:	690c      	ldr	r4, [r1, #16]
10006038:	05a4      	lsls	r4, r4, #22
1000603a:	d409      	bmi.n	10006050 <flash_burn+0x50>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
1000603c:	6909      	ldr	r1, [r1, #16]
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
1000603e:	0449      	lsls	r1, r1, #17
10006040:	d406      	bmi.n	10006050 <flash_burn+0x50>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
10006042:	4932      	ldr	r1, [pc, #200]	; (1000610c <BL_SRAM_BASE+0x10c>)
10006044:	690c      	ldr	r4, [r1, #16]
10006046:	0425      	lsls	r5, r4, #16
10006048:	d402      	bmi.n	10006050 <flash_burn+0x50>
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY))
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
1000604a:	698c      	ldr	r4, [r1, #24]

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
1000604c:	2c00      	cmp	r4, #0
1000604e:	da02      	bge.n	10006056 <flash_burn+0x56>
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
#endif
    ) {
        // Save an error code; somewhat random
        return FLASH->SR;
10006050:	492e      	ldr	r1, [pc, #184]	; (1000610c <BL_SRAM_BASE+0x10c>)
10006052:	6909      	ldr	r1, [r1, #16]
10006054:	e004      	b.n	10006060 <flash_burn+0x60>
    }

    // Check FLASH End of Operation flag
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
10006056:	690c      	ldr	r4, [r1, #16]
10006058:	07e4      	lsls	r4, r4, #31
        // Clear FLASH End of Operation pending bit
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
1000605a:	bf44      	itt	mi
1000605c:	2401      	movmi	r4, #1
1000605e:	610c      	strmi	r4, [r1, #16]

    // just in case?
    _flash_wait_done();

    // clear any and all errors
    FLASH->SR = FLASH->SR & 0xffff;
10006060:	492a      	ldr	r1, [pc, #168]	; (1000610c <BL_SRAM_BASE+0x10c>)
10006062:	690c      	ldr	r4, [r1, #16]
10006064:	b2a4      	uxth	r4, r4
10006066:	610c      	str	r4, [r1, #16]

    // disable data cache
    __HAL_FLASH_DATA_CACHE_DISABLE();
10006068:	680c      	ldr	r4, [r1, #0]
1000606a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
1000606e:	600c      	str	r4, [r1, #0]

    // Program double-word (64-bit) at a specified address
    // see FLASH_Program_DoubleWord(Address, Data);

    // Set PG bit
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));      // added
10006070:	694c      	ldr	r4, [r1, #20]
10006072:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
10006076:	f024 0407 	bic.w	r4, r4, #7
1000607a:	614c      	str	r4, [r1, #20]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
1000607c:	694c      	ldr	r4, [r1, #20]
1000607e:	f044 0401 	orr.w	r4, r4, #1
10006082:	614c      	str	r4, [r1, #20]

    // Program a double word
    *(__IO uint32_t *)(address) = (uint32_t)val;
10006084:	6002      	str	r2, [r0, #0]
    *(__IO uint32_t *)(address+4) = (uint32_t)(val >> 32);
10006086:	6043      	str	r3, [r0, #4]
    __attribute__((section(".ramfunc")))
    __attribute__((always_inline))
    static inline uint32_t
_flash_wait_done(void)
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
10006088:	690a      	ldr	r2, [r1, #16]
1000608a:	4b20      	ldr	r3, [pc, #128]	; (1000610c <BL_SRAM_BASE+0x10c>)
1000608c:	03d0      	lsls	r0, r2, #15
1000608e:	d4fb      	bmi.n	10006088 <flash_burn+0x88>
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
10006090:	691a      	ldr	r2, [r3, #16]
10006092:	0792      	lsls	r2, r2, #30
10006094:	d41e      	bmi.n	100060d4 <flash_burn+0xd4>
10006096:	691a      	ldr	r2, [r3, #16]
10006098:	0715      	lsls	r5, r2, #28
1000609a:	d41b      	bmi.n	100060d4 <flash_burn+0xd4>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
1000609c:	691a      	ldr	r2, [r3, #16]
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
1000609e:	06d4      	lsls	r4, r2, #27
100060a0:	d418      	bmi.n	100060d4 <flash_burn+0xd4>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
100060a2:	691a      	ldr	r2, [r3, #16]
100060a4:	0690      	lsls	r0, r2, #26
100060a6:	d415      	bmi.n	100060d4 <flash_burn+0xd4>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
100060a8:	691a      	ldr	r2, [r3, #16]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
100060aa:	0651      	lsls	r1, r2, #25
100060ac:	d412      	bmi.n	100060d4 <flash_burn+0xd4>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
100060ae:	691a      	ldr	r2, [r3, #16]
100060b0:	0612      	lsls	r2, r2, #24
100060b2:	d40f      	bmi.n	100060d4 <flash_burn+0xd4>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
100060b4:	691a      	ldr	r2, [r3, #16]
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
100060b6:	05d5      	lsls	r5, r2, #23
100060b8:	d40c      	bmi.n	100060d4 <flash_burn+0xd4>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
100060ba:	691a      	ldr	r2, [r3, #16]
100060bc:	0594      	lsls	r4, r2, #22
100060be:	d409      	bmi.n	100060d4 <flash_burn+0xd4>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
100060c0:	691b      	ldr	r3, [r3, #16]
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
100060c2:	0458      	lsls	r0, r3, #17
100060c4:	d406      	bmi.n	100060d4 <flash_burn+0xd4>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
100060c6:	4b11      	ldr	r3, [pc, #68]	; (1000610c <BL_SRAM_BASE+0x10c>)
100060c8:	691a      	ldr	r2, [r3, #16]
100060ca:	0411      	lsls	r1, r2, #16
100060cc:	d402      	bmi.n	100060d4 <flash_burn+0xd4>
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY))
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
100060ce:	699a      	ldr	r2, [r3, #24]

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
100060d0:	2a00      	cmp	r2, #0
100060d2:	da03      	bge.n	100060dc <flash_burn+0xdc>
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
#endif
    ) {
        // Save an error code; somewhat random
        return FLASH->SR;
100060d4:	4b0d      	ldr	r3, [pc, #52]	; (1000610c <BL_SRAM_BASE+0x10c>)
100060d6:	6918      	ldr	r0, [r3, #16]
    // Program a double word
    *(__IO uint32_t *)(address) = (uint32_t)val;
    *(__IO uint32_t *)(address+4) = (uint32_t)(val >> 32);

    rv = _flash_wait_done();
    if(rv) return rv;
100060d8:	b128      	cbz	r0, 100060e6 <flash_burn+0xe6>
100060da:	bd30      	pop	{r4, r5, pc}
        // Save an error code; somewhat random
        return FLASH->SR;
    }

    // Check FLASH End of Operation flag
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
100060dc:	691a      	ldr	r2, [r3, #16]
100060de:	07d2      	lsls	r2, r2, #31
        // Clear FLASH End of Operation pending bit
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
100060e0:	bf44      	itt	mi
100060e2:	2201      	movmi	r2, #1
100060e4:	611a      	strmi	r2, [r3, #16]

    rv = _flash_wait_done();
    if(rv) return rv;

    // If the program operation is completed, disable the PG or FSTPG Bit
    CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
100060e6:	4b09      	ldr	r3, [pc, #36]	; (1000610c <BL_SRAM_BASE+0x10c>)
100060e8:	695a      	ldr	r2, [r3, #20]
100060ea:	f022 0201 	bic.w	r2, r2, #1
100060ee:	615a      	str	r2, [r3, #20]

    // Flush the caches to be sure of data consistency, and reenable.
    __HAL_FLASH_DATA_CACHE_RESET();
100060f0:	681a      	ldr	r2, [r3, #0]
100060f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
100060f6:	601a      	str	r2, [r3, #0]
100060f8:	681a      	ldr	r2, [r3, #0]
100060fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
100060fe:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
10006100:	681a      	ldr	r2, [r3, #0]
10006102:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
10006106:	601a      	str	r2, [r3, #0]

    return 0;
10006108:	2000      	movs	r0, #0
}
1000610a:	bd30      	pop	{r4, r5, pc}
1000610c:	40022000 	.word	0x40022000

10006110 <flash_page_erase>:
//
    __attribute__((section(".ramfunc")))
    __attribute__((noinline))
    int
flash_page_erase(uint32_t address)
{
10006110:	0ac0      	lsrs	r0, r0, #11
10006112:	b510      	push	{r4, lr}
    uint32_t    page_num = (address & 0x7ffffff) / FLASH_PAGE_SIZE;      // 2k pages
10006114:	b284      	uxth	r4, r0

    // protect ourselves!
    if(page_num < ((BL_FLASH_SIZE + BL_NVROM_SIZE) / FLASH_PAGE_SIZE)) {
10006116:	2c0f      	cmp	r4, #15
10006118:	f240 8099 	bls.w	1000624e <flash_page_erase+0x13e>
        return 1;
    }

    // always operate on both banks.
    bool bank2 = (page_num >= 256);
    page_num &= 0xff;
1000611c:	b2c2      	uxtb	r2, r0
    __attribute__((section(".ramfunc")))
    __attribute__((always_inline))
    static inline uint32_t
_flash_wait_done(void)
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
1000611e:	484d      	ldr	r0, [pc, #308]	; (10006254 <flash_page_erase+0x144>)
10006120:	6901      	ldr	r1, [r0, #16]
10006122:	4b4c      	ldr	r3, [pc, #304]	; (10006254 <flash_page_erase+0x144>)
10006124:	03c9      	lsls	r1, r1, #15
10006126:	d4fb      	bmi.n	10006120 <flash_page_erase+0x10>
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
10006128:	6919      	ldr	r1, [r3, #16]
1000612a:	0788      	lsls	r0, r1, #30
1000612c:	d41e      	bmi.n	1000616c <flash_page_erase+0x5c>
1000612e:	6919      	ldr	r1, [r3, #16]
10006130:	0709      	lsls	r1, r1, #28
10006132:	d41b      	bmi.n	1000616c <flash_page_erase+0x5c>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
10006134:	6919      	ldr	r1, [r3, #16]
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
10006136:	06c8      	lsls	r0, r1, #27
10006138:	d418      	bmi.n	1000616c <flash_page_erase+0x5c>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
1000613a:	6919      	ldr	r1, [r3, #16]
1000613c:	0689      	lsls	r1, r1, #26
1000613e:	d415      	bmi.n	1000616c <flash_page_erase+0x5c>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
10006140:	6919      	ldr	r1, [r3, #16]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
10006142:	0648      	lsls	r0, r1, #25
10006144:	d412      	bmi.n	1000616c <flash_page_erase+0x5c>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
10006146:	6919      	ldr	r1, [r3, #16]
10006148:	0609      	lsls	r1, r1, #24
1000614a:	d40f      	bmi.n	1000616c <flash_page_erase+0x5c>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
1000614c:	6919      	ldr	r1, [r3, #16]
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
1000614e:	05c8      	lsls	r0, r1, #23
10006150:	d40c      	bmi.n	1000616c <flash_page_erase+0x5c>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
10006152:	6919      	ldr	r1, [r3, #16]
10006154:	0589      	lsls	r1, r1, #22
10006156:	d409      	bmi.n	1000616c <flash_page_erase+0x5c>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
10006158:	691b      	ldr	r3, [r3, #16]
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
1000615a:	045b      	lsls	r3, r3, #17
1000615c:	d406      	bmi.n	1000616c <flash_page_erase+0x5c>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
1000615e:	4b3d      	ldr	r3, [pc, #244]	; (10006254 <flash_page_erase+0x144>)
10006160:	6919      	ldr	r1, [r3, #16]
10006162:	0408      	lsls	r0, r1, #16
10006164:	d402      	bmi.n	1000616c <flash_page_erase+0x5c>
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY))
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
10006166:	6999      	ldr	r1, [r3, #24]

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
10006168:	2900      	cmp	r1, #0
1000616a:	da02      	bge.n	10006172 <flash_page_erase+0x62>
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
#endif
    ) {
        // Save an error code; somewhat random
        return FLASH->SR;
1000616c:	4b39      	ldr	r3, [pc, #228]	; (10006254 <flash_page_erase+0x144>)
1000616e:	691b      	ldr	r3, [r3, #16]
10006170:	e004      	b.n	1000617c <flash_page_erase+0x6c>
    }

    // Check FLASH End of Operation flag
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
10006172:	6919      	ldr	r1, [r3, #16]
10006174:	07c9      	lsls	r1, r1, #31
        // Clear FLASH End of Operation pending bit
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
10006176:	bf44      	itt	mi
10006178:	2101      	movmi	r1, #1
1000617a:	6119      	strmi	r1, [r3, #16]

    // just in case?
    _flash_wait_done();

    // clear any and all errors
    FLASH->SR = FLASH->SR & 0xffff;
1000617c:	4b35      	ldr	r3, [pc, #212]	; (10006254 <flash_page_erase+0x144>)
1000617e:	6919      	ldr	r1, [r3, #16]
10006180:	b289      	uxth	r1, r1
10006182:	6119      	str	r1, [r3, #16]

    // disable data cache
    __HAL_FLASH_DATA_CACHE_DISABLE();
10006184:	6819      	ldr	r1, [r3, #0]
10006186:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
1000618a:	6019      	str	r1, [r3, #0]

    // choose appropriate bank to work on.
    if(bank2) {
        SET_BIT(FLASH->CR, FLASH_CR_BKER);
1000618c:	6959      	ldr	r1, [r3, #20]

    // disable data cache
    __HAL_FLASH_DATA_CACHE_DISABLE();

    // choose appropriate bank to work on.
    if(bank2) {
1000618e:	2cff      	cmp	r4, #255	; 0xff
        SET_BIT(FLASH->CR, FLASH_CR_BKER);
10006190:	bf8c      	ite	hi
10006192:	f441 6100 	orrhi.w	r1, r1, #2048	; 0x800
    } else {
        CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
10006196:	f421 6100 	bicls.w	r1, r1, #2048	; 0x800
1000619a:	6159      	str	r1, [r3, #20]
    }

    // Proceed to erase the page
    MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (page_num << POSITION_VAL(FLASH_CR_PNB)));
1000619c:	6959      	ldr	r1, [r3, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000619e:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
100061a2:	fa90 f0a0 	rbit	r0, r0
100061a6:	fab0 f080 	clz	r0, r0
100061aa:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
100061ae:	fa02 f000 	lsl.w	r0, r2, r0
100061b2:	4308      	orrs	r0, r1
100061b4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
100061b6:	695a      	ldr	r2, [r3, #20]
    __attribute__((section(".ramfunc")))
    __attribute__((always_inline))
    static inline uint32_t
_flash_wait_done(void)
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
100061b8:	4926      	ldr	r1, [pc, #152]	; (10006254 <flash_page_erase+0x144>)
        CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
    }

    // Proceed to erase the page
    MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (page_num << POSITION_VAL(FLASH_CR_PNB)));
    SET_BIT(FLASH->CR, FLASH_CR_PER);
100061ba:	f042 0202 	orr.w	r2, r2, #2
100061be:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
100061c0:	695a      	ldr	r2, [r3, #20]
100061c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
100061c6:	615a      	str	r2, [r3, #20]
    __attribute__((section(".ramfunc")))
    __attribute__((always_inline))
    static inline uint32_t
_flash_wait_done(void)
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
100061c8:	690a      	ldr	r2, [r1, #16]
100061ca:	4b22      	ldr	r3, [pc, #136]	; (10006254 <flash_page_erase+0x144>)
100061cc:	03d4      	lsls	r4, r2, #15
100061ce:	d4fb      	bmi.n	100061c8 <flash_page_erase+0xb8>
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
100061d0:	691a      	ldr	r2, [r3, #16]
100061d2:	0790      	lsls	r0, r2, #30
100061d4:	d41e      	bmi.n	10006214 <flash_page_erase+0x104>
100061d6:	691a      	ldr	r2, [r3, #16]
100061d8:	0711      	lsls	r1, r2, #28
100061da:	d41b      	bmi.n	10006214 <flash_page_erase+0x104>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
100061dc:	691a      	ldr	r2, [r3, #16]
{
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
100061de:	06d2      	lsls	r2, r2, #27
100061e0:	d418      	bmi.n	10006214 <flash_page_erase+0x104>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
100061e2:	691a      	ldr	r2, [r3, #16]
100061e4:	0694      	lsls	r4, r2, #26
100061e6:	d415      	bmi.n	10006214 <flash_page_erase+0x104>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
100061e8:	691a      	ldr	r2, [r3, #16]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
100061ea:	0650      	lsls	r0, r2, #25
100061ec:	d412      	bmi.n	10006214 <flash_page_erase+0x104>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
100061ee:	691a      	ldr	r2, [r3, #16]
100061f0:	0611      	lsls	r1, r2, #24
100061f2:	d40f      	bmi.n	10006214 <flash_page_erase+0x104>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
100061f4:	691a      	ldr	r2, [r3, #16]
        // busy wait
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
100061f6:	05d2      	lsls	r2, r2, #23
100061f8:	d40c      	bmi.n	10006214 <flash_page_erase+0x104>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
100061fa:	691a      	ldr	r2, [r3, #16]
100061fc:	0594      	lsls	r4, r2, #22
100061fe:	d409      	bmi.n	10006214 <flash_page_erase+0x104>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
10006200:	691b      	ldr	r3, [r3, #16]
    }

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
10006202:	0458      	lsls	r0, r3, #17
10006204:	d406      	bmi.n	10006214 <flash_page_erase+0x104>
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
10006206:	4b13      	ldr	r3, [pc, #76]	; (10006254 <flash_page_erase+0x144>)
10006208:	691a      	ldr	r2, [r3, #16]
1000620a:	0411      	lsls	r1, r2, #16
1000620c:	d402      	bmi.n	10006214 <flash_page_erase+0x104>
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY))
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
1000620e:	699a      	ldr	r2, [r3, #24]

    if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) ||
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
10006210:	2a00      	cmp	r2, #0
10006212:	da02      	bge.n	1000621a <flash_page_erase+0x10a>
#else
       (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
#endif
    ) {
        // Save an error code; somewhat random
        return FLASH->SR;
10006214:	4b0f      	ldr	r3, [pc, #60]	; (10006254 <flash_page_erase+0x144>)
10006216:	691b      	ldr	r3, [r3, #16]
10006218:	e004      	b.n	10006224 <flash_page_erase+0x114>
    }

    // Check FLASH End of Operation flag
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
1000621a:	691a      	ldr	r2, [r3, #16]
1000621c:	07d2      	lsls	r2, r2, #31
        // Clear FLASH End of Operation pending bit
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
1000621e:	bf44      	itt	mi
10006220:	2201      	movmi	r2, #1
10006222:	611a      	strmi	r2, [r3, #16]

    // Wait til done
    _flash_wait_done();

    // If the erase operation is completed, disable the PER Bit
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
10006224:	4b0b      	ldr	r3, [pc, #44]	; (10006254 <flash_page_erase+0x144>)
10006226:	695a      	ldr	r2, [r3, #20]
10006228:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
1000622c:	f022 0202 	bic.w	r2, r2, #2
10006230:	615a      	str	r2, [r3, #20]

    // Flush the caches to be sure of data consistency, and reenable.
    __HAL_FLASH_DATA_CACHE_RESET();
10006232:	681a      	ldr	r2, [r3, #0]
10006234:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
10006238:	601a      	str	r2, [r3, #0]
1000623a:	681a      	ldr	r2, [r3, #0]
1000623c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
10006240:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
10006242:	681a      	ldr	r2, [r3, #0]
10006244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
10006248:	601a      	str	r2, [r3, #0]

    return 0;
1000624a:	2000      	movs	r0, #0
1000624c:	bd10      	pop	{r4, pc}
{
    uint32_t    page_num = (address & 0x7ffffff) / FLASH_PAGE_SIZE;      // 2k pages

    // protect ourselves!
    if(page_num < ((BL_FLASH_SIZE + BL_NVROM_SIZE) / FLASH_PAGE_SIZE)) {
        return 1;
1000624e:	2001      	movs	r0, #1
    // Flush the caches to be sure of data consistency, and reenable.
    __HAL_FLASH_DATA_CACHE_RESET();
    __HAL_FLASH_DATA_CACHE_ENABLE();

    return 0;
}
10006250:	bd10      	pop	{r4, pc}
10006252:	bf00      	nop
10006254:	40022000 	.word	0x40022000
